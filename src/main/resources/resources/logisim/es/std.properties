#
# Namechack
#
MatchedLabelNameError = El nombre y la etiqueta de un componente no deben coincidir (no se tienen en cuenta las may\ufffdsculas).\nPor favor, especifica una etiqueta distinta al nombre del componente.
KeywordNameError = La etiqueta es una palabra reservada y no se puede usar. Por favor, especifica una etiqueta distinta.

#
# std/Builtin.java
#
builtinLibrary = Incorporada
# instance/StdAttr.java
stdFacingAttr = Orientaci\ufffdn
stdDataWidthAttr = Bits de datos
stdTriggerAttr = Flanco
stdTriggerRising = Flanco de subida
stdTriggerFalling = Flanco de bajada
stdTriggerHigh = Nivel alto
stdTriggerLow = Nivel bajo
stdLabelAttr = Etiqueta
stdLabelFontAttr = Fuente de etiqueta
stdLabelVisibility = Etiqueta visible
# instance/InstanceTextField.java
changeLabelAction = Cambiar etiqueta
#
# std/base/Base.java
#
baseLibrary = B\ufffdsico

# std/base/BitExtender.java
extenderComponent = Extensor de bits
extenderInAttr = Bits de entrada
extenderOutAttr = Bits de salida
extenderTypeAttr = Tipo de extensi\ufffdn
extenderOneType = Unos
extenderZeroType = Ceros
extenderSignType = Signo
extenderInputType = Entrada
extenderMainLabel = extensor
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = signo
extenderInputLabel = entrada

# std/base/Clock.java
clockComponent = Reloj
clockHighAttr = Duraci\ufffdn de nivel alto
clockLowAttr = Duraci\ufffdn de nivel bajo
clockDurationValue = %s ticks
clockDurationOneValue = 1 tick
PORDurationValue = %s segundos
PORDurationOneValue = 1 segundo
porHighAttr = Tiempo de POR
durationSmallMessage = El valor debe ser al menos %s.
durationLargeMessage = El valor debe ser %s o menos.
freqInvalidMessage = El valor no es un entero v\ufffdlido

PowerOnResetComponent = POR

# std/base/Pin.java
pinComponent = Pin
pinInputName = Entrada
pinOutputName = Salida
pinThreeStateAttr = \ufffdTres estados?
pinOutputAttr = \ufffdSalida?
pinPullAttr = Comportamiento de pull
pinPullNoneOption = Sin cambios
pinPullUpOption = Adoptar nivel alto
pinPullDownOption = Adoptar nivel bajo
pinLabelLocAttr = Posici\ufffdn de etiqueta
pinInputToolTip = A\ufffdadir pin de entrada
pinOutputToolTip = A\ufffdadir pin de salida
pinFrozenTitle = Pin asociado al circuito superior.
pinFrozenQuestion = El pin est\ufffd asociado al estado del circuito superior. \ufffdCrear un nuevo estado del circuito?

# std/base/Probe.java
probeComponent = Sonda

# std/base/PullResistor.java
pullComponent = Resistencia "Pull"
pullTypeAttr = Direcci\ufffdn de "pull"
pullZeroType = Uno
pullOneType = Cero
pullErrorType = Error

# std/base/Text.java
textComponent = Etiqueta
textTextAttr = Texto
textFontAttr = Fuente
textHorzAlignAttr = Alineaci\ufffdn horizontal
textHorzAlignLeftOpt = Izquierda
textHorzAlignRightOpt = Derecha
textHorzAlignCenterOpt = Centro
textVertAlignAttr = Alineaci\ufffdn vertical
textVertAlignTopOpt = Arriba
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Abajo
textVertAlignCenterOpt = Centro

# std/base/Tunnel.java
tunnelComponent = T\ufffdnel

#
# std/Wiring.java
#
wiringLibrary = Cableado
wiringGateAttr = Posici\ufffdn de la puerta
wiringGateBottomRightOption = Abajo/derecha
wiringGateTopLeftOption = Arriba/izquierda

# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Tipo
transistorTypeP = Tipo P
transistorTypeN = Tipo N

# std/wiring/TransmissionGate.java
transmissionGateComponent = Puerta de transmisi\ufffdn

# std/wiring/Power.java
powerComponent = Alimentaci\ufffdn

# std/wiring/Ground.java
groundComponent = Tierra

#
# std/Gates.java
#
gatesLibrary = Puertas
gateSizeAttr = Tama\ufffdo de puerta
gateSizeNarrowOpt = Estrecho
gateSizeNormalOpt = Medio
gateSizeWideOpt = Ancho
gateNegateAttr = Negar %s
gateInputsAttr = N\ufffdmero de entradas
gateOutput01 = 0/1
gateOutput0Z = 0/flotante
gateOutputZ1 = flotante/1
gateOutputAttr = Valor de salida
xorBehaviorAttr = Comportamiento con m\ufffdltiples entradas
xorBehaviorOne = Con una entrada activada
xorBehaviorOdd = Con un n\ufffdmero impar de entradas activadas
# std/Constant.java
constantComponent = Constante
constantValueAttr = Valor
# std/NotGate.java
notGateComponent = Puerta NOT
# std/Buffer.java
bufferComponent = B\ufffdfer
# std/AndGate.java
andGateComponent = Puerta AND
# std/NandGate.java
nandGateComponent = Puerta NAND
# std/NorGate.java
norGateComponent = Puerta NOR
# std/OrGate.java
orGateComponent = Puerta OR
# std/XorGate.java
xorGateComponent = Puerta XOR
# std/XnorGate.java
xnorGateComponent = Puerta XNOR
# std/OddParityGate.java
oddParityComponent = Detector de imparidad
# std/EvenParityGate.java
evenParityComponent = Detector de paridad
# std/ControlledBuffer.java
controlledBufferComponent = B\ufffdfer controlado
controlledInverterComponent = Inversor controlado
controlledControlOption = Localizaci\ufffdn de control
controlledLeftHanded = Izquierda
controlledRightHanded = Derecha
#
# std/Memory.java
#
memoryLibrary = Memoria
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopClockTip = Reloj: el estado se actualiza en el flanco de reloj
flipFlopQTip = Estado actual del biestable
flipFlopNotQTip = Inverso del estado actual del biestable
flipFlopResetTip = Clear: cuando se pone a 1, el estado se hace 0 as\ufffdncronamente
flipFlopPresetTip = Preset: cuando se pone a 1, el estado se hace 1 as\ufffdncronamente
flipFlopEnableTip = Enable: cuando est\ufffd a 0, se ignoran los flancos de reloj
# std/Counter.java
counterComponent = Contador
counterMaxAttr   = Valor m\ufffdximo
counterGoalAttr  = Acci\ufffdn cuando se desborda
counterGoalWrap  = Continuar desde el inicio
counterGoalStay  = Mantener valor final
counterGoalContinue = Continuar cuenta con m\ufffds bits
counterGoalLoad  = Cargar valor siguiente
counterQTip      = Salida: valor actual del contador
counterClockTip  = Reloj: el valor se actualiza cada flanco de reloj
counterDataTip   = Data: valor a cargar en el contador
counterLoadTip   = Load: cuando se pone a 1, introduce el dato externo "Data"
counterEnableTip = Enable: cuando est\ufffd a 1, la cuenta puede subir o bajar
counterUpDownTip = UpDown: cuando est\ufffd a 1, la cuenta sube; cuando est\ufffd a 0, la cuenta baja
counterResetTip  = Clear: cuando se pone a 1, la cuenta se hace 0 as\ufffdncronamente
counterCarryTip  = Carry: toma el valor 1 cuando se ha alcanzado el m\ufffdximo (o m\ufffdnimo, si la cuenta es decreciente)
counterEnableLabel = ct
counterLabel = ctr
# std/DFlipFlop.java
dFlipFlopComponent = Biestable D
# std/TFlipFlop.java
tFlipFlopComponent = Biestable T
# std/JKFlipFlop.java
jkFlipFlopComponent = Biestable JK
# std/SRFlipFlop.java
srFlipFlopComponent = Biestable SR
# std/Random.java
randomSeedAttr = Semilla
randomComponent = Generador aleatorio
randomQTip = Salida: n\ufffdmero actual en la secuencia
randomClockTip = Reloj: el valor se actualiza cada flanco de reloj
randomNextTip = Enable: permite pasar al siguiente valor cuando se produce un flanco de reloj
randomResetTip = Clear: cuando se pone a 1, la salida pasa a ser la semilla original as\ufffdncronamente
# std/Register.java
registerComponent = Registro
registerQTip = Salida: valor actual del registro
registerDTip = Data: valor a guardar cuando se produzca flanco de reloj
registerClkTip = Reloj: actualiza el valor del registro en el flanco de reloj
registerClrTip = Clear: cuando se pone a 1, el valor del registro se hace 0 as\ufffdncronamente
registerEnableTip = Enable: cuando est\ufffd a 0, se ignoran los flancos de reloj
registerLabel = reg
registerWidthLabel = (%sb)
registerShowInTab = Mostrar en pesta\ufffda de registros
# std/RamFactory.java
ramComponent = RAM
# std/RomFactory.java
romComponent = ROM
ramContentsAttr = Contenidos iniciales
romContentsAttr = Contenidos
romContentsValue = (clic para editar)
romChangeAction = Editar contenidos de la ROM
# std/Ram.java
ramAddrWidthAttr = N\ufffdmero de bits de direcci\ufffdn
ramDataWidthAttr = N\ufffdmero de bits de datos
ramDataAddrAttr = Direccionamiento
ramDataLabel = D
ramAddrLabel = A
ramWELabel = str
ramCSLabel = sel
ramOELabel = ld
ramClrLabel = clr
ramByteEnableTip0 = Byte enable para los bits 7..0
ramByteEnableTip1 = Byte enable para los bits 15..8
ramByteEnableTip2 = Byte enable para los bits 23..16
ramByteEnableTip3 = Byte enable para los bits 31..24
ramWithByteEnables = Usar byte enable (m\ufffdscaras)
ramNoByteEnables = Lectura/escritura de palabras completas
ramByteEnables = Control de lectura y escritura
ramGigabyteLabel = RAM de %sGB
ramMegabyteLabel = RAM de %sMB
ramKilobyteLabel = RAM de %sKB
ramByteLabel = RAM de %sB
romGigabyteLabel = ROM de %sGB
romMegabyteLabel = ROM de %sMB
romKilobyteLabel = ROM de %sKB
romByteLabel = ROM de %sB
memDataTip = Dato: valor le\ufffddo en la direcci\ufffdn
memAddrTip = Direcci\ufffdn: localizaci\ufffdn de la memoria a la que se quiere acceder
memCSTip = Chip select: el valor 0 deshabilita el componente
ramClkTip = Reloj: los cambios en los valores de memoria se producen en los flancos de subida
ramOETip = Load: si toma el valor 1, mostrar lectura a la salida
ramWETip = Store: si toma el valor 1, escribir dato de entrada en la memoria
ramClrTip = Clear: cuando se pone a 1, rellena de ceros la memoria as\ufffdncronamente
ramBusTip = Data: valor le\ufffddo o escrito en la direcci\ufffdn
ramInTip = Entrada: valor a ser guardado en la direcci\ufffdn indicada
ramBusAttr = Interfaz de datos
ramBusSynchCombined = Un puerto de carga/almacenamiento s\ufffdncrono
ramBusAsynchCombined = Un puerto de carga/almacenamiento as\ufffdncrono
ramBusSeparate = Puertos de carga y almacenamiento separados
ramBidirDataBus = Un bus de datos bidireccional
ramSeparateDataBus = Buses de datos separados para lectura y escritura
ramDataAttr = Implementaci\ufffdn del bus de datos
ramAttrRdTick = Implementaci\ufffdn de lectura
ramAttrRdTickDefault = Leer en el flanco de reloj seleccionado
ramAttrRdTickEarly = Esperar un ciclo de reloj para leer
ramEditMenuItem = Editar contenidos...
ramClearMenuItem = Borrar contenidos
ramLoadMenuItem = Cargar imagen...
ramSaveMenuItem = Guardar imagen...
ramConfirmClearTitle = Confirmar borrado
ramConfirmClearMsg = \ufffdEst\ufffds seguro de que quieres borrar la memoria?
ramLoadDialogTitle = Cargar imagen de RAM
ramLoadErrorTitle = Error al cargar
ramSaveDialogTitle = Guardar imagen de RAM
ramSaveErrorTitle = Error al guardar
# std/memory/ShiftRegister.java
shiftRegisterComponent = Registro de desplazamiento
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = N\ufffdmero de etapas
shiftRegParallelAttr = Carga en paralelo
shiftRegShiftTip = Shift: cuando est\ufffd a 0, el desplazamiento est\ufffd desactivado
shiftRegClockTip = Reloj: el estado se actualiza en el flanco de reloj
shiftRegClearTip = Clear: cuando se pone a 1, pone todas las etapas a 0 as\ufffdncronamente
shiftRegInTip    = Entrada: valor que aparecer\ufffd en la primera etapa de desplazamiento
shiftRegOutTip   = Salida: valor que se encuentra en la \ufffdltima etapa
shiftRegLoadTip  = Load: cuando se pone a 1 y "shift" es 0, se actualizan todas las etapas con los datos a la entrada
#
# std/Plexers.java
#
plexerLibrary = Plexores
plexerSelectBitsAttr = Bits de selecci\ufffdn
plexerThreeStateAttr = \ufffdTres estados?
plexerDisabledAttr = Salida desactivada
plexerDisabledFloating = Flotante
plexerDisabledZero = Cero
plexerEnableAttr = \ufffdIncluir Enable?
plexerSelectLocAttr = Posici\ufffdn de selecci\ufffdn
plexerSelectTopRightOption = Arriba/derecha
plexerSelectBottomLeftOption = Abajo/izquierda
# std/Multiplexer.java
multiplexerComponent = Multiplexor
multiplexerSelectTip = Select: selecci\ufffdn del valor de entrada que aparece a la salida
multiplexerEnableTip = Enable: si toma el valor 1, la entrada seleccionada aparece a la salida
multiplexerInTip = Entrada %s
multiplexerOutTip = Salida
# std/Demultiplexer.java
demultiplexerComponent = Demultiplexor
demultiplexerSelectTip = Select: en cu\ufffdl de las salidas aparece la entrada
demultiplexerEnableTip = Enable: si toma el valor 1, la entrada aparece en la salida seleccionada
demultiplexerInTip = Entrada
demultiplexerOutTip = Salida %s
# std/Decoder.java
decoderComponent = Decodificador
decoderSelectTip = Select: selecciona cu\ufffdl de las salidas se pone a 1
decoderEnableTip = Enable: si toma el valor 1, la salida seleccionada se pone a 1
decoderOutTip = Salida %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = Codificador de prioridad
priorityEncoderInTip = Entrada %s
priorityEncoderOutTip = Salida: direcci\ufffdn de la entrada que est\ufffd a 1 con el \ufffdndice m\ufffds alto
priorityEncoderEnableInTip = Enable Input: el valor 0 deshabilita el componente
priorityEncoderEnableOutTip = Enable Output: toma el valor 1 si Enable Input = 1 y ninguna de las dem\ufffds entradas est\ufffd a 1
priorityEncoderGroupSignalTip = Group Select: toma el valor 1 si Enable Input = 1 y cualquiera de las entradas est\ufffd a 1
# std/BitSelector.java
bitSelectorComponent = Selector de bits
bitSelectorGroupAttr = Bits de salida
bitSelectorOutputTip = Salida: valor del grupo de bits seleccioando en el dato
bitSelectorDataTip = Dato
bitSelectorSelectTip = Select: identifica c\ufffdal de los grupos del dato est\ufffd seleccionado
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritm\ufffdtica
# arith/Adder.java
adderComponent = Sumador
adderInputTip = Entrada: uno de los n\ufffdmeros a sumar
adderOutputTip = Salida: la suma de las entradas (junto con el acarreo de entrada)
adderCarryInTip = Carry In: acarreo de entrada, que se a\ufffdade al resultado de la suma
adderCarryOutTip = Carry Out: acarreo de salida, toma el valor 1 si se produce desbordamiento
# arith/Subtractor.java
subtractorComponent = Restador
subtractorMinuendTip = Minuend: minuendo (el n\ufffdmero al que se resta una cantidad)
subtractorSubtrahendTip = Subtrahend: sustraendo (la cantidad que se resta al minuendo)
subtractorOutputTip = Salida: diferencia, minuendo - sustraendo
subtractorBorrowInTip = Borrow In: si es 1, restar 1 unidad a la salida
subtractorBorrowOutTip = Borrow Out: devuelve 1 si el resultado de la resta es negativo
# arith/Multiplier.java
multiplierComponent = Multiplicador
multiplierInputTip = Entrada: uno de los n\ufffdmeros a multiplicar
multiplierOutputTip = Salida: el producto de las entradas, incluyendo el acarreo de entrada
multiplierCarryInTip = Carry In: acarreo de entrada, n\ufffdmero que se sumar\ufffd al resultado de la multiplicaci\ufffdn
multiplierCarryOutTip = Carry Out: los bits m\ufffds significativos del producto
# arith/Divider.java
dividerComponent = Divisor
dividerUpperInput = upper
dividerRemainderOutput = rem
dividerDividendLowerTip = Dividend Lower: la mitad menos significativa del dividendo
dividerDividendUpperTip = Dividend Upper: la mitad m\ufffds significativa del dividendo
dividerDivisorTip = Divisor: el n\ufffdmero entre el cual se divide
dividerOutputTip = Salida: resultado de dividir el dividendo entre el divisor
dividerRemainderTip = Remainder: el resto de la divisi\ufffdn (igual a dividendo - salida * divisor)
# arith/Negator.java
negatorComponent = Negador
negatorInputTip = Entrada: el n\ufffdmero a ser negado
negatorOutputTip = Salida: la negaci\ufffdn en complemento a 2 de la entrada
# arith/Comparator.java
comparatorComponent = Comparador
comparatorType = Tipo de n\ufffdmero
unsignedOption = Sin signo
twosComplementOption = Complemento a 2
comparatorInputATip = A: el primer t\ufffdrmino de la comparaci\ufffdn (n\ufffdmero de la izquierda)
comparatorInputBTip = B: el segundo t\ufffdrmino de la comparaci\ufffdn (n\ufffdmero de la derecha)
comparatorLessTip = Less: vale 1 si A es menor que B
comparatorEqualTip = Equal: vale 1 si A es igual a B
comparatorGreaterTip = Greater: vale 1 si A es mayor que B
# arith/Shifter.java
shifterComponent = Desplazador
shifterShiftAttr = Tipo de desplazamiento
shiftLogicalLeft = L\ufffdgico a la izquierda
shiftLogicalRight = L\ufffdgico a la derecha
shiftArithmeticRight = Aritm\ufffdtico a la derecha
shiftRollLeft = Rotar hacia la izquierda
shiftRollRight = Rotar hacia la derecha
shifterDistanceTip = Distancia: cu\ufffdntos bits se desplaza la entrada
shifterInputTip = Entrada: el n\ufffdmero binario cuyos bits van a ser desplazados
shifterOutputTip = Salida: resultado tras aplicar el desplazamiento al n\ufffdmero de entrada
# arith/BitAdder.java
bitAdderComponent = Contador de unos
bitAdderInputTip = Entrada: n\ufffdmero binario
bitAdderOutputManyTip = Salida: n\ufffdmero en binario que expresa cu\ufffdntos bits de la entrada son 1
# arith/BitFinder.java
bitFinderComponent = Buscador de bit
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderLowLabel = low
bitFinderHighOption = %s m\ufffds significativo
bitFinderLowOption = %s menos significativo
bitFinderTypeAttr = Tipo
bitFinderIndexHighTip = Index: \ufffdndice del bit %s m\ufffds significativo de la entrada
bitFinderIndexLowTip = Index: \ufffdndice del bit %s menos significativo de la entrada
bitFinderPresentTip = Present: devuelve 1 si la entrada contiene un %s
bitFinderInputTip = Entrada: n\ufffdmero binario en el que se quiere hacer la b\ufffdsqueda
#
# io
#
# io/Io.java
ioLibrary = Entrada/Salida
ioLabelCenter = Centro
ioBitWidthAttr = N\ufffdmero de bits
ioColorAttr = Color
ioLabelLocAttr = Posici\ufffdn de etiqueta
ioLabelColorAttr = Color de etiqueta
ioActiveAttr = \ufffdActivo a nivel alto?
# io/Button.java
buttonComponent = Bot\ufffdn
# io/Joystick.java
joystickComponent = Joystick
# io/Keyboard.java
keyboardComponent = Teclado
keybDesc = teclado (cap. de b\ufffdfer %s)
keybBufferLengthAttr = Tama\ufffdo de b\ufffdfer
keybClearTip = Clear: cuando se pone a 1 vac\ufffda el b\ufffdfer
keybClockTip = Reloj: el flanco de reloj lee el primer car\ufffdcter del b\ufffdfer
keybEnableTip = Read enable: si toma el valor 0 desactiva la funci\ufffdn del reloj
keybAvailTip = Available: devuelve 1 cuando el b\ufffdfer contiene caracteres
keybOutputTip = Data: valor ASCII del primer car\ufffdcter del b\ufffdfer
# io/Led.java
ledComponent = LED
RGBledComponent = LED RGB
# io/DipSwitch.java
dipswitchComponent = Interruptor DIP
nrOfSwitch = N\ufffdmero de interruptores
# io/SevenSegment.java
sevenSegmentComponent = Display 7 segmentos
# io/HexDigit.java
hexDigitComponent = Display de d\ufffdgito hexadecimal
# io/DotMatrix.java
dotMatrixComponent = Matriz de LED
ioMatrixInput = Formato de entrada
ioMatrixRows = Filas de la matriz
ioMatrixCols = Columnas de la matriz
ioOnColor = Color de modo activado
ioOffColor = Color de modo desactivado
ioBackgroundColor = Fondo
ioMatrixPersistenceAttr = Persistencia de luz
ioMatrixShape = Forma de puntos
ioInputColumn = Columnas
ioInputRow = Filas
ioInputSelect = Seleccionar filas/columnas
ioShapeCircle = Circular
ioShapeSquare = Cuadrado
# io/Tty.java
ttyComponent = TTY
ttyDesc = TTY (%s filas, %s columnas)
ttyDescShort = TTY
ttyRowsAttr = Filas
ttyColsAttr = Columnas
ttyClearTip = Clear: cuando se pone a 1 vac\ufffda la pantalla
ttyClockTip = Reloj: cuando se produce un flanco se a\ufffdade el car\ufffdcter de la entrada
ttyEnableTip = Write enable: el valor 0 hace que se ignore el reloj
ttyInputTip = Data: valor ASCII del siguiente car\ufffdcter a escribir
# io/PortIO.java
pioComponent = Puerto de entrada/salida
pioNumber = N\ufffdmero de pines
pioShowBus = \ufffdTipo de conexi\ufffdn?
pioBuses = Uno o m\ufffds buses
pioPins = Pin \ufffdnico
# io/ReptarLocalBus.java
repLBComponent = Bus local REPTAR
#
# hdl
#
# hdl/hdl.java
hdlLibrary = HDL-IP
# hdl/VhdlEntity.java
vhdlComponent = Entidad VHDL
vhdlContentAttr = Contenido
vhdlContentValue = (clic para editar)
# hdl/VhdlParser.jave
emptySourceException = No se puede analizar un contenido vac\ufffdo
duplicatedEntityException = Declaraci\ufffdn de entidad duplicada detectada
CannotFindEntityException = No se puede encontrar la declaraci\ufffdn de la entidad
CannotFindLibrariesException = No se pueden encontrar las declaraciones de las librer\ufffdas
invalidVhdlFile = La estructura del archivo VHDL no es v\ufffdlida
missingBracketException = Faltan par\ufffdntesis en la declaraci\ufffdn de puertos
portDeclarationException = Sintaxis de puerto no permitida
multiplePortsDeclarationException = Sintaxis de puertos m\ufffdltiples no permitida
vectorDeclarationException = Sintaxis de vector no permitida
lineDeclarationException = Sintaxis de l\ufffdnea no permitida
invalidTypeException = Tipo de puerto no v\ufffdlido
keywordNotFoundException = No se puede encontrar la palabra clave '%s' en la descripci\ufffdn de la entidad
# HdlContentEditor.java
hdlFrameTitle = Logisim-evolution: Editor HDL
openButton = Importar...
saveButton = Exportar...
validateButton = Validar contenido
closeButton = Cerrar ventana
importMessage = Cualquier cambio en este componente se perder\ufffd. \ufffdImportar de todas formas?
importTitle = Confirmar importaci\ufffdn
importOption = Importar
cancelOption = Cancelar
confirmCloseYes = S\ufffd
confirmCloseNo = No
confirmCloseBackup = Crear copia de seguridad
confirmCloseTitle = Confirmar
confirmCloseMessage = Cualquier cambio en este componente se perder\ufffd. \ufffdCerrar de todas formas?
# HdlContent
validationErrorButton = Continuar
validationParseError = Error de an\ufffdlisis
#
# tcl
#
tclLibrary = TCL
tclConsoleReds = Consola TCL REDS
tclGeneric = TCL gen\ufffdrico
tclConsoleContentFile = Archivo TCL

tclInterfaceDefinition = Entidad VHDL de la interfaz TCL
tclInterfaceDefinitionValue = (clic para editar)
