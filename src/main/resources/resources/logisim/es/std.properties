#
# arith/Adder.java
#
adderCarryInTip = Carry In: acarreo de entrada, que se a\u00f1ade al resultado de la suma
adderCarryOutTip = Carry Out: acarreo de salida, toma el valor 1 si se produce desbordamiento
adderComponent = Sumador
adderInputTip = Entrada: uno de los n\u00fameros a sumar
adderOutputTip = Salida: la suma de las entradas (junto con el acarreo de entrada)
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritm\u00e9tica
#
# arith/BitAdder.java
#
bitAdderComponent = Contador de unos
bitAdderInputTip = Entrada: n\u00famero binario
bitAdderOutputManyTip = Salida: n\u00famero en binario que expresa cu\u00e1ntos bits de la entrada son 1
gateInputsAttr = N\u00famero de entradas
#
# arith/BitFinder.java
#
bitFinderComponent = Buscador de bit
bitFinderFindLabel = descubrimiento
bitFinderHighLabel = elevado
bitFinderHighOption = %s m\u00e1s significativo
bitFinderIndexHighTip = Index: \u00edndice del bit %s m\u00e1s significativo de la entrada
bitFinderIndexLowTip = Index: \u00edndice del bit %s menos significativo de la entrada
bitFinderInputTip = Entrada: n\u00famero binario en el que se quiere hacer la b\u00fasqueda
bitFinderLowLabel = m\u00ednimo
bitFinderLowOption = %s menos significativo
bitFinderPresentTip = Present: devuelve 1 si la entrada contiene un %s
bitFinderTypeAttr = Tipo
#
# arith/Comparator.java
#
comparatorComponent = Comparador
comparatorEqualTip = Equal: vale 1 si A es igual a B
comparatorGreaterTip = Greater: vale 1 si A es mayor que B
comparatorInputATip = A: el primer t\u00e9rmino de la comparaci\u00f3n (n\u00famero de la izquierda)
comparatorInputBTip = B: el segundo t\u00e9rmino de la comparaci\u00f3n (n\u00famero de la derecha)
comparatorLessTip = Less: vale 1 si A es menor que B
comparatorType = Tipo de n\u00famero
twosComplementOption = Complemento a 2
unsignedOption = Sin signo
#
# arith/Divider.java
#
dividerComponent = Divisor
dividerDividendLowerTip = Dividend Lower: la mitad menos significativa del dividendo
dividerDividendUpperTip = Dividend Upper: la mitad m\u00e1s significativa del dividendo
dividerDivisorTip = Divisor: el n\u00famero entre el cual se divide
dividerOutputTip = Salida: resultado de dividir el dividendo entre el divisor
dividerRemainderOutput = rem
dividerRemainderTip = Remainder: el resto de la divisi\u00f3n (igual a dividendo - salida * divisor)
dividerUpperInput = upper
#
# arith/Multiplier.java
#
multiplierCarryInTip = Carry In: acarreo de entrada, n\u00famero que se sumar\u00e1 al resultado de la multiplicaci\u00f3n
multiplierCarryOutTip = Carry Out: los bits m\u00e1s significativos del producto
multiplierComponent = Multiplicador
multiplierInputTip = Entrada: uno de los n\u00fameros a multiplicar
multiplierOutputTip = Salida: el producto de las entradas, incluyendo el acarreo de entrada
#
# arith/Negator.java
#
negatorComponent = Negador
negatorInputTip = Entrada: el n\u00famero a ser negado
negatorOutputTip = Salida: la negaci\u00f3n en complemento a 2 de la entrada
#
# arith/Shifter.java
#
shiftArithmeticRight = Aritm\u00e9tico a la derecha
shifterComponent = Desplazador
shifterDistanceTip = Distancia: cu\u00e1ntos bits se desplaza la entrada
shifterInputTip = Entrada: el n\u00famero binario cuyos bits van a ser desplazados
shifterOutputTip = Salida: resultado tras aplicar el desplazamiento al n\u00famero de entrada
shifterShiftAttr = Tipo de desplazamiento
shiftLogicalLeft = L\u00f3gico a la izquierda
shiftLogicalRight = L\u00f3gico a la derecha
shiftRollLeft = Rotar hacia la izquierda
shiftRollRight = Rotar hacia la derecha
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Borrow In: si es 1, restar 1 unidad a la salida
subtractorBorrowOutTip = Borrow Out: devuelve 1 si el resultado de la resta es negativo
subtractorComponent = Restador
subtractorMinuendTip = Minuend: minuendo (el n\u00famero al que se resta una cantidad)
subtractorOutputTip = Salida: diferencia, minuendo - sustraendo
subtractorSubtrahendTip = Subtrahend: sustraendo (la cantidad que se resta al minuendo)
#
# base/Base.java
#
baseLibrary = B\u00e1sico
#
# base/Text.java
#
textComponent = Etiqueta
textFontAttr = Fuente
textHorzAlignAttr = Alineaci\u00f3n horizontal
textHorzAlignCenterOpt = Centro
textHorzAlignLeftOpt = Izquierda
textHorzAlignRightOpt = Derecha
textTextAttr = Texto
textVertAlignAttr = Alineaci\u00f3n vertical
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Abajo
textVertAlignCenterOpt = Centro
textVertAlignTopOpt = Arriba
#
# base/VhdlParser.java
#
CannotFindEntityException = No se puede encontrar la declaraci\u00f3n de la entidad
emptySourceException = No se puede analizar el contenido vac\u00edo
genericDeclarationException = Sintaxis de gen\u00e9ricos ilegales
genericTypeException = Tipo de gen\u00e9ricos no soportados
genericValueException = Valor por defecto de los gen\u00e9ricos no reconocidos
invalidTypeException = Tipo de puerto no v\u00e1lido
portDeclarationException = Sintaxis de puertos ilegales
#
# Builtin.java
#
builtinLibrary = Incorporada
#
# gates/AndGate.java
#
andGateComponent = Puerta AND
#
# gates/Buffer.java
#
bufferComponent = B\u00fafer
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = B\u00fafer controlado
controlledControlOption = Localizaci\u00f3n de control
controlledInverterComponent = Inversor controlado
controlledLeftHanded = Izquierda
controlledRightHanded = Derecha
#
# gates/EvenParityGate.java
#
evenParityComponent = Detector de paridad
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/flotante
gateOutputAttr = Valor de salida
gateOutputZ1 = flotante/1
gateSizeNormalOpt = Medio
xorBehaviorAttr = Comportamiento con m\u00faltiples entradas
xorBehaviorOdd = Con un n\u00famero impar de entradas activadas
xorBehaviorOne = Con una entrada activada
#
# gates/Gates.java
#
gatesLibrary = Puertas
#
# gates/NandGate.java
#
nandGateComponent = Puerta NAND
#
# gates/NegateAttribute.java
#
gateNegateAttr = Negar %s
#
# gates/NorGate.java
#
norGateComponent = Puerta NOR
#
# gates/NotGate.java
#
gateSizeAttr = Tama\u00f1o de puerta
gateSizeNarrowOpt = Estrecho
gateSizeWideOpt = Ancho
notGateComponent = Puerta NOT
#
# gates/OddParityGate.java
#
oddParityComponent = Detector de imparidad
#
# gates/OrGate.java
#
orGateComponent = Puerta OR
#
# gates/PLA.java
#
Bit Width In = Ancho de broca en
Bit Width Out = Ancho de broca hacia fuera
input = aportaci\u00f3n
output = salida
PLA = APA
plaClickToEdit = (haga clic para editar)
plaEditMenuItem = Editar programa PLA....
plaProgram = Programa
#
# gates/PLATable.java
#
plaEditorTitle = Editor de programas PLA
plaFileCreateError = No se pudo crear el archivo.
plaFileOpenError = No se pudo abrir el archivo.
plaLoadDialogTitle = Cargar Programa PLA
plaLoadErrorTitle = Error al cargar el programa PLA
plaSaveDialogTitle = Programa Save PLA
plaSaveErrorTitle = Error al guardar el programa PLA
#
# gates/XnorGate.java
#
xnorGateComponent = Puerta XNOR
#
# gates/XorGate.java
#
xorGateComponent = Puerta XOR
#
# InstanceComponent.java
#
KeywordNameError = La etiqueta es una palabra reservada y no se puede usar. Por favor, especifica una etiqueta distinta.
MatchedLabelNameError = El nombre y la etiqueta de un componente no deben coincidir (no se tienen en cuenta las may\u00fasculas).\nPor favor, especifica una etiqueta distinta al nombre del componente.
#
# InstanceTextField.java
#
changeLabelAction = Cambiar etiqueta
#
# io/Button.java
#
buttonComponent = Bot\u00f3n
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = Interruptor DIP
nrOfSwitch = N\u00famero de interruptores
#
# io/DotMatrix.java
#
ioInputColumn = Columnas
ioInputRow = Filas
ioInputSelect = Seleccionar filas/columnas
ioMatrixCols = Columnas de la matriz
ioMatrixInput = Formato de entrada
ioMatrixPersistenceAttr = Persistencia de luz
ioMatrixRows = Filas de la matriz
ioMatrixShape = Forma de puntos
ioShapeCircle = Circular
ioShapeSquare = Cuadrado
#
# io/extra/Buzzer.java
#
buzzerComponent = Zumbador
buzzerFrequecy = frecuencia
buzzerVolume = envergadura
buzzerVolumeBitWidth = ancho de bit de volumen
dHz (0.1Hz) = dHz (0.1Hz)
enableSound = Habilitar sonido
Hz = Hz
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Color del borde
bothOption = a la vez
ClearDiagram = Esquema claro
DigitalOscilloscopeClock = cronometrar
DrawClockFrontLine = dibujar la primera l\u00ednea del reloj
noOption = ninguno
ShowClockAttribute = Mostrar atributo de reloj
stdTriggerFalling = Flanco de bajada
stdTriggerRising = Flanco de subida
#
# io/extra/ITA_IO.java
#
DigitalOscilloscopeComponent = oscilador digital
Slider = control deslizante
#
# io/extra/PlaRom.java
#
memCSTip = Chip select: el valor 0 deshabilita el componente
PlaANDAttr = Y
PlaOutputsAttr = Salida
PlaRomComponent = 
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Pla Rom %s editar ventana
#
# io/extra/PlaRomPanel.java
#
demultiplexerInTip = Entrada
multiplexerOutTip = Salida
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Nr. de Estados
#
# io/extra/ProgrammableGeneratorState.java
#
ProgrammableGeneratorComponent = Generador de programas
#
# io/extra/Slider.java
#
left_to_rightOption = de izquierda a derecha
right_to_leftOption = de derecha a izquierda
#
# io/extra/Switch.java
#
switchComponent = conmutador
#
# io/HexDigit.java
#
hexDigitDataTip = Datos: mordisquear para mostrar en hexadecimal
hexDigitDPTip = DecimalPoint: ilumina el punto decimal
#
# io/HexDigitShape.java
#
hexDigitComponent = Display de d\u00edgito hexadecimal
#
# io/Io.java
#
dipswitchComponent = Interruptor DIP
dotMatrixComponent = Matriz de LED
ioActiveAttr = \u00bfActivo a nivel alto?
ioBackgroundColor = Fondo
ioColorAttr = Color
ioLibrary = Entrada/Salida
ioOffColor = Color de modo desactivado
ioOnColor = Color de modo activado
joystickComponent = Joystick
#
# io/Joystick.java
#
ioBitWidthAttr = N\u00famero de bits
#
# io/Keyboard.java
#
keybAvailTip = Available: devuelve 1 cuando el b\u00fafer contiene caracteres
keybBufferLengthAttr = Tama\u00f1o de b\u00fafer
keybClearTip = Clear: cuando se pone a 1 vac\u00eda el b\u00fafer
keybClockTip = Reloj: el flanco de reloj lee el primer car\u00e1cter del b\u00fafer
keybDesc = teclado (cap. de b\u00fafer %s)
keybEnableTip = Read enable: si toma el valor 0 desactiva la funci\u00f3n del reloj
keyboardComponent = Teclado
keybOutputTip = Data: valor ASCII del primer car\u00e1cter del b\u00fafer
#
# io/Led.java
#
ledComponent = LED
#
# io/PortIO.java
#
pioBuses = Uno o m\u00e1s buses
pioComponent = Puerto de entrada/salida
pioNumber = N\u00famero de pines
pioPins = Pin \u00fanico
pioShowBus = \u00bfTipo de conexi\u00f3n?
#
# io/ReptarLocalBus.java
#
repLBComponent = Bus local REPTAR
repLBTip = Punta B
#
# io/RGBLed.java
#
BLUE = Entrada azul
GREEN = Entrada verde
RED = Entrada roja
RGBledComponent = LED RGB
#
# io/SevenSegment.java
#
DecimalPoint = Punto decimal
Segment_A = Segmento A
Segment_B = Segmento B
Segment_C = Segmento C
Segment_D = Segmento D
Segment_E = Segmento E
Segment_F = Segmento F
Segment_G = Segmento G
sevenSegmentComponent = Display 7 segmentos
#
# io/Tty.java
#
ttyClearTip = Clear: cuando se pone a 1 vac\u00eda la pantalla
ttyClockTip = Reloj: cuando se produce un flanco se a\u00f1ade el car\u00e1cter de la entrada
ttyColsAttr = Columnas
ttyComponent = TTY
ttyDesc = TTY (%s filas, %s columnas)
ttyDescShort = TTY
ttyEnableTip = Write enable: el valor 0 hace que se ignore el reloj
ttyInputTip = Data: valor ASCII del siguiente car\u00e1cter a escribir
ttyRowsAttr = Filas
#
# io/Video.java
#
rgbVideoCLK = Reloj
rgbVideoColor = Modelo de color
rgbVideoComponent = V\u00eddeo RGB
rgbVideoCursor = Cursor
rgbVideoData = Datos en formato %s
rgbVideoHeight = Altura
rgbVideoReset = Restablecer Comportamiento
rgbVideoRST = Reiniciar
rgbVideoScale = Escala
rgbVideoWE = Habilitar escritura
rgbVideoWidth = Ancho
rgbVideoX = X Coordenada
rgbVideoY = Coordenada Y
#
# library/bcd2sevenseg.java
#
BCD Value = Valor BCD
BCD2SevenSegment = BCD a siete segmentos
#
# library/BFHPraktika.java
#
BFH mega functions = Mega funciones de BFH
#
# library/bin2bcd.java
#
Bin2BCD = Binairy a BCD
Binairy data bits = Bits de datos binarios
BinairyInputTip = Entrada binaria
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Reloj: el estado se actualiza en el flanco de reloj
flipFlopNotQTip = Inverso del estado actual del biestable
flipFlopPresetTip = Preset: cuando se pone a 1, el estado se hace 1 as\u00edncronamente
flipFlopQTip = Estado actual del biestable
flipFlopResetTip = Clear: cuando se pone a 1, el estado se hace 0 as\u00edncronamente
#
# memory/Counter.java
#
counterCarryTip = Carry: toma el valor 1 cuando se ha alcanzado el m\u00e1ximo (o m\u00ednimo, si la cuenta es decreciente)
counterClockTip = Reloj: el valor se actualiza cada flanco de reloj
counterDataTip = Data: valor a cargar en el contador
counterEnableLabel = ct
counterEnableTip = Enable: cuando est\u00e1 a 1, la cuenta puede subir o bajar
counterGoalAttr = Acci\u00f3n cuando se desborda
counterGoalContinue = Continuar cuenta con m\u00e1s bits
counterGoalLoad = Cargar valor siguiente
counterGoalStay = Mantener valor final
counterGoalWrap = Continuar desde el inicio
counterLabel = ctr
counterLoadTip = Load: cuando se pone a 1, introduce el dato externo "Data"
counterMaxAttr = Valor m\u00e1ximo
counterQTip = Salida: valor actual del contador
counterResetTip = Clear: cuando se pone a 1, la cuenta se hace 0 as\u00edncronamente
counterUpDownTip = UpDown: cuando est\u00e1 a 1, la cuenta sube; cuando est\u00e1 a 0, la cuenta baja
registerWidthLabel = (%sb)
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = Biestable JK
#
# memory/Mem.java
#
ByteLabel = octeto
GigabyteLabel = Gbyte
KilobyteLabel = kByte
MegabyteLabel = MByte
ramAddrLabel = A
ramAddrWidthAttr = N\u00famero de bits de direcci\u00f3n
ramDataWidthAttr = N\u00famero de bits de datos
ramSelAttr = Seleccione
stdTriggerHigh = Nivel alto
stdTriggerLow = Nivel bajo
#
# memory/MemMenu.java
#
ramClearMenuItem = Borrar contenidos
ramConfirmClearMsg = \u00bfEst\u00e1s seguro de que quieres borrar la memoria?
ramConfirmClearTitle = Confirmar borrado
ramEditMenuItem = Editar contenidos...
ramLoadDialogTitle = Cargar imagen de RAM
ramLoadErrorTitle = Error al cargar
ramLoadMenuItem = Cargar imagen...
ramSaveDialogTitle = Guardar imagen de RAM
ramSaveErrorTitle = Error al guardar
ramSaveMenuItem = Guardar imagen...
#
# memory/Memory.java
#
counterComponent = Contador
dFlipFlopComponent = Biestable D
memoryLibrary = Memoria
ramComponent = RAM
randomComponent = Generador aleatorio
registerComponent = Registro
#
# memory/Ram.java
#
ramBusTip = Data: valor le\u00eddo o escrito en la direcci\u00f3n
ramClkTip = Reloj: los cambios en los valores de memoria se producen en los flancos de subida
ramContentsAttr = Contenidos iniciales
ramDataLabel = D
ramInTip = Entrada: valor a ser guardado en la direcci\u00f3n indicada
ramOELabel = ld
ramOETip = Load: si toma el valor 1, mostrar lectura a la salida
ramWELabel = str
ramWETip = Store: si toma el valor 1, escribir dato de entrada en la memoria
#
# memory/RamAttributes.java
#
ramBidirDataBus = Un bus de datos bidireccional
ramByteEnables = Control de lectura y escritura
ramDataAttr = Implementaci\u00f3n del bus de datos
ramNoByteEnables = Lectura/escritura de palabras completas
ramSeparateDataBus = Buses de datos separados para lectura y escritura
ramWithByteEnables = Usar byte enable (m\u00e1scaras)
#
# memory/Random.java
#
randomClockTip = Reloj: el valor se actualiza cada flanco de reloj
randomLabel = aleatorio
randomNextTip = Enable: permite pasar al siguiente valor cuando se produce un flanco de reloj
randomQTip = Salida: n\u00famero actual en la secuencia
randomResetTip = Clear: cuando se pone a 1, la salida pasa a ser la semilla original as\u00edncronamente
randomSeedAttr = Semilla
randomWidthLabel = Ancho: %d
#
# memory/Register.java
#
registerClkTip = Reloj: actualiza el valor del registro en el flanco de reloj
registerClrTip = Clear: cuando se pone a 1, el valor del registro se hace 0 as\u00edncronamente
registerDTip = Data: valor a guardar cuando se produzca flanco de reloj
registerEnableTip = Enable: cuando est\u00e1 a 0, se ignoran los flancos de reloj
registerLabel = reg
registerQTip = Salida: valor actual del registro
registerShowInTab = Mostrar en pesta\u00f1a de registros
#
# memory/Rom.java
#
memAddrTip = Direcci\u00f3n: localizaci\u00f3n de la memoria a la que se quiere acceder
memDataTip = Dato: valor le\u00eddo en la direcci\u00f3n
romComponent = ROM
romContentsAttr = Contenidos
romContentsValue = (clic para editar)
#
# memory/RomContentsListener.java
#
romChangeAction = Editar contenidos de la ROM
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Clear: cuando se pone a 1, pone todas las etapas a 0 as\u00edncronamente
shiftRegClockTip = Reloj: el estado se actualiza en el flanco de reloj
shiftRegInTip = Entrada: valor que aparecer\u00e1 en la primera etapa de desplazamiento
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = N\u00famero de etapas
shiftRegLoadTip = Load: cuando se pone a 1 y "shift" es 0, se actualizan todas las etapas con los datos a la entrada
shiftRegOutTip = Salida: valor que se encuentra en la \u00faltima etapa
shiftRegParallelAttr = Carga en paralelo
shiftRegShiftTip = Shift: cuando est\u00e1 a 0, el desplazamiento est\u00e1 desactivado
#
# memory/ShiftRegisterLogger.java
#
shiftRegisterComponent = Registro de desplazamiento
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = Biestable SR
#
# memory/TFlipFlop.java
#
tFlipFlopComponent = Biestable T
#
# plexers/BitSelector.java
#
bitSelectorDataTip = Dato
bitSelectorGroupAttr = Bits de salida
bitSelectorOutputTip = Salida: valor del grupo de bits seleccioando en el dato
bitSelectorSelectTip = Select: identifica c\u00faal de los grupos del dato est\u00e1 seleccionado
#
# plexers/Decoder.java
#
decoderComponent = Decodificador
decoderEnableTip = Enable: si toma el valor 1, la salida seleccionada se pone a 1
decoderOutTip = Salida %s
decoderSelectTip = Select: selecciona cu\u00e1l de las salidas se pone a 1
#
# plexers/Demultiplexer.java
#
demultiplexerComponent = Demultiplexor
demultiplexerEnableTip = Enable: si toma el valor 1, la entrada aparece en la salida seleccionada
demultiplexerSelectTip = Select: en cu\u00e1l de las salidas aparece la entrada
#
# plexers/Multiplexer.java
#
multiplexerComponent = Multiplexor
multiplexerEnableTip = Enable: si toma el valor 1, la entrada seleccionada aparece a la salida
multiplexerSelectTip = Select: selecci\u00f3n del valor de entrada que aparece a la salida
#
# plexers/Plexers.java
#
bitSelectorComponent = Selector de bits
plexerDisabledAttr = Salida desactivada
plexerDisabledFloating = Flotante
plexerDisabledZero = Cero
plexerEnableAttr = \u00bfIncluir Enable?
plexerLibrary = Plexores
plexerSelectBitsAttr = Bits de selecci\u00f3n
plexerSelectBottomLeftOption = Abajo/izquierda
plexerSelectLocAttr = Posici\u00f3n de selecci\u00f3n
plexerSelectTopRightOption = Arriba/derecha
plexerThreeStateAttr = \u00bfTres estados?
#
# plexers/PriorityEncoder.java
#
priorityEncoderComponent = Codificador de prioridad
priorityEncoderEnableOutTip = Enable Output: toma el valor 1 si Enable Input
priorityEncoderGroupSignalTip = Group Select: toma el valor 1 si Enable Input
priorityEncoderInTip = Entrada %s
priorityEncoderOutTip = Salida: direcci\u00f3n de la entrada que est\u00e9 a 1 con el \u00edndice m\u00e1s alto
#
# StdAttr.java
#
ioLabelColorAttr = Color de etiqueta
stdClassicAppearance = 
stdDataWidthAttr = Bits de datos
stdEvolutionAppearance = 
stdFacingAttr = Orientaci\u00f3n
stdLabelAttr = Etiqueta
stdLabelCenter = 
stdLabelFontAttr = Fuente de etiqueta
stdLabelLocAttr = 
stdLabelVisibility = Etiqueta visible
stdLogisimEvolutionAppearance = 
stdTriggerAttr = Flanco
#
# tcl/Tcl.java
#
tclGeneric = TCL gen\u00e9rico
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = Archivo TCL
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = Consola TCL REDS
#
# tcl/TclGeneric.java
#
tclInterfaceDefinition = Entidad VHDL de la interfaz TCL
tclInterfaceDefinitionValue = (clic para editar)
#
# ttl/AbstractTtlGate.java
#
demultiplexerOutTip = Salida %s
GNDPin = Pin de tierra %s
multiplexerInTip = Entrada %s
VCCPin = VCC pin %s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = Blanking
DisplayDecoderComponent = Decodificador de pantalla
DisplayDecoderInTip = Entrada
DisplayDecoderOutTip = Salida
ioMultiBit = varios bits
LampTestInTip = Entrada de prueba de la l\u00e1mpara
LT = LT
memEnableLabel = en
priorityEncoderEnableInTip = Enable Input: el valor 0 deshabilita el componente
RBI = BANCO DE RESERVA DE LA INDIA
RippleBlankingInputInTip = Entrada de supresi\u00f3n de ondulaciones
#
# ttl/TTL.java
#
ShowInternalStructure = Mostrar la estructura interna
TTL7400 = 7400: puerta NAND de 2 entradas cu\u00e1druple
TTL7402 = 7402: Quad 2 entradas NOR gate
TTL7404 = 7404: inversor hexadecimal
TTL7408 = 7408: Quad 2 entradas Y puerta
TTL7410 = 7410: triple puerta NAND de 3 entradas
TTL7411 = 7411: triple 3 entradas Y puerta
TTL74125 = 74125: memoria intermedia de bus cu\u00e1druple, salidas de tres estados, habilitaci\u00f3n negativa
TTL7413 = 7413: doble puerta NAND de 4 entradas (schmitt-trigger)
TTL7414 = 7414: inversor hexagonal (schmitt-trigger)
TTL74165 = 74165: Registro de desplazamiento paralelo a serie de 8 bits
TTL74175 = 74175: Quad D-flipflop, reset as\u00edncrono
TTL7418 = 7418: doble puerta NAND de 4 entradas (schmitt-trigger)
TTL7419 = 7419: inversor hexagonal (schmitt-trigger)
TTL7420 = 7420: doble puerta NAND de 4 entradas
TTL7421 = 7421: doble 4 entradas Y puerta
TTL7424 = 7424: puerta NAND de 2 entradas cu\u00e1druple (schmitt-trigger)
TTL74266 = 74266: puerta XNOR de 2 entradas cu\u00e1druple
TTL7427 = 7427: triple puerta NOR de 3 entradas
TTL74273 = 74273: octal D-Flipflop con clear
TTL74283 = 74283: sumador completo binario de 4 bits
TTL7430 = 7430: puerta NAND de 8 entradas sencilla
TTL7432 = 7432: cuadrante 2 entradas OR puerta
TTL7436 = 7436: Quad 2 entradas NOR gate
TTL74377 = 74377: D-Flipflop octal con habilitaci\u00f3n
TTL7442 = 7442: Decodificador BCD a decimal
TTL7443 = 7443: Exceso de 3 a decodificador decimal
TTL7444 = 7444: Decodificador de gris a decimal
TTL7447 = 7447: Decodificador de BCD a 7 segmentos
TTL7451 = 7451: puerta doble AND-OR-INVERT
TTL7454 = 7454: Cuatro puertas anchas AND-OR-INVERT
TTL7458 = 7458: puerta doble AND-OR
TTL7464 = 7464: 4-2-3-2 AND-OR-INVERTIR puerta
TTL7474 = 7474: doble D-Flipflops con preset y clear
TTL7485 = 7485: Comparador de magnitud de 4 bits
TTL7486 = 7486: puerta XOR de 2 entradas cu\u00e1druples
VccGndPorts = Habilitar los puertos Vcc y Gnd
#
# wiring/BitExtender.java
#
extenderComponent = Extensor de bits
extenderInAttr = Bits de entrada
extenderInputLabel = entrada
extenderInputType = Entrada
extenderMainLabel = extensor
extenderOneLabel = 1
extenderOneType = Unos
extenderOutAttr = Bits de salida
extenderSignLabel = signo
extenderSignType = Signo
extenderTypeAttr = Tipo de extensi\u00f3n
extenderZeroLabel = 0
extenderZeroType = Ceros
#
# wiring/Clock.java
#
clockComponent = Reloj
clockHighAttr = Duraci\u00f3n de nivel alto
clockLowAttr = Duraci\u00f3n de nivel bajo
#
# wiring/Constant.java
#
constantComponent = Constante
constantValueAttr = Valor
#
# wiring/DoNotConnect.java
#
noConnectionComponent = 
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 tick
clockDurationValue = %s ticks
durationLargeMessage = El valor debe ser %s o menos.
durationSmallMessage = El valor debe ser al menos %s.
freqInvalidMessage = El valor no es un entero v\u00e1lido
PORDurationOneValue = 1 segundo
PORDurationValue = %s segundos
#
# wiring/Ground.java
#
groundComponent = Tierra
#
# wiring/Pin.java
#
PinCancel = Cancelar
pinComponent = Pin
PinEnterDecimal = Introducir decimal
pinFrozenQuestion = El pin est\u00e1 asociado al estado del circuito superior. \u00bfCrear un nuevo estado del circuito?
pinFrozenTitle = Pin asociado al circuito superior.
pinInputName = Entrada
pinInputToolTip = A\u00f1adir pin de entrada
PinOkay = OK
pinOutputAttr = \u00bfSalida?
pinOutputName = Salida
pinOutputToolTip = A\u00f1adir pin de salida
pinPullAttr = Comportamiento de pull
pinPullDownOption = Adoptar nivel bajo
pinPullNoneOption = Sin cambios
pinPullUpOption = Adoptar nivel alto
pinThreeStateAttr = \u00bfTres estados?
#
# wiring/PowerOnReset.java
#
porHighAttr = Tiempo de POR
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Sonda
#
# wiring/ProbeAttributes.java
#
probeNewPin = Formas de flecha
stdAppearanceAttr = Apariencia
#
# wiring/PullResistor.java
#
pullComponent = Resistencia "Pull"
pullErrorType = Error
pullOneType = Cero
pullTypeAttr = Direcci\u00f3n de "pull"
pullZeroType = Uno
#
# wiring/Transistor.java
#
transistorComponent = Transistor
transistorNDrain = drenaje: una fuente baja har\u00e1 que el drenaje sea bajo (s\u00f3lo cuando la puerta est\u00e1 alta)
transistorNGate = puerta: cuando est\u00e1 alta, permite que la corriente fluya a trav\u00e9s del transistor
transistorNSource = fuente: una fuente baja har\u00e1 que el desag\u00fce sea bajo (s\u00f3lo cuando la puerta est\u00e1 alta)
transistorPDrain = drenaje: una fuente alta arrastrar\u00e1 el drenaje hacia arriba (s\u00f3lo cuando la puerta est\u00e1 baja)
transistorPGate = puerta: cuando est\u00e1 baja, permite que la corriente fluya a trav\u00e9s del transistor
transistorPSource = fuente: una fuente alta arrastrar\u00e1 el desag\u00fce hacia arriba (s\u00f3lo cuando la puerta est\u00e1 baja)
transistorTypeAttr = Tipo
transistorTypeN = Tipo N
transistorTypeP = Tipo P
#
# wiring/TransmissionGate.java
#
transmissionGateComponent = Puerta de transmisi\u00f3n
transmissionGateDrain = desag\u00fce: controlado por la fuente, dependiendo de p-gate y n-gate
transmissionGateNGate = Puerta n: cuando est\u00e1 baja, permite el paso de la fuente baja para drenar.
transmissionGatePGate = p-gate: cuando est\u00e1 alto, permite que la fuente alta pase a trav\u00e9s de la puerta para drenar
transmissionGateSource = fuente: controla el drenaje, dependiendo de p-gate y n-gate
#
# wiring/Tunnel.java
#
tunnelComponent = T\u00fanel
#
# wiring/Wiring.java
#
powerComponent = Alimentaci\u00f3n
wiringGateAttr = Posici\u00f3n de la puerta
wiringGateBottomRightOption = Abajo/derecha
wiringGateTopLeftOption = Arriba/izquierda
wiringLibrary = Cableado


