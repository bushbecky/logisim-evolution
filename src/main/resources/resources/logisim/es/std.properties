#
# Namechack
#
MatchedLabelNameError = El nombre y la etiqueta de un componente no deben coincidir (no se tienen en cuenta las may\u00fasculas).\nPor favor, especifica una etiqueta distinta al nombre del componente.
KeywordNameError = La etiqueta es una palabra reservada y no se puede usar. Por favor, especifica una etiqueta distinta.
#
# std/Builtin.java
#
builtinLibrary = Incorporada
# instance/StdAttr.java
stdFacingAttr = Orientaci\u00f3n
stdDataWidthAttr = Bits de datos
stdTriggerAttr = Flanco
stdTriggerRising = Flanco de subida
stdTriggerFalling = Flanco de bajada
stdTriggerHigh = Nivel alto
stdTriggerLow = Nivel bajo
stdLabelAttr = Etiqueta
stdLabelFontAttr = Fuente de etiqueta
stdLabelLocAttr = 
stdLabelCenter = 
stdLabelColorAttr = 
stdLabelVisibility = Etiqueta visible
# instance/InstanceTextField.java
changeLabelAction = Cambiar etiqueta
stdAppearanceAttr = 
stdClassicAppearance = 
stdEvolutionAppearance = 
stdLogisimEvolutionAppearance = 
stdCustomAppearance = 
#
# std/base/Base.java
#
baseLibrary = B\u00e1sico
# std/base/BitExtender.java
extenderComponent = Extensor de bits
extenderInAttr = Bits de entrada
extenderOutAttr = Bits de salida
extenderTypeAttr = Tipo de extensi\u00f3n
extenderOneType = Unos
extenderZeroType = Ceros
extenderSignType = Signo
extenderInputType = Entrada
extenderMainLabel = extensor
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = signo
extenderInputLabel = entrada
# std/base/Clock
clockComponent = Reloj
clockHighAttr = Duraci\u00f3n de nivel alto
clockLowAttr = Duraci\u00f3n de nivel bajo
clockDurationValue = %s ticks
clockDurationOneValue = 1 tick
PORDurationValue = %s segundos
PORDurationOneValue = 1 segundo
porHighAttr = Tiempo de POR
durationSmallMessage = El valor debe ser al menos %s.
durationLargeMessage = El valor debe ser %s o menos.
freqInvalidMessage = El valor no es un entero v\u00e1lido
PowerOnResetComponent = POR
# std/base/Pin
pinComponent = Pin
pinInputName = Entrada
pinOutputName = Salida
pinThreeStateAttr = \u00bfTres estados?
pinOutputAttr = \u00bfSalida?
pinPullAttr = Comportamiento de pull
pinPullNoneOption = Sin cambios
pinPullUpOption = Adoptar nivel alto
pinPullDownOption = Adoptar nivel bajo
pinLabelLocAttr = Posici\u00f3n de etiqueta
pinInputToolTip = A\u00f1adir pin de entrada
pinOutputToolTip = A\u00f1adir pin de salida
pinFrozenTitle = Pin asociado al circuito superior.
pinFrozenQuestion = El pin est\u00e1 asociado al estado del circuito superior. \u00bfCrear un nuevo estado del circuito?
PinEnterDecimal = 
PinOkay = 
PinCancel = 
# std/base/Probe
probeComponent = Sonda
probeNewPin = 
# std/base/PullResistor
pullComponent = Resistencia "Pull"
pullTypeAttr = Direcci\u00f3n de "pull"
pullZeroType = Uno
pullOneType = Cero
pullErrorType = Error
# std/base/Text.java
textComponent = Etiqueta
textTextAttr = Texto
textFontAttr = Fuente
textHorzAlignAttr = Alineaci\u00f3n horizontal
textHorzAlignLeftOpt = Izquierda
textHorzAlignRightOpt = Derecha
textHorzAlignCenterOpt = Centro
textVertAlignAttr = Alineaci\u00f3n vertical
textVertAlignTopOpt = Arriba
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Abajo
textVertAlignCenterOpt = Centro
# std/base/Tunnel.java
tunnelComponent = T\u00fanel
#
# std/Wiring.java
#
wiringLibrary = Cableado
wiringGateAttr = Posici\u00f3n de la puerta
wiringGateBottomRightOption = Abajo/derecha
wiringGateTopLeftOption = Arriba/izquierda
# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Tipo
transistorTypeP = Tipo P
transistorTypeN = Tipo N
transistorNGate = 
transistorNSource = 
transistorNDrain = 
transistorPGate = 
transistorPSource = 
transistorPDrain = 
# std/wiring/TransmissionGate.java
transmissionGateComponent = Puerta de transmisi\u00f3n
transmissionGatePGate = 
transmissionGateNGate = 
transmissionGateSource = 
transmissionGateDrain = 
# std/wiring/Power.java
powerComponent = Alimentaci\u00f3n
# std/wiring/Ground.java
groundComponent = Tierra
#
# std/wiring/DoNotConnect.java
#
noConnectionComponent = 
#
# std/Gates.java
#
gatesLibrary = Puertas
gateSizeAttr = Tama\u00f1o de puerta
gateSizeNarrowOpt = Estrecho
gateSizeNormalOpt = Medio
gateSizeWideOpt = Ancho
gateNegateAttr = Negar %s
gateInputsAttr = N\u00famero de entradas
gateOutput01 = 0/1
gateOutput0Z = 0/flotante
gateOutputZ1 = flotante/1
gateOutputAttr = Valor de salida
xorBehaviorAttr = Comportamiento con m\u00faltiples entradas
xorBehaviorOne = Con una entrada activada
xorBehaviorOdd = Con un n\u00famero impar de entradas activadas
# std/Constant.java
constantComponent = Constante
constantValueAttr = Valor
# std/NotGate.java
notGateComponent = Puerta NOT
# std/Buffer.java
bufferComponent = B\u00fafer
# std/AndGate.java
andGateComponent = Puerta AND
# std/NandGate.java
nandGateComponent = Puerta NAND
# std/NorGate.java
norGateComponent = Puerta NOR
# std/OrGate.java
orGateComponent = Puerta OR
# std/XorGate.java
xorGateComponent = Puerta XOR
# std/XnorGate.java
xnorGateComponent = Puerta XNOR
# std/OddParityGate.java
oddParityComponent = Detector de imparidad
# std/EvenParityGate.java
evenParityComponent = Detector de paridad
# std/ControlledBuffer.java
controlledBufferComponent = B\u00fafer controlado
controlledInverterComponent = Inversor controlado
controlledControlOption = Localizaci\u00f3n de control
controlledLeftHanded = Izquierda
controlledRightHanded = Derecha
# std/PLA*.java
plaSaveDialogTitle = 
plaLoadDialogTitle = 
plaSaveErrorTitle = 
plaLoadErrorTitle = 
plaFileOpenError = 
plaFileCreateError = 
plaEditMenuItem = 
plaEditorTitle = 
plaClickToEdit = 
plaProgram = 
#
# std/Memory.java
#
memoryLibrary = Memoria
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopClockTip = Reloj: el estado se actualiza en el flanco de reloj
flipFlopQTip = Estado actual del biestable
flipFlopNotQTip = Inverso del estado actual del biestable
flipFlopResetTip = Clear: cuando se pone a 1, el estado se hace 0 as\u00edncronamente
flipFlopPresetTip = Preset: cuando se pone a 1, el estado se hace 1 as\u00edncronamente
flipFlopEnableTip = Enable: cuando est\u00e1 a 0, se ignoran los flancos de reloj
# std/Counter.java
counterComponent = Contador
counterMaxAttr = Valor m\u00e1ximo
counterGoalAttr = Acci\u00f3n cuando se desborda
counterGoalWrap = Continuar desde el inicio
counterGoalStay = Mantener valor final
counterGoalContinue = Continuar cuenta con m\u00e1s bits
counterGoalLoad = Cargar valor siguiente
counterQTip = Salida: valor actual del contador
counterClockTip = Reloj: el valor se actualiza cada flanco de reloj
counterDataTip = Data: valor a cargar en el contador
counterLoadTip = Load: cuando se pone a 1, introduce el dato externo "Data"
counterEnableTip = Enable: cuando est\u00e1 a 1, la cuenta puede subir o bajar
counterUpDownTip = UpDown: cuando est\u00e1 a 1, la cuenta sube; cuando est\u00e1 a 0, la cuenta baja
counterResetTip = Clear: cuando se pone a 1, la cuenta se hace 0 as\u00edncronamente
counterCarryTip = Carry: toma el valor 1 cuando se ha alcanzado el m\u00e1ximo (o m\u00ednimo, si la cuenta es decreciente)
counterEnableLabel = ct
counterLabel = ctr
# std/DFlipFlop.java
dFlipFlopComponent = Biestable D
# std/TFlipFlop.java
tFlipFlopComponent = Biestable T
# std/JKFlipFlop.java
jkFlipFlopComponent = Biestable JK
# std/SRFlipFlop.java
srFlipFlopComponent = Biestable SR
# std/Random.java
randomSeedAttr = Semilla
randomComponent = Generador aleatorio
randomQTip = Salida: n\u00famero actual en la secuencia
randomClockTip = Reloj: el valor se actualiza cada flanco de reloj
randomNextTip = Enable: permite pasar al siguiente valor cuando se produce un flanco de reloj
randomResetTip = Clear: cuando se pone a 1, la salida pasa a ser la semilla original as\u00edncronamente
# std/Register.java
registerComponent = Registro
registerQTip = Salida: valor actual del registro
registerDTip = Data: valor a guardar cuando se produzca flanco de reloj
registerClkTip = Reloj: actualiza el valor del registro en el flanco de reloj
registerClrTip = Clear: cuando se pone a 1, el valor del registro se hace 0 as\u00edncronamente
registerEnableTip = Enable: cuando est\u00e1 a 0, se ignoran los flancos de reloj
registerLabel = reg
registerWidthLabel = (%sb)
registerShowInTab = Mostrar en pesta\u00f1a de registros
# std/RamFactory.java
ramComponent = RAM
# std/RomFactory.java
romComponent = ROM
ramContentsAttr = Contenidos iniciales
romContentsAttr = Contenidos
romContentsValue = (clic para editar)
romChangeAction = Editar contenidos de la ROM
# std/Ram.java
ramAddrWidthAttr = N\u00famero de bits de direcci\u00f3n
ramDataWidthAttr = N\u00famero de bits de datos
ramDataAddrAttr = Direccionamiento
ramDataLabel = D
ramAddrLabel = A
ramWELabel = str
ramCSLabel = sel
ramOELabel = ld
ramClrLabel = clr
ramByteEnableTip0 = Byte enable para los bits 7..0
ramByteEnableTip1 = Byte enable para los bits 15..8
ramByteEnableTip2 = Byte enable para los bits 23..16
ramByteEnableTip3 = Byte enable para los bits 31..24
ramWithByteEnables = Usar byte enable (m\u00e1scaras)
ramNoByteEnables = Lectura/escritura de palabras completas
ramByteEnables = Control de lectura y escritura
ramGigabyteLabel = RAM de %sGB
ramMegabyteLabel = RAM de %sMB
ramKilobyteLabel = RAM de %sKB
ramByteLabel = RAM de %sB
romGigabyteLabel = ROM de %sGB
romMegabyteLabel = ROM de %sMB
romKilobyteLabel = ROM de %sKB
romByteLabel = ROM de %sB
memDataTip = Dato: valor le\u00eddo en la direcci\u00f3n
memAddrTip = Direcci\u00f3n: localizaci\u00f3n de la memoria a la que se quiere acceder
memCSTip = Chip select: el valor 0 deshabilita el componente
ramClkTip = Reloj: los cambios en los valores de memoria se producen en los flancos de subida
ramOETip = Load: si toma el valor 1, mostrar lectura a la salida
ramWETip = Store: si toma el valor 1, escribir dato de entrada en la memoria
ramClrTip = Clear: cuando se pone a 1, rellena de ceros la memoria as\u00edncronamente
ramBusTip = Data: valor le\u00eddo o escrito en la direcci\u00f3n
ramInTip = Entrada: valor a ser guardado en la direcci\u00f3n indicada
ramBusAttr = Interfaz de datos
ramBusSynchCombined = Un puerto de carga/almacenamiento s\u00edncrono
ramBusAsynchCombined = Un puerto de carga/almacenamiento as\u00edncrono
ramBusSeparate = Puertos de carga y almacenamiento separados
ramBidirDataBus = Un bus de datos bidireccional
ramSeparateDataBus = Buses de datos separados para lectura y escritura
ramDataAttr = Implementaci\u00f3n del bus de datos
ramAttrRdTick = Implementaci\u00f3n de lectura
ramAttrRdTickDefault = Leer en el flanco de reloj seleccionado
ramAttrRdTickEarly = Esperar un ciclo de reloj para leer
ramEditMenuItem = Editar contenidos...
ramClearMenuItem = Borrar contenidos
ramLoadMenuItem = Cargar imagen...
ramSaveMenuItem = Guardar imagen...
ramConfirmClearTitle = Confirmar borrado
ramConfirmClearMsg = \u00bfEst\u00e1s seguro de que quieres borrar la memoria?
ramLoadDialogTitle = Cargar imagen de RAM
ramLoadErrorTitle = Error al cargar
ramSaveDialogTitle = Guardar imagen de RAM
ramSaveErrorTitle = Error al guardar
# std/memory/ShiftRegister.java
shiftRegisterComponent = Registro de desplazamiento
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = N\u00famero de etapas
shiftRegParallelAttr = Carga en paralelo
shiftRegShiftTip = Shift: cuando est\u00e1 a 0, el desplazamiento est\u00e1 desactivado
shiftRegClockTip = Reloj: el estado se actualiza en el flanco de reloj
shiftRegClearTip = Clear: cuando se pone a 1, pone todas las etapas a 0 as\u00edncronamente
shiftRegInTip = Entrada: valor que aparecer\u00e1 en la primera etapa de desplazamiento
shiftRegOutTip = Salida: valor que se encuentra en la \u00faltima etapa
shiftRegLoadTip = Load: cuando se pone a 1 y "shift" es 0, se actualizan todas las etapas con los datos a la entrada
#
# std/Plexers.java
#
plexerLibrary = Plexores
plexerSelectBitsAttr = Bits de selecci\u00f3n
plexerThreeStateAttr = \u00bfTres estados?
plexerDisabledAttr = Salida desactivada
plexerDisabledFloating = Flotante
plexerDisabledZero = Cero
plexerEnableAttr = \u00bfIncluir Enable?
plexerSelectLocAttr = Posici\u00f3n de selecci\u00f3n
plexerSelectTopRightOption = Arriba/derecha
plexerSelectBottomLeftOption = Abajo/izquierda
# std/Multiplexer.java
multiplexerComponent = Multiplexor
multiplexerSelectTip = Select: selecci\u00f3n del valor de entrada que aparece a la salida
multiplexerEnableTip = Enable: si toma el valor 1, la entrada seleccionada aparece a la salida
multiplexerInTip = Entrada %s
multiplexerOutTip = Salida
# std/Demultiplexer.java
demultiplexerComponent = Demultiplexor
demultiplexerSelectTip = Select: en cu\u00e1l de las salidas aparece la entrada
demultiplexerEnableTip = Enable: si toma el valor 1, la entrada aparece en la salida seleccionada
demultiplexerInTip = Entrada
demultiplexerOutTip = Salida %s
# std/Decoder.java
decoderComponent = Decodificador
decoderSelectTip = Select: selecciona cu\u00e1l de las salidas se pone a 1
decoderEnableTip = Enable: si toma el valor 1, la salida seleccionada se pone a 1
decoderOutTip = Salida %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = Codificador de prioridad
priorityEncoderInTip = Entrada %s
priorityEncoderOutTip = Salida: direcci\u00f3n de la entrada que est\u00e9 a 1 con el \u00edndice m\u00e1s alto
priorityEncoderEnableInTip = Enable Input: el valor 0 deshabilita el componente
priorityEncoderEnableOutTip = Enable Output: toma el valor 1 si Enable Input
priorityEncoderGroupSignalTip = Group Select: toma el valor 1 si Enable Input
# std/BitSelector.java
bitSelectorComponent = Selector de bits
bitSelectorGroupAttr = Bits de salida
bitSelectorOutputTip = Salida: valor del grupo de bits seleccioando en el dato
bitSelectorDataTip = Dato
bitSelectorSelectTip = Select: identifica c\u00faal de los grupos del dato est\u00e1 seleccionado
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritm\u00e9tica
# arith/Adder.java
adderComponent = Sumador
adderInputTip = Entrada: uno de los n\u00fameros a sumar
adderOutputTip = Salida: la suma de las entradas (junto con el acarreo de entrada)
adderCarryInTip = Carry In: acarreo de entrada, que se a\u00f1ade al resultado de la suma
adderCarryOutTip = Carry Out: acarreo de salida, toma el valor 1 si se produce desbordamiento
# arith/Subtractor.java
subtractorComponent = Restador
subtractorMinuendTip = Minuend: minuendo (el n\u00famero al que se resta una cantidad)
subtractorSubtrahendTip = Subtrahend: sustraendo (la cantidad que se resta al minuendo)
subtractorOutputTip = Salida: diferencia, minuendo - sustraendo
subtractorBorrowInTip = Borrow In: si es 1, restar 1 unidad a la salida
subtractorBorrowOutTip = Borrow Out: devuelve 1 si el resultado de la resta es negativo
# arith/Multiplier.java
multiplierComponent = Multiplicador
multiplierInputTip = Entrada: uno de los n\u00fameros a multiplicar
multiplierOutputTip = Salida: el producto de las entradas, incluyendo el acarreo de entrada
multiplierCarryInTip = Carry In: acarreo de entrada, n\u00famero que se sumar\u00e1 al resultado de la multiplicaci\u00f3n
multiplierCarryOutTip = Carry Out: los bits m\u00e1s significativos del producto
# arith/Divider.java
dividerComponent = Divisor
dividerUpperInput = upper
dividerRemainderOutput = rem
dividerDividendLowerTip = Dividend Lower: la mitad menos significativa del dividendo
dividerDividendUpperTip = Dividend Upper: la mitad m\u00e1s significativa del dividendo
dividerDivisorTip = Divisor: el n\u00famero entre el cual se divide
dividerOutputTip = Salida: resultado de dividir el dividendo entre el divisor
dividerRemainderTip = Remainder: el resto de la divisi\u00f3n (igual a dividendo - salida * divisor)
# arith/Negator.java
negatorComponent = Negador
negatorInputTip = Entrada: el n\u00famero a ser negado
negatorOutputTip = Salida: la negaci\u00f3n en complemento a 2 de la entrada
# arith/Comparator.java
comparatorComponent = Comparador
comparatorType = Tipo de n\u00famero
unsignedOption = Sin signo
twosComplementOption = Complemento a 2
comparatorInputATip = A: el primer t\u00e9rmino de la comparaci\u00f3n (n\u00famero de la izquierda)
comparatorInputBTip = B: el segundo t\u00e9rmino de la comparaci\u00f3n (n\u00famero de la derecha)
comparatorLessTip = Less: vale 1 si A es menor que B
comparatorEqualTip = Equal: vale 1 si A es igual a B
comparatorGreaterTip = Greater: vale 1 si A es mayor que B
# arith/Shifter.java
shifterComponent = Desplazador
shifterShiftAttr = Tipo de desplazamiento
shiftLogicalLeft = L\u00f3gico a la izquierda
shiftLogicalRight = L\u00f3gico a la derecha
shiftArithmeticRight = Aritm\u00e9tico a la derecha
shiftRollLeft = Rotar hacia la izquierda
shiftRollRight = Rotar hacia la derecha
shifterDistanceTip = Distancia: cu\u00e1ntos bits se desplaza la entrada
shifterInputTip = Entrada: el n\u00famero binario cuyos bits van a ser desplazados
shifterOutputTip = Salida: resultado tras aplicar el desplazamiento al n\u00famero de entrada
# arith/BitAdder.java
bitAdderComponent = Contador de unos
bitAdderInputTip = Entrada: n\u00famero binario
bitAdderOutputManyTip = Salida: n\u00famero en binario que expresa cu\u00e1ntos bits de la entrada son 1
# arith/BitFinder.java
bitFinderComponent = Buscador de bit
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderLowLabel = low
bitFinderHighOption = %s m\u00e1s significativo
bitFinderLowOption = %s menos significativo
bitFinderTypeAttr = Tipo
bitFinderIndexHighTip = Index: \u00edndice del bit %s m\u00e1s significativo de la entrada
bitFinderIndexLowTip = Index: \u00edndice del bit %s menos significativo de la entrada
bitFinderPresentTip = Present: devuelve 1 si la entrada contiene un %s
bitFinderInputTip = Entrada: n\u00famero binario en el que se quiere hacer la b\u00fasqueda
#
# io
#
# io/Io.java
ioLibrary = Entrada/Salida
ioLabelCenter = Centro
ioBitWidthAttr = N\u00famero de bits
ioColorAttr = Color
ioLabelLocAttr = Posici\u00f3n de etiqueta
ioLabelColorAttr = Color de etiqueta
ioActiveAttr = \u00bfActivo a nivel alto?
# io/Button.java
buttonComponent = Bot\u00f3n
# io/Joystick.java
joystickComponent = Joystick
# io/Keyboard.java
keyboardComponent = Teclado
keybDesc = teclado (cap. de b\u00fafer %s)
keybBufferLengthAttr = Tama\u00f1o de b\u00fafer
keybClearTip = Clear: cuando se pone a 1 vac\u00eda el b\u00fafer
keybClockTip = Reloj: el flanco de reloj lee el primer car\u00e1cter del b\u00fafer
keybEnableTip = Read enable: si toma el valor 0 desactiva la funci\u00f3n del reloj
keybAvailTip = Available: devuelve 1 cuando el b\u00fafer contiene caracteres
keybOutputTip = Data: valor ASCII del primer car\u00e1cter del b\u00fafer
# io/Led.java
ledComponent = LED
RGBledComponent = LED RGB
# io/DipSwitch.java
dipswitchComponent = Interruptor DIP
nrOfSwitch = N\u00famero de interruptores
# io/SevenSegment.java
sevenSegmentComponent = Display 7 segmentos
# io/HexDigit.java
hexDigitComponent = Display de d\u00edgito hexadecimal
hexDigitDataTip = 
hexDigitDPTip = 
# io/DotMatrix.java
dotMatrixComponent = Matriz de LED
ioMatrixInput = Formato de entrada
ioMatrixRows = Filas de la matriz
ioMatrixCols = Columnas de la matriz
ioOnColor = Color de modo activado
ioOffColor = Color de modo desactivado
ioBackgroundColor = Fondo
ioMatrixPersistenceAttr = Persistencia de luz
ioMatrixShape = Forma de puntos
ioInputColumn = Columnas
ioInputRow = Filas
ioInputSelect = Seleccionar filas/columnas
ioShapeCircle = Circular
ioShapeSquare = Cuadrado
# io/Video.java
rgbVideoComponent = 
rgbVideoCursor = 
rgbVideoReset = 
rgbVideoColor = 
rgbVideoCLK = 
rgbVideoWE = 
rgbVideoX = 
rgbVideoY = 
rgbVideoData = 
rgbVideoRST = 
rgbVideoWidth = 
rgbVideoHeight = 
rgbVideoScale = 
# io/Tty.java
ttyComponent = TTY
ttyDesc = TTY (%s filas, %s columnas)
ttyDescShort = TTY
ttyRowsAttr = Filas
ttyColsAttr = Columnas
ttyClearTip = Clear: cuando se pone a 1 vac\u00eda la pantalla
ttyClockTip = Reloj: cuando se produce un flanco se a\u00f1ade el car\u00e1cter de la entrada
ttyEnableTip = Write enable: el valor 0 hace que se ignore el reloj
ttyInputTip = Data: valor ASCII del siguiente car\u00e1cter a escribir
# io/PortIO.java
pioComponent = Puerto de entrada/salida
pioNumber = N\u00famero de pines
pioShowBus = \u00bfTipo de conexi\u00f3n?
pioBuses = Uno o m\u00e1s buses
pioPins = Pin \u00fanico
# io/ReptarLocalBus.java
repLBComponent = Bus local REPTAR
#
# tcl
#
tclLibrary = TCL
tclConsoleReds = Consola TCL REDS
tclGeneric = TCL gen\u00e9rico
tclConsoleContentFile = Archivo TCL
tclInterfaceDefinition = Entidad VHDL de la interfaz TCL
tclInterfaceDefinitionValue = (clic para editar)
