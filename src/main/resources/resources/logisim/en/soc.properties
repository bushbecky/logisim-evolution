#
# bus/SocBus.java
#
SocBusComponent = SOC bus simulator
#
# bus/SocBusAttributes.java
#
SocBusTraceSize = Trace size:
SocBusTraceVisable = Traces visible:
#
# bus/SocBusMenu.java
#
insertTrans = Insert a bus transaction
SocBusMemMap = Show memory map
#
# data/SocBusInfo.java
#
SocBusNotConnected = Not connected to a bus
#
# data/SocBusStateInfo.java
#
SocBusNoTrace = No traces present
SocBusStateMaster = Initiator:
SocBusStateNoDataMax10chars = no data
SocBusStateSlave = Reponder:
SocBusStateTraceIndex = Transaction nr.:
SocInsertTransWindowTitle = Insert a transaction to bus:
SocMemMapWindowTitle = Memory Map for bus:
SocMemoryMapOk = Close
SocMemoryMapTitle = Memory Map (red indicates overlapping memory regions):
#
# data/SocBusTransaction.java
#
SocTransactionMultipleSlaveAnswers = Multiple slaves answered to a transaction. Please check the memory map of your slaves.
SocTransactionMultipleSlaveAnswersShort = Multiple slaves
SocTransactionNoBusConnected = The master component is not connected to any Soc Bus. Please connect the master to a bus component.
SocTransactionNoBusConnectedShort = No bus
SocTransactionNoneAtomicRW = A none atomic read/write action is requested. This is not allowed.
SocTransactionNoneAtomicRWShort = None atomic RW
SocTransactionNoRespons = No slave component answered to the request. Please check the memory address of the request and the memory map of your system.
SocTransactionNoResponsShort = No respons
SocTransactionNoSlavesAttached = The bus that is connected to the master has no slaves attached. Please attach some slaves to the bus.
SocTransactionNoSlavesAttachedShort = No slaves
SocTransactionSuccessfull = No error has occured, the transaction is successful.
SocTransactionSuccessfullShort = Success
SocTransactionUnknownError = Bizar, this error message should never occur and represents a bug in logisim.
SocTransactionUnknownErrorShort = BUG!
#
# data/SocMemMapModel.java
#
SocMemMapEmpty = Empty (no slaves)
SocMemMapEndAddress = End address:
SocMemMapSlaveName = Name of component:
SocMemMapStartAddress = Start address:
#
# data/SocSimulationManager.java
#
SocBusManagerSelectBus = Please select a bus to connect to
SocBusSelectAttr = Connected bus
SocBusSelectAttrClick = Click to select
SocManagerNoBusses = No busses available, please add a SOC-bus to your schematic
#
# data/SocUpSimulationState.java
#
SocUpSimHalt = Halted
SocUpSimHaltBreak = Breakpoint
SocUpSimHaltError = Error
SocUpSimRunning = Running
SocUpSimStateLabel = Simstate:
SocUpSimstateStart = Start
SocUpSimstateStop = Pause
SocUpUnknown = Unknown
#
# file/ElfHeader.java
#
ElfHeaderEIClassError = Not a 32 or 64 bit elf file
ElfHeaderEIDataError = Not a little or big endian encoded file
ElfHeaderIncorrectEISize = The size for the EI-section is incorrect
ElfHeaderIncorrectESize = The size for the E-section is incorrect
ElfHeaderIncorrectMagic = The file does not contain the correct elf-magic; probably not an elf-file
ElfHeaderNoErrors = Header is correct
ElfHeaderReadingFileError = Error reading the file
ElfHeaderUnknownArchitecture = Unknow architecture
#
# file/ElfProgramHeader.java
#
ProgHeaderNotFound = Program header not found.
ProgHeaderReadError = Error reading program header.
ProgHeaderSizeError = Size mismatch in program header.
ProgHeaderSuccess = Success
#
# file/ElfSectionHeader.java
#
ElfSectHeadNotFound = Section header not found.
ElfSectHeadReadError = Error reading section header.
ElfSectHeadSizeError = Size mismatch in section header.
ElfSectHeadSuccess = Success
#
# file/ProcessorReadElf.java
#
ProcReadElf64BitNotSupportedYet = Logisim does not yet support 64-bit elf files.
ProcReadElfArchError = Elf file is for a \"%s\" processor whilst it should be for a \"%s\" processor.
ProcReadElfEndianMismatch = Endian mismatch, elf file is \"%s\" whilst the processor requested \"%s\".
ProcReadElfErrorOpeningFile = Impossible to open elf-file
ProcReadElfLoadableSectionNotFound = Loadable section not found in elf file.
ProcReadElfLoadableSectionReadError = Error reading loadable section.
ProcReadElfLoadableSectionSizeError = Size mismatch in loadable section.
ProcReadElfLoadableSectionTooBig = The size of the loadable section is bigger as the size supported by logisim.
ProcReadElfMemoryError = An error occured writing a loadable section to memory.\nMake sure you have a SOC memory component available for the memory region:\n%s...%s
ProcReadElfNotExecutable = The elf-file is not an executable
ProcReadElfSuccess = Success
#
# gui/BusTransactionInsertionGui.java
#
SocTransInsAddress = Bus address: 0x
SocTransInsAtomicRequest = Atomic transaction
SocTransInsByteAccess = Byte transaction
SocTransInsHalfWordAccess = Half word transaction (2 bytes)
SocTransInsInputData = Data to write: 0x
SocTransInsInsertTransaction = Insert the transaction into the bus
SocTransInsManual = Manual inserted
SocTransInsReadData = Data returned:
SocTransInsReadRequest = Bus read request
SocTransInsTransResultTitle = Result of the inserted transaction:
SocTransInsWordAccess = Word transaction (4 bytes)
SocTransInsWriteRequest = Bus write request
#
# memory/SocMemory.java
#
SocMemBase = Base:
SocMemSizeStr = Size:
#
# memory/SocMemoryAttributes.java
#
SocMemSize = Byte address width:
SocMemStartAddress = Start address:
#
# rv32im/Rv32im_riscv.java
#
Rv32imClockInput = Clock input
Rv32imComponent = Risc V IM simulator
Rv32imIrqInput = IRQ input %s
Rv32imResetInput = Reset input
#
# rv32im/RV32im_state.java
#
Rv32imAsmInstruction = Assembly:
Rv32imBinInstruction = Instruction:
Rv32imEmptyTrace = No execution traces available
Rv32imExecutionTrace = Execution trace (last executed on top):
RV32imFetchExecutionError = Error in executing fetched instruction
RV32imFetchInvalidInstruction = Invalid instruction fetched
RV32imFetchInvInstrAsm = Invalid instruction!
RV32imFetchTransaction = -> Fetch transaction error.
Rv32imProgramCounter = pc:
Rv32imRegisterFile = Register file:
SocHiddenForFasterSimulation = Contents hidden for faster simulation
#
# rv32im/RV32imAttributes.java
#
rv32ExceptionVector = Exception vector
rv32imIrqWidth = Number of IRQ lines
rv32ResetVector = Reset vector
rv32StateVisable = State visible:
#
# rv32im/RV32imEnvironmentCallAndBreakpoints.java
#
Rv32imECABNotImplmented = Currently the environmental call and breakpoints are not implemented
#
# rv32im/Rv32imMemoryOrderingInstructions.java
#
Rv32imMOINotImplmented = Currently the memory ordering instructions are not implemented
#
# rv32im/RV32imMenu.java
#
ProcReadElfLoadedAndEntrySet = Successfully loaded the elf file into memory.\nThe entry point of the executable has been set to the processor.\n\nImportant:\n   As the elf file has no information on the exception vectors\n   you have to control them yourself!
Rv32imErrorReadingElfTitle = Error in reading elf file
Rv32imReadElf = Read elf file
Rv32imSelectElfFile = Select elf file to import
#
# Soc.java
#
socLibrary = System On Chip components
SocMemoryComponent = Memory simulator


