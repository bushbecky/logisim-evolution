#
# arith/Adder.java
#
adderCarryInTip = \u00dcbertragseingang: wenn 1 wird eine weitere 1 zur Summe addiert
adderCarryOutTip = \u00dcbertragsausgang: ist 1, wenn die Summe die verf\u00fcgbare Bitbreite \u00fcbersteigt
adderComponent = Addierer
adderInputTip = Eingang: einer der Summanden
adderOutputTip = Ausgang: die Summe der Eing\u00e4nge (plus \u00dcbertragseingang)
#
# arith/Arithmetic.java
#
arithmeticLibrary = Arithmetik
#
# arith/BitAdder.java
#
bitAdderComponent = Bit-Z\u00e4hler
bitAdderInputTip = Eingang: die zu z\u00e4hlenden Bits
bitAdderOutputManyTip = Ausgang: die Anzahl der 1-Bits an den Eing\u00e4ngen
gateInputsAttr = Anzahl der Eing\u00e4nge
#
# arith/BitFinder.java
#
bitFinderComponent = Bit-Finder
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderHighOption = Oberste %s
bitFinderIndexHighTip = Index: Index der h\u00f6chstwertigsten %s des Eingangs
bitFinderIndexLowTip = Index: Index der niederwertigsten %s des Eingangs
bitFinderInputTip = Eingang: die zu durchsuchenden Bits
bitFinderLowLabel = low
bitFinderLowOption = Unterste %s
bitFinderPresentTip = Gefunden: ist 1, wenn der Eingang eine %s enth\u00e4lt
bitFinderTypeAttr = Type
#
# arith/Comparator.java
#
comparatorComponent = Komparator
comparatorEqualTip = Gleich: ist 1, wenn A gleich B ist
comparatorGreaterTip = Gr\u00f6\u00dfer: ist 1, wenn A gr\u00f6\u00dfer als B ist
comparatorInputATip = A: die Zahl vor dem Vergleichsoperator
comparatorInputBTip = B: die Zahl nach dem Vergleichsoperator
comparatorLessTip = Kleiner: ist 1, wenn A kleiner als B ist
comparatorType = Zahlentyp
twosComplementOption = Zweierkomplement
unsignedOption = ohne Vorzeichen
#
# arith/Divider.java
#
dividerComponent = Teiler
dividerDividendLowerTip = Dividend (unten): die untere H\u00e4lfte der zu teilenden Zahl
dividerDividendUpperTip = Dividend (oben): die obere H\u00e4lfte der zu teilenden Zahl
dividerDivisorTip = Divisor: die Zahl, durch die zu teilen ist
dividerOutputTip = Ausgang: das Ergebnis der Division von Dividend durch Divisor
dividerRemainderOutput = rem
dividerRemainderTip = Rest: der Rest der Division (Dividend - Ausgang * Divisor)
dividerUpperInput = upper
#
# arith/Multiplier.java
#
multiplierCarryInTip = \u00dcbertragseingang: zum Ergebnis zu addierender Wert
multiplierCarryOutTip = \u00dcbertragsausgang: die h\u00f6herwertigen Bits des Produkts
multiplierComponent = Multiplizierer
multiplierInputTip = Eingang: eine der zu multiplizierenden Zahlen
multiplierOutputTip = Ausgang: das Produkt der Eing\u00e4nge plus \u00dcbertragseingang
#
# arith/Negator.java
#
negatorComponent = Negator
negatorInputTip = Eingang: die zu negierende Zahl
negatorOutputTip = Ausgang: das Zweierkomplement des Eingangs
#
# arith/Shifter.java
#
shiftArithmeticRight = Arithmetisch nach rechts
shifterComponent = Bitschieber
shifterDistanceTip = Distanz: wie weit der Eingang zu schieben ist
shifterInputTip = Eingang: die zu schiebenden Bits
shifterOutputTip = Ausgang: Ergebnis der Schiebung des Eingangs
shifterShiftAttr = Schiebertyp
shiftLogicalLeft = Logisch nach links
shiftLogicalRight = Logisch nach rechts
shiftRollLeft = Rotieren nach links
shiftRollRight = Rotieren nach rechts
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Leiheingang: wenn 1 wird eine weitere 1 vom Ergebnis abgezogen
subtractorBorrowOutTip = Leihausgang: ist 1, wenn die Differenz ngativ ist
subtractorComponent = Subtrahierer
subtractorMinuendTip = Minuend: die Zahl, von der abzuziehen ist
subtractorOutputTip = Ausgang: die Differenz zwischen Minuend und Subtrahend
subtractorSubtrahendTip = Subtrahend: die Zahl, die abgezogen wird
#
# base/Base.java
#
baseLibrary = Basis
#
# base/Text.java
#
textComponent = Beschriftung
textFontAttr = Zeichensatz
textHorzAlignAttr = Horizontale Ausrichtung
textHorzAlignCenterOpt = Zentriert
textHorzAlignLeftOpt = Links
textHorzAlignRightOpt = Rechts
textTextAttr = Text
textVertAlignAttr = Vertikale Ausrichtung
textVertAlignBaseOpt = Basis
textVertAlignBottomOpt = Unten
textVertAlignCenterOpt = Zentriert
textVertAlignTopOpt = Oben
#
# base/VhdlContent.java
#
# ==> validationErrorButton = 
# ==> validationParseError = 
# ==> vhdlDuplicateNameError = 
# ==> vhdlInvalidNameError = 
# ==> vhdlKeywordNameError = 
#
# base/VhdlParser.java
#
# ==> CannotFindEntityException = 
# ==> emptySourceException = 
# ==> genericDeclarationException = 
# ==> genericTypeException = 
# ==> genericValueException = 
# ==> invalidTypeException = 
# ==> portDeclarationException = 
#
# Builtin.java
#
builtinLibrary = Eingebaut
#
# gates/AndGate.java
#
andGateComponent = AND Gatter
#
# gates/Buffer.java
#
bufferComponent = Puffer
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Tristate-Puffer
controlledControlOption = Position der Steuerleitung
controlledInverterComponent = Tristate-Inverter
controlledLeftHanded = linke Seite
controlledRightHanded = rechte Seite
#
# gates/EvenParityGate.java
#
evenParityComponent = Gerade Parit\u00e4t
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/hochohmig
gateOutputAttr = Ausgabewert
gateOutputZ1 = hochohmig/1
gateSizeNormalOpt = Mittel
xorBehaviorAttr = Verhalten bei mehreren Eing\u00e4ngen
xorBehaviorOdd = Falls eine ungerade Anzahl gesetzt ist
xorBehaviorOne = Falls genau ein Eingang gesetzt ist
#
# gates/Gates.java
#
gatesLibrary = Gatter
#
# gates/NandGate.java
#
nandGateComponent = NAND Gatter
#
# gates/NegateAttribute.java
#
gateNegateAttr = Negiere %s
#
# gates/NorGate.java
#
norGateComponent = NOR Gatter
#
# gates/NotGate.java
#
gateSizeAttr = Gattergr\u00f6\u00dfe
gateSizeNarrowOpt = Schmal
gateSizeWideOpt = Breit
notGateComponent = Inverter
#
# gates/OddParityGate.java
#
oddParityComponent = Ungerade Parit\u00e4t
#
# gates/OrGate.java
#
orGateComponent = OR Gatter
#
# gates/PLA.java
#
# ==> Bit Width In = 
# ==> Bit Width Out = 
# ==> input = 
# ==> output = 
# ==> PLA = 
# ==> plaClickToEdit = 
# ==> plaEditMenuItem = 
# ==> plaProgram = 
#
# gates/PLATable.java
#
# ==> plaEditorTitle = 
# ==> plaFileCreateError = 
# ==> plaFileOpenError = 
# ==> plaLoadDialogTitle = 
# ==> plaLoadErrorTitle = 
# ==> plaSaveDialogTitle = 
# ==> plaSaveErrorTitle = 
#
# gates/XnorGate.java
#
xnorGateComponent = XNOR Gatter
#
# gates/XorGate.java
#
xorGateComponent = XOR Gatter
#
# InstanceComponent.java
#
# ==> KeywordNameError = 
# ==> MatchedLabelNameError = 
#
# InstanceTextField.java
#
changeLabelAction = Beschriftung \u00e4ndern
#
# io/Button.java
#
buttonComponent = Taster
#
# io/DipSwitch.java
#
# ==> DIP = 
# ==> DipSwitchComponent = 
# ==> nrOfSwitch = 
#
# io/DotMatrix.java
#
ioInputColumn = Spalten
ioInputRow = Zeilen
ioInputSelect = Zeilen / Spalten ausw\u00e4hlen
ioMatrixCols = Matrixspalten
ioMatrixInput = Eingabeformat
ioMatrixPersistenceAttr = Nachleuchtdauer
ioMatrixRows = Matrixzeilen
ioMatrixShape = Punktform
ioShapeCircle = Rund
ioShapeSquare = Quadratisch
#
# io/extra/Buzzer.java
#
# ==> buzzerComponent = 
# ==> buzzerFrequecy = 
# ==> buzzerVolume = 
# ==> buzzerVolumeBitWidth = 
# ==> dHz (0.1Hz) = 
# ==> enableSound = 
# ==> Hz = 
#
# io/extra/DigitalOscilloscope.java
#
# ==> BorderColor = 
# ==> bothOption = 
# ==> ClearDiagram = 
# ==> DigitalOscilloscopeClock = 
# ==> DrawClockFrontLine = 
# ==> noOption = 
# ==> ShowClockAttribute = 
stdTriggerFalling = Fallende Flanke
stdTriggerRising = Steigende Flanke
#
# io/extra/ITA_IO.java
#
# ==> DigitalOscilloscopeComponent = 
# ==> Slider = 
#
# io/extra/PlaRom.java
#
memCSTip = Chip-Auswahl: 0 deaktiviert das Bauteil
# ==> PlaANDAttr = 
# ==> PlaOutputsAttr = 
# ==> PlaRomComponent = 
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
# ==> Logisim: Pla Rom  = 
#
# io/extra/PlaRomPanel.java
#
demultiplexerInTip = Eingang
multiplexerOutTip = Ausgang
#
# io/extra/ProgrammableGenerator.java
#
# ==> NStateAttr = 
#
# io/extra/ProgrammableGeneratorState.java
#
# ==> ProgrammableGeneratorComponent = 
#
# io/extra/Slider.java
#
# ==> left_to_rightOption = 
# ==> right_to_leftOption = 
#
# io/extra/Switch.java
#
# ==> switchComponent = 
#
# io/HexDigit.java
#
# ==> hexDigitDataTip = 
# ==> hexDigitDPTip = 
#
# io/HexDigitShape.java
#
hexDigitComponent = Hexadezimale Anzeige
#
# io/Io.java
#
# ==> dipswitchComponent = 
dotMatrixComponent = LED-Matrix
ioActiveAttr = Eingeschaltet bei H-Signal?
ioBackgroundColor = Hintergrund
ioColorAttr = Farbe
ioLibrary = Eingabe/Ausgabe
ioOffColor = Farbe AUS
ioOnColor = Farbe AN
joystickComponent = Joystick
#
# io/Joystick.java
#
ioBitWidthAttr = Bitbreite
#
# io/Keyboard.java
#
keybAvailTip = Verf\u00fcgbar: 1 wenn der Puffer Zeichen enth\u00e4lt
keybBufferLengthAttr = Pufferl\u00e4nge
keybClearTip = L\u00f6schen: wenn 1 wird der Puffer gel\u00f6scht
keybClockTip = Takt: Triggersignal entfernt das vorderste Zeichen des Puffers
keybDesc = Tastatur (Pufferkap. %s)
keybEnableTip = Lesefreigabe: 0 sperrt das Taktsignal
keyboardComponent = Tastatur
keybOutputTip = Daten: ASCII-Wert des vordersten Zeichens im Puffer
#
# io/Led.java
#
ledComponent = LED
#
# io/PortIO.java
#
# ==> pioBuses = 
# ==> pioComponent = 
# ==> pioNumber = 
# ==> pioPins = 
# ==> pioShowBus = 
#
# io/ReptarLocalBus.java
#
# ==> repLBComponent = 
# ==> repLBTip = 
#
# io/RGBLed.java
#
# ==> BLUE = 
# ==> GREEN = 
# ==> RED = 
# ==> RGBledComponent = 
#
# io/SevenSegment.java
#
# ==> DecimalPoint = 
# ==> Segment_A = 
# ==> Segment_B = 
# ==> Segment_C = 
# ==> Segment_D = 
# ==> Segment_E = 
# ==> Segment_F = 
# ==> Segment_G = 
sevenSegmentComponent = 7-Segmentanzeige
#
# io/Tty.java
#
ttyClearTip = L\u00f6schen: 1 l\u00f6scht den Bildschirm
ttyClockTip = Takt: Triggersignal \u00fcbernimmt das Zeichen vom Eingang
ttyColsAttr = Spalten
ttyComponent = Terminal
ttyDesc = Terminal (%s Zeilen, %s Spalten)
ttyDescShort = Terminal
ttyEnableTip = Schreibfreigabe: 0 sperrt das Taktsignal
ttyInputTip = Daten: ASCII-Wert des n\u00e4chsten zu schreibenden Zeichens
ttyRowsAttr = Zeilen
#
# io/Video.java
#
# ==> rgbVideoCLK = 
# ==> rgbVideoColor = 
# ==> rgbVideoComponent = 
# ==> rgbVideoCursor = 
# ==> rgbVideoData = 
# ==> rgbVideoHeight = 
# ==> rgbVideoReset = 
# ==> rgbVideoRST = 
# ==> rgbVideoScale = 
# ==> rgbVideoWE = 
# ==> rgbVideoWidth = 
# ==> rgbVideoX = 
# ==> rgbVideoY = 
#
# library/bcd2sevenseg.java
#
# ==> BCD Value = 
# ==> BCD2SevenSegment = 
#
# library/BFHPraktika.java
#
# ==> BFH mega functions = 
#
# library/bin2bcd.java
#
# ==> Bin2BCD = 
# ==> Binairy data bits = 
# ==> BinairyInputTip = 
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Takt: Zustandsaktualisierung bei Triggersignal
flipFlopNotQTip = Aktuellen Flip-Flop-Zustand invertieren
flipFlopPresetTip = Setzen: wenn 1, gehe asynchron zu Zustand 1
flipFlopQTip = Aktueller Flip-Flop-Zustand
flipFlopResetTip = L\u00f6schen: wenn 1, gehe asynchron zu Zustand 0
#
# memory/Counter.java
#
counterCarryTip = \u00dcbertrag: ist 1, wenn der Z\u00e4hler den H\u00f6chstwert erreicht (Minimalwert beim Abw\u00e4rtsz\u00e4hlen)
counterClockTip = Takt: Wert kann bei Triggersignal aktualisiert werden
counterDataTip = Daten: in den Z\u00e4hler zu ladender Wert
counterEnableLabel = ct
counterEnableTip = Takt: wenn 1, z\u00e4hle aufw\u00e4rts (oder abw\u00e4rts falls Laden = 1)
counterGoalAttr = Bei \u00dcberlauf:
counterGoalContinue = Z\u00e4hle weiter
counterGoalLoad = Lade den n\u00e4chsten Wert
counterGoalStay = Halte an
counterGoalWrap = Starte neu
counterLabel = ctr
counterLoadTip = Laden: wenn 1, lade den Wert vom Daten-Eingang (falls Takt = 0) oder z\u00e4hle abw\u00e4rts
counterMaxAttr = H\u00f6chstwert
counterQTip = Ausgang: aktueller Wert des Z\u00e4hlers
counterResetTip = L\u00f6schen: wenn 1 wird der Z\u00e4hler asynchron auf 0 gesetzt
# ==> counterUpDownTip = 
registerWidthLabel = (%sb)
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = J-K Flip-Flop
#
# memory/Mem.java
#
# ==> ByteLabel = 
# ==> GigabyteLabel = 
# ==> KilobyteLabel = 
# ==> MegabyteLabel = 
ramAddrLabel = A
ramAddrWidthAttr = Bitbreite der Adresse
ramDataWidthAttr = Bitbreite der Daten
# ==> ramSelAttr = 
stdTriggerHigh = H-Niveau
stdTriggerLow = L-Niveau
#
# memory/MemMenu.java
#
ramClearMenuItem = Inhalt l\u00f6schen
ramConfirmClearMsg = Sind SIe sicher, da\u00df der Speicher auf Null gesetzt werden soll?
ramConfirmClearTitle = L\u00f6schen best\u00e4tigen
ramEditMenuItem = Inhalt bearbeiten ...
ramLoadDialogTitle = Lade RAM-Abbild
ramLoadErrorTitle = Fehler beim Laden
ramLoadMenuItem = Speicherabbild laden...
ramSaveDialogTitle = Speichere RAM-Abbild
ramSaveErrorTitle = Fehler beim Speichern
ramSaveMenuItem = Speicherabbild speichern...
#
# memory/Memory.java
#
counterComponent = Z\u00e4hler
dFlipFlopComponent = D Flip-Flop
memoryLibrary = Speicher
ramComponent = RAM
randomComponent = Zufallsgenerator
registerComponent = Register
#
# memory/Ram.java
#
ramBusTip = Daten: geladener oder zu speichernder Wert
ramClkTip = Takt: Speicherinhalt wird beim \u00dcbergang von 0 auf 1 aktualisiert
# ==> ramContentsAttr = 
ramDataLabel = D
ramInTip = Eingang: an der Adresse zu speichernder Wert
ramOELabel = ld
ramOETip = Laden: wenn 1 wird Speicherinhalt auf Ausgang \u00fcbertragen
ramWELabel = str
ramWETip = Speichern: wenn 1 wird Eingang in Speicher \u00fcbertragen
#
# memory/RamAttributes.java
#
# ==> ramBidirDataBus = 
# ==> ramByteEnables = 
# ==> ramDataAttr = 
# ==> ramNoByteEnables = 
# ==> ramSeparateDataBus = 
# ==> ramWithByteEnables = 
#
# memory/Random.java
#
randomClockTip = Takt: Wert kann bei Triggersignal aktualisiert werden
# ==> randomLabel = 
randomNextTip = Freigabe: wechsle zum n\u00e4chsten Schritt der Sequenz bei Triggersignal
randomQTip = Ausgang: aktuelle Zahl in der Zahlenfolge
randomResetTip = L\u00f6schen: wenn 1 wird asynchron auf den urspr\u00fcnglichen Startwert zur\u00fcckgesetzt
randomSeedAttr = Startwert
# ==> randomWidthLabel = 
#
# memory/Register.java
#
registerClkTip = Takt: Wert wird bei Triggersignal aktualisiert
registerClrTip = L\u00f6schen: wenn 1 wird der Wert asynchron auf 0 gesetzt
registerDTip = Daten: beim Triggersignal zu speichernder Wert
registerEnableTip = Freigabe: wenn 0 sind Taktsignale unwirksam
registerLabel = reg
registerQTip = Ausgang: aktueller Wert des Registers
# ==> registerShowInTab = 
#
# memory/Rom.java
#
memAddrTip = Adresse: Zugriffsposition im Speicher
memDataTip = Daten: von der Adresse geladene Daten
romComponent = ROM
romContentsAttr = Inhalt
romContentsValue = (Klicken zum Bearbeiten)
#
# memory/RomContentsListener.java
#
romChangeAction = ROM-Inhalt bearbeiten
#
# memory/ShiftRegister.java
#
shiftRegClearTip = L\u00f6schen: wenn 1 werden alle Werte asynchron auf 0 gesetzt
shiftRegClockTip = Takt: Werte k\u00f6nnen bei Triggersignal aktualisiert werden
shiftRegInTip = Eingang: Wert, der in die erste Stufe geschoben werden soll
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Anzahl der Stufen
shiftRegLoadTip = Laden: wenn 1 (mit Freigabe = 0) werden alle Stufen von den Eing\u00e4ngen geladen
shiftRegOutTip = Ausgang: der Inhalt der letzten Stufe
shiftRegParallelAttr = Paralleles Laden
shiftRegShiftTip = Freigabe: wenn 0 ist das Schieben gesperrt
#
# memory/ShiftRegisterLogger.java
#
shiftRegisterComponent = Schieberegister
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = S-R Flip-Flop
#
# memory/TFlipFlop.java
#
tFlipFlopComponent = T Flip-Flop
#
# plexers/BitSelector.java
#
bitSelectorDataTip = Eingang
bitSelectorGroupAttr = Ausgangsbits
bitSelectorOutputTip = Ausgang: Wert der ausgew\u00e4hlten Gruppe von Bits vom Eingang
bitSelectorSelectTip = Auswahl: gibt an, welche Gruppe von Bits ausgew\u00e4hlt werden soll
#
# plexers/Decoder.java
#
decoderComponent = Dekoder
decoderEnableTip = Aktivierung: wenn nicht 0, wird 1 auf ausgew\u00e4hlten Ausgang geschaltet
decoderOutTip = Ausgang %s
decoderSelectTip = Auswahl: gibt an, welcher Ausgang auf 1 gesetzt wird
#
# plexers/Demultiplexer.java
#
demultiplexerComponent = Demultiplexer
demultiplexerEnableTip = Aktivierung: wenn nicht 0, wird Eingang auf ausgew\u00e4hlten Ausgang geschaltet
demultiplexerSelectTip = Auswahl: gibt an, an welchen Ausgang der Eingang durchgeschaltet wird
#
# plexers/Multiplexer.java
#
multiplexerComponent = Multiplexer
multiplexerEnableTip = Aktivierung: wenn nicht 0 wird ausgew\u00e4hlter Eingang auf Ausgang geschaltet
multiplexerSelectTip = Auswahl: gibt an, welcher Eingang an den Ausgang durchgeschaltet wird
#
# plexers/Plexers.java
#
bitSelectorComponent = Bit-W\u00e4hler
plexerDisabledAttr = Disabled Output
plexerDisabledFloating = Offen
plexerDisabledZero = Null
plexerEnableAttr = Enable Eingang?
plexerLibrary = Auswahlschaltungen
plexerSelectBitsAttr = Auswahlleitungen
plexerSelectBottomLeftOption = Unten/Lonks
plexerSelectLocAttr = Position der Eing\u00e4nge
plexerSelectTopRightOption = Oben/Rechts
plexerThreeStateAttr = Threestate?
#
# plexers/PriorityEncoder.java
#
priorityEncoderComponent = Priorit\u00e4tsenkoder
priorityEncoderEnableOutTip = Freigabeausgang: 1 wenn freigegeben und kein Eingang auf 1 gesetzt
priorityEncoderGroupSignalTip = Gruppenauswahl: 1 wenn einer der Eing\u00e4nge auf 1 gesetzt
priorityEncoderInTip = Eingang %s
priorityEncoderOutTip = Ausgang: Adresse des h\u00f6chst-indizierten, auf 1 gesetzten Eingangs
#
# StdAttr.java
#
ioLabelColorAttr = Farbe der Beschriftung
# ==> stdClassicAppearance = 
stdDataWidthAttr = Datenbits
# ==> stdEvolutionAppearance = 
stdFacingAttr = Ausrichtung
stdLabelAttr = Beschriftung
# ==> stdLabelCenter = 
stdLabelFontAttr = Zeichensatz der Beschriftung
# ==> stdLabelLocAttr = 
# ==> stdLabelVisibility = 
# ==> stdLogisimEvolutionAppearance = 
stdTriggerAttr = Trigger
#
# tcl/Tcl.java
#
# ==> tclGeneric = 
# ==> tclLibrary = 
#
# tcl/TclComponentAttributes.java
#
# ==> tclConsoleContentFile = 
#
# tcl/TclConsoleReds.java
#
# ==> tclConsoleReds = 
#
# tcl/TclGeneric.java
#
# ==> tclInterfaceDefinition = 
# ==> tclInterfaceDefinitionValue = 
#
# ttl/AbstractTtlGate.java
#
demultiplexerOutTip = Ausgang %s
# ==> GND:  = 
multiplexerInTip = Eingang %s
# ==> Vcc:  = 
#
# ttl/DisplayDecoder.java
#
# ==> BI = 
# ==> BlankingInputInTip = 
# ==> DisplayDecoderComponent = 
# ==> DisplayDecoderInTip = 
# ==> DisplayDecoderOutTip = 
# ==> ioMultiBit = 
# ==> LampTestInTip = 
# ==> LT = 
memEnableLabel = en
priorityEncoderEnableInTip = Freigabeeingang: 0 sperrt das Bauteil
# ==> RBI = 
# ==> RippleBlankingInputInTip = 
#
# ttl/TTL.java
#
# ==> ShowInternalStructure = 
# ==> TTL7400 = 
# ==> TTL7402 = 
# ==> TTL7404 = 
# ==> TTL7408 = 
# ==> TTL7410 = 
# ==> TTL7411 = 
# ==> TTL74125 = 
# ==> TTL7413 = 
# ==> TTL7414 = 
# ==> TTL74165 = 
# ==> TTL74175 = 
# ==> TTL7418 = 
# ==> TTL7419 = 
# ==> TTL7420 = 
# ==> TTL7421 = 
# ==> TTL7424 = 
# ==> TTL74266 = 
# ==> TTL7427 = 
# ==> TTL74273 = 
# ==> TTL74283 = 
# ==> TTL7430 = 
# ==> TTL7432 = 
# ==> TTL7436 = 
# ==> TTL74377 = 
# ==> TTL7442 = 
# ==> TTL7443 = 
# ==> TTL7444 = 
# ==> TTL7447 = 
# ==> TTL7451 = 
# ==> TTL7454 = 
# ==> TTL7458 = 
# ==> TTL7464 = 
# ==> TTL7474 = 
# ==> TTL7485 = 
# ==> TTL7486 = 
# ==> VccGndPorts = 
#
# wiring/BitExtender.java
#
extenderComponent = Bit-Erweiterung
extenderInAttr = Bitbreite
extenderInputLabel = Eingang
extenderInputType = Eingang
extenderMainLabel = erweitern
extenderOneLabel = 1
extenderOneType = Eins
extenderOutAttr = Bitbreite Aus
extenderSignLabel = Vorzeichen
extenderSignType = Vorzeichen
extenderTypeAttr = Art der Erweiterung
extenderZeroLabel = 0
extenderZeroType = Null
#
# wiring/Clock.java
#
clockComponent = Takt
clockHighAttr = Dauer H-Signal
clockLowAttr = Dauer L-Signal
#
# wiring/Constant.java
#
constantComponent = Konstante
constantValueAttr = Wert
#
# wiring/DoNotConnect.java
#
# ==> noConnectionComponent = 
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 Takt
clockDurationValue = %s Takte
durationLargeMessage = Wert darf h\u00f6chstens %s sein.
durationSmallMessage = Wert mu\u00df mindestens %s sein.
freqInvalidMessage = Wert ist nicht ganzzahlig
# ==> PORDurationOneValue = 
# ==> PORDurationValue = 
#
# wiring/Ground.java
#
groundComponent = Masse
#
# wiring/Pin.java
#
# ==> PinCancel = 
pinComponent = Pin
# ==> PinEnterDecimal = 
pinFrozenQuestion = Der Pin ist mit dem Zustand der h\u00f6heren Ebene verkn\u00fcpft. Einen neuen Schaltungszustand erstellen?
pinFrozenTitle = Der Pin ist in der h\u00f6heren Ebene zugeordnet.
pinInputName = Eingang
pinInputToolTip = Eingangspin hinzuf\u00fcgen
# ==> PinOkay = 
pinOutputAttr = Ausgang?
pinOutputName = Ausgang
pinOutputToolTip = Ausgangspin hinzuf\u00fcgen
pinPullAttr = Pull-Verhalten
pinPullDownOption = Pull-Down
pinPullNoneOption = Unver\u00e4ndert
pinPullUpOption = Pull-Up
pinThreeStateAttr = Threestate?
#
# wiring/PowerOnReset.java
#
# ==> porHighAttr = 
# ==> PowerOnResetComponent = 
#
# wiring/Probe.java
#
probeComponent = Testpunkt
#
# wiring/ProbeAttributes.java
#
# ==> probeNewPin = 
# ==> stdAppearanceAttr = 
#
# wiring/PullResistor.java
#
pullComponent = Pull-Widerstand
pullErrorType = Fehler
pullOneType = Eins
pullTypeAttr = Pull-Richtung
pullZeroType = Null
#
# wiring/Transistor.java
#
transistorComponent = Transistor
# ==> transistorNDrain = 
# ==> transistorNGate = 
# ==> transistorNSource = 
# ==> transistorPDrain = 
# ==> transistorPGate = 
# ==> transistorPSource = 
transistorTypeAttr = Type
transistorTypeN = N-Type
transistorTypeP = P-Type
#
# wiring/TransmissionGate.java
#
transmissionGateComponent = \u00dcbertragungsgatter
# ==> transmissionGateDrain = 
# ==> transmissionGateNGate = 
# ==> transmissionGatePGate = 
# ==> transmissionGateSource = 
#
# wiring/Tunnel.java
#
tunnelComponent = Tunnel
#
# wiring/Wiring.java
#
powerComponent = Versorgungsspannung
wiringGateAttr = Position der Eing\u00e4nge
wiringGateBottomRightOption = Unten/Rechts
wiringGateTopLeftOption = Oben/Links
wiringLibrary = Verdrahtung


