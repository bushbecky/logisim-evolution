#
# arith/Adder.java
#
adderCarryInTip = Carry In: se 1, um valor adicional em 1 ser\u00e1 adicionado \u00e0 sa\u00edda
adderCarryOutTip = Carry Out: 1 se a soma transbordar para os bits dispon\u00edveis
adderComponent = Somador
adderInputTip = Entrada: um dos n\u00fameros a ser adicionado
adderOutputTip = Sa\u00edda: a soma das entradas (mais "carry in")
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritm\u00e9tica
#
# arith/BitAdder.java
#
bitAdderComponent = Contador de bits
bitAdderInputTip = Entrada: bits a serem contados
bitAdderOutputManyTip = Sa\u00edda: n\u00famero de bits de entrada iguais a 1
gateInputsAttr = Quantidade de entradas
#
# arith/BitFinder.java
#
bitFinderComponent = Indexador de bits
bitFinderFindLabel = find
bitFinderHighLabel = alto
bitFinderHighOption = Mais alta ordem %s
bitFinderIndexHighTip = Index: \u00edndice da mais alta ordem da entrada %s
bitFinderIndexLowTip = Index: \u00edndice da mais baixa ordem da entrada %s
bitFinderInputTip = Entrada: bits a serem procurados
bitFinderLowLabel = baixo
bitFinderLowOption = Mais baixa ordem %s
bitFinderPresentTip = Present: 1 se a entrada contiver um %s
bitFinderTypeAttr = Tipo
#
# arith/Comparator.java
#
comparatorComponent = Comparador
comparatorEqualTip = Equal: 1 se A igual a B
comparatorGreaterTip = Greater: 1 se A for maior que B
comparatorInputATip = A: n\u00famero precedendo a opera\u00e7\u00e3o de compara\u00e7\u00e3o
comparatorInputBTip = B: n\u00famero seguindo a opera\u00e7\u00e3o de compara\u00e7\u00e3o
comparatorLessTip = Less: 1 se A for menor que B
comparatorType = Tipo num\u00e9rico
twosComplementOption = Complemento de 2
unsignedOption = Sem sinal
#
# arith/Divider.java
#
dividerComponent = Divisor
dividerDividendLowerTip = Parte baixa do dividendo: metade baixa do n\u00famero a ser dividido
dividerDividendUpperTip = Parte alta do dividendo: metade alta do n\u00famero a ser dividido
dividerDivisorTip = Divisor: n\u00famero pelo qual ser\u00e1 dividido
dividerOutputTip = Sa\u00edda: o resultado da divis\u00e3o do dividendo pelo divisor
dividerRemainderOutput = rem
dividerRemainderTip = Resto: o resto da divis\u00e3o (dividendo - output * divisor)
dividerUpperInput = upper
#
# arith/Multiplier.java
#
multiplierCarryInTip = Carry In: valor a ser adicionado \u00e0 sa\u00edda
multiplierCarryOutTip = Carry Out: bits mais significativos do produto
multiplierComponent = Multiplicador
multiplierInputTip = Entrada: um dos n\u00fameros a ser multiplicado
multiplierOutputTip = Sa\u00edda: o produto das entradas, mais o "carry in"
#
# arith/Negator.java
#
negatorComponent = Negador
negatorInputTip = Entrada: n\u00famero a ser negado
negatorOutputTip = Sa\u00edda: complemento de dois da entrada
#
# arith/Shifter.java
#
shiftArithmeticRight = Aritm\u00e9tico para a direita
shifterComponent = Deslocador
shifterDistanceTip = Distance: at\u00e9 onde deslocar a entrada
shifterInputTip = Entrada: bits a serem deslocados
shifterOutputTip = Sa\u00edda: resultado do deslocamento da entrada
shifterShiftAttr = Tipo do deslocamento
shiftLogicalLeft = L\u00f3gico para a esquerda
shiftLogicalRight = L\u00f3gico para a direita
shiftRollLeft = Com rota\u00e7\u00e3o \u00e0 esquerda
shiftRollRight = Com rota\u00e7\u00e3o \u00e0 direita
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Borrow In: se 1, 1 ser\u00e1 deduzido da sa\u00edda
subtractorBorrowOutTip = Borrow Out: 1 se a diferen\u00e7a levar a um valor negativo
subtractorComponent = Subtrator
subtractorMinuendTip = Minuendo: n\u00famero do qual outro ser\u00e1 subtra\u00eddo
subtractorOutputTip = Sa\u00edda: a diferen\u00e7a entre o minuendo e o subtraendo
subtractorSubtrahendTip = Subtraendo: n\u00famero a subtrair do minuendo
#
# base/Base.java
#
baseLibrary = Base
#
# base/Text.java
#
textComponent = R\u00f3tulo
textFontAttr = Fonte
textHorzAlignAttr = Alinhamento horizontal
textHorzAlignCenterOpt = Centro
textHorzAlignLeftOpt = Esquerda
textHorzAlignRightOpt = Direita
textTextAttr = Texto
textVertAlignAttr = Alinhamento vertical
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Embaixo
textVertAlignCenterOpt = Centro
textVertAlignTopOpt = Em cima
#
# base/VhdlParser.java
#
CannotFindEntityException = Imposs\u00edvel encontrar defini\u00e7\u00e3o de entidade
emptySourceException = Imposs\u00edvel interpretar conte\u00fado vazio
genericDeclarationException = Sintaxe de gen\u00e9ricos ilegais
genericTypeException = Tipo de gen\u00e9ricos n\u00e3o suportados
genericValueException = Valor padr\u00e3o gen\u00e9rico n\u00e3o reconhecido
invalidTypeException = Tipo de porta inv\u00e1lido
portDeclarationException = Erro de sintaxe na porta
#
# Builtin.java
#
builtinLibrary = Predefinido
#
# gates/AndGate.java
#
andGateComponent = Porta AND
#
# gates/Buffer.java
#
bufferComponent = Buffer
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Buffer controlado
controlledControlOption = Posi\u00e7\u00e3o da linha de controle
controlledInverterComponent = Inversor controlado
controlledLeftHanded = \u00c0 esquerda
controlledRightHanded = \u00c0 direita
#
# gates/EvenParityGate.java
#
evenParityComponent = Paridade par
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/flutuante
gateOutputAttr = Valor de sa\u00edda
gateOutputZ1 = flutuante/1
gateSizeNormalOpt = M\u00e9dio
xorBehaviorAttr = Comportamento para m\u00faltiplas entradas
xorBehaviorOdd = Quando existir um n\u00famero \u00edmpar
xorBehaviorOne = Quando uma entrada estiver em 1
#
# gates/Gates.java
#
gatesLibrary = Portas
#
# gates/NandGate.java
#
nandGateComponent = Porta NAND
#
# gates/NegateAttribute.java
#
gateNegateAttr = Negar %s
#
# gates/NorGate.java
#
norGateComponent = Porta NOR
#
# gates/NotGate.java
#
gateSizeAttr = Tamanho da porta
gateSizeNarrowOpt = Pequeno
gateSizeWideOpt = Grande
notGateComponent = Porta NOT
#
# gates/OddParityGate.java
#
oddParityComponent = Paridade \u00edmpar
#
# gates/OrGate.java
#
orGateComponent = Porta OR
#
# gates/PLA.java
#
Bit Width In = Largura da broca em
Bit Width Out = Largura da broca para fora
input = entrada
output = sa\u00edda
PLA = PLA
plaClickToEdit = (clique para editar)
plaEditMenuItem = Editar programa PLA...
plaProgram = Programa\u00e7\u00e3o
#
# gates/PLATable.java
#
plaEditorTitle = Editor do Programa PLA
plaFileCreateError = N\u00e3o foi poss\u00edvel criar um ficheiro.
plaFileOpenError = N\u00e3o foi poss\u00edvel abrir o ficheiro.
plaLoadDialogTitle = Carregar programa PLA
plaLoadErrorTitle = Erro ao carregar o programa PLA
plaSaveDialogTitle = Salvar Programa PLA
plaSaveErrorTitle = Erro ao salvar o programa PLA
#
# gates/XnorGate.java
#
xnorGateComponent = Porta XNOR
#
# gates/XorGate.java
#
xorGateComponent = Porta XOR
#
# InstanceComponent.java
#
KeywordNameError = A etiqueta \u00e9 uma palavra-chave reservada e n\u00e3o pode ser usada. Por favor, especifique uma etiqueta diferente.
MatchedLabelNameError = A etiqueta e o nome do componente podem n\u00e3o ser os mesmos (s\u00e3o insens\u00edveis a mai\u00fasculas e min\u00fasculas). Especifique uma etiqueta diferente do nome do componente.
#
# InstanceTextField.java
#
changeLabelAction = Substituir r\u00f3tulo
#
# io/Button.java
#
buttonComponent = Bot\u00e3o
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = Interruptor Dip
nrOfSwitch = Quantidade de chaves
#
# io/DotMatrix.java
#
ioInputColumn = Colunas
ioInputRow = Linhas
ioInputSelect = Selecionar linhas/colunas
ioMatrixCols = Colunas da matriz
ioMatrixInput = Formato da entrada
ioMatrixPersistenceAttr = Persist\u00eancia
ioMatrixRows = Linhas da matriz
ioMatrixShape = Forma dos pontos
ioShapeCircle = Circular
ioShapeSquare = Quadrado
#
# io/extra/Buzzer.java
#
buzzerComponent = Sinal sonoro
buzzerFrequecy = frequ\u00eancia
buzzerVolume = volume
buzzerVolumeBitWidth = largura do bit de volume
dHz (0.1Hz) = dHz (0.1Hz)
enableSound = Habilitar som
Hz = Hz
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Cor da borda
bothOption = ambos
ClearDiagram = Limpar diagrama
DigitalOscilloscopeClock = rel\u00f3gio
DrawClockFrontLine = desenhar a linha da frente do rel\u00f3gio
noOption = nenhum
ShowClockAttribute = Mostrar atributo de rel\u00f3gio
stdTriggerFalling = Borda de descida
stdTriggerRising = Borda de subida
#
# io/extra/ITA_IO.java
#
DigitalOscilloscopeComponent = oscila\u00e7\u00e3o digital.
Slider = cursor
#
# io/extra/PlaRom.java
#
memCSTip = Chip select: 0 desabilita componente
PlaANDAttr = E...
PlaOutputsAttr = Sa\u00edda
PlaRomComponent = 
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Janela de edi\u00e7\u00e3o do Pla Rom %s
#
# io/extra/PlaRomPanel.java
#
demultiplexerInTip = Entrada
multiplexerOutTip = Sa\u00edda
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = N\u00ba de Estados
#
# io/extra/ProgrammableGeneratorState.java
#
ProgrammableGeneratorComponent = Gerador de Progr.
#
# io/extra/Slider.java
#
left_to_rightOption = da esquerda para a direita
right_to_leftOption = da direita para a esquerda
#
# io/extra/Switch.java
#
switchComponent = interruptor
#
# io/HexDigit.java
#
hexDigitDataTip = Dados: mordiscar para exibir em hexadecimal
hexDigitDPTip = DecimalPoint: ilumina o ponto decimal
#
# io/HexDigitShape.java
#
hexDigitComponent = Display hexadecimal
#
# io/Io.java
#
dipswitchComponent = Dip switch
dotMatrixComponent = Matriz de LED
ioActiveAttr = Ativar em alto?
ioBackgroundColor = Fundo
ioColorAttr = Cor
ioLibrary = Entrada/Sa\u00edda
ioOffColor = Cor se desligado
ioOnColor = Cor se ligado
joystickComponent = Joystick
#
# io/Joystick.java
#
ioBitWidthAttr = Largura em bits
#
# io/Keyboard.java
#
keybAvailTip = Available: 1 quando o buffer contiver caracteres
keybBufferLengthAttr = Tamanho do buffer
keybClearTip = Clear: 1 ir\u00e1 limpar o buffer
keybClockTip = Clock: ao gatilho ir\u00e1 consumir o primeiro caractere no buffer
keybDesc = teclado (buffer cap. %s)
keybEnableTip = Read enable: 0 ir\u00e1 desabilitar o clock
keyboardComponent = Teclado
keybOutputTip = Data: valor ASCII do primeiro caractere no buffer
#
# io/Led.java
#
ledComponent = LED
#
# io/PortIO.java
#
pioBuses = Um ou mais barramentos
pioComponent = Porta para entrada/sa\u00edda
pioNumber = N\u00famero do PIN
pioPins = Pino \u00fanico
pioShowBus = Tipo da conex\u00e3o ?
#
# io/ReptarLocalBus.java
#
repLBComponent = Reptar Local Bus
repLBTip = Ponta B
#
# io/RGBLed.java
#
BLUE = Entrada azul
GREEN = Entrada verde
RED = Entrada vermelha
RGBledComponent = LED RGB
#
# io/SevenSegment.java
#
DecimalPoint = Ponto decimal
Segment_A = Segmento A
Segment_B = Segmento B
Segment_C = Segmento C
Segment_D = Segmento D
Segment_E = Segmento E
Segment_F = Segmento F
Segment_G = Segmento G
sevenSegmentComponent = Display de 7-segmentos
#
# io/Tty.java
#
ttyClearTip = Clear: 1 ir\u00e1 limpar a tela
ttyClockTip = Clock: ao gatilho ir\u00e1 acrescentar caractere \u00e0 entrada
ttyColsAttr = Colunas
ttyComponent = TTY
ttyDesc = TTY (%s linhas, %s colunas)
ttyDescShort = TTY
ttyEnableTip = Write enable: 0 ir\u00e1 desabilitar o clock
ttyInputTip = Data: valor ASCII do pr\u00f3ximo caractere a ser escrito
ttyRowsAttr = Linhas
#
# io/Video.java
#
rgbVideoCLK = Rel\u00f3gio
rgbVideoColor = Modelo de cor
rgbVideoComponent = V\u00eddeo RGB
rgbVideoCursor = Cursor
rgbVideoData = Dados em formato %s
rgbVideoHeight = Altura
rgbVideoReset = Resetar Comportamento
rgbVideoRST = Redefinir
rgbVideoScale = Escala
rgbVideoWE = Escrever Habilitar
rgbVideoWidth = Largura
rgbVideoX = X Coordenadas
rgbVideoY = Y Coordenada
#
# library/bcd2sevenseg.java
#
BCD Value = Valor BCD
BCD2SevenSegment = BCD para sete segmentos
#
# library/BFHPraktika.java
#
BFH mega functions = BFH mega fun\u00e7\u00f5es
#
# library/bin2bcd.java
#
Bin2BCD = Binairy a BCD
Binairy data bits = Bits de dados Binairy
BinairyInputTip = Entrada Binairy
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Clock: atualizar estado ao gatilho
flipFlopNotQTip = Complemento do estado atual do flip-flop
flipFlopPresetTip = Preset: quando em 1, o estado do pino ser\u00e1 1 assincronamente
flipFlopQTip = Estado atual do flip-flop
flipFlopResetTip = Clear: quando em 1, o estado do pino ser\u00e1 0 assincronamente
#
# memory/Counter.java
#
counterCarryTip = Carry: ser\u00e1 1 quando o valor m\u00e1ximo for alcan\u00e7ado (ou m\u00ednimo se em decremento)
counterClockTip = Clock: valor pode ser atualizado ao gatilho
counterDataTip = Dados: valor a ser carregado no contador
counterEnableLabel = ct
counterEnableTip = Count: quando em 1, incrementar contador (ou decrementar se Load = 1)
counterGoalAttr = A\u00e7\u00e3o quando houver transbordamento
counterGoalContinue = Continuar contando
counterGoalLoad = Carregar pr\u00f3ximo valor
counterGoalStay = Permanecer no valor
counterGoalWrap = Reiniciar contagem
counterLabel = ctr
counterLoadTip = Load: quando em 1, carregar a partir dos dados de entrada (se Count = 0) ou decrementar
counterMaxAttr = Valor m\u00e1ximo
counterQTip = Sa\u00edda: valor atual do contador
counterResetTip = Clear: quando em 1, reiniciar em 0 assincronamente
counterUpDownTip = UpDown: quando em 1, incrementar contador; quando em 0, decrementar contador
registerWidthLabel = (%sb)
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = Flip-Flop tipo JK
#
# memory/Mem.java
#
ByteLabel = byte
GigabyteLabel = Gbyte
KilobyteLabel = kByte
MegabyteLabel = MByte
ramAddrLabel = A
ramAddrWidthAttr = Largura em bits do endere\u00e7o
ramDataWidthAttr = Largura em bits dos dados
ramSelAttr = Selecione
stdTriggerHigh = N\u00edvel alto
stdTriggerLow = N\u00edvel baixo
#
# memory/MemMenu.java
#
ramClearMenuItem = Limpar conte\u00fados
ramConfirmClearMsg = Tem certeza que quer zerar toda a mem\u00f3ria
ramConfirmClearTitle = Confirmar apagamento
ramEditMenuItem = Editar conte\u00fados...
ramLoadDialogTitle = Carregar imagem da RAM
ramLoadErrorTitle = Carregar erro
ramLoadMenuItem = Carregar imagem...
ramSaveDialogTitle = Salvar imagem da RAM
ramSaveErrorTitle = Erro ao salvar
ramSaveMenuItem = Salvar imagem...
#
# memory/Memory.java
#
counterComponent = Contador
dFlipFlopComponent = Flip-Flop tipo D
memoryLibrary = Mem\u00f3ria
ramComponent = RAM
randomComponent = Gerador de valor aleat\u00f3rio
registerComponent = Registrador
#
# memory/Ram.java
#
ramBusTip = Data: valor carregado ou armazenado no endere\u00e7o
ramClkTip = Clock: valor da mem\u00f3ria ser\u00e1 atualizado na vari\u00e7\u00e3o de 0 para 1
ramContentsAttr = Conte\u00fado inicial
ramDataLabel = D
ramInTip = Entrada: valor a ser armazenado no endere\u00e7o
ramOELabel = ld
ramOETip = Load: se 1, carregar mem\u00f3ria \u00e0 sa\u00edda
ramWELabel = str
ramWETip = Store: se 1, armazenar entrada na mem\u00f3ria
#
# memory/RamAttributes.java
#
ramBidirDataBus = Um barramento de dados bidirecional
ramByteEnables = Controle de leitura e escrita
ramDataAttr = Implementa\u00e7\u00e3o do barramento de dados
ramNoByteEnables = Somente leitura/escrita de palavra completa
ramSeparateDataBus = Barramento de dados separado para leitura e escrita
ramWithByteEnables = Usar ativa\u00e7\u00e3o de byte
#
# memory/Random.java
#
randomClockTip = Clock: valor pode ser atualizado ao gatilho
randomLabel = aleat\u00f3rio
randomNextTip = Enable: passos at\u00e9 o pr\u00f3ximo na sequ\u00eancia ao gatilho do clock
randomQTip = Sa\u00edda: pr\u00f3ximo n\u00famero na sequ\u00eancia
randomResetTip = Clear: quando em 1, reiniciar com a semente inicial assincronamente
randomSeedAttr = Semente
randomWidthLabel = Largura: %d
#
# memory/Register.java
#
registerClkTip = Clock: valor atualizado ao gatilho
registerClrTip = Clear: quanto em 1, o valor do pino ser\u00e1 0 assincronamente
registerDTip = Data: valor armazenado ao gatilho do clock
registerEnableTip = Enable: quando em 0, os gatilhos de clock n\u00e3o ser\u00e3o efetivos
registerLabel = reg
registerQTip = Sa\u00edda: valor corrente do registrador
registerShowInTab = Mostrar na aba Registradores
#
# memory/Rom.java
#
memAddrTip = Address: posi\u00e7\u00e3o acessada na mem\u00f3ria
memDataTip = Data: valor carregado a partir do endere\u00e7o
romComponent = ROM
romContentsAttr = Conte\u00fados
romContentsValue = (clicar para editar)
#
# memory/RomContentsListener.java
#
romChangeAction = Editar conte\u00fados da ROM
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Clear: quando em 1, reiniciar todos os valores em 0 assincronamente
shiftRegClockTip = Clock: valores poder\u00e3o ser atualizados ao gatilho
shiftRegInTip = Entrada: valor a ser deslocado no primeiro est\u00e1gio
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = N\u00famero de est\u00e1gios
shiftRegLoadTip = Load: quando em 1 (com shift = 0), todos os est\u00e1gios ser\u00e3o carregados a partir das entradas
shiftRegOutTip = Sa\u00edda: conte\u00fado do \u00faltimo est\u00e1gio
shiftRegParallelAttr = Carga em paralelo
shiftRegShiftTip = Shift: desabilitar se 0
#
# memory/ShiftRegisterLogger.java
#
shiftRegisterComponent = Registrador de deslocamento
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = Flip-Flop tipo SR
#
# memory/TFlipFlop.java
#
tFlipFlopComponent = Flip-Flop tipo T
#
# plexers/BitSelector.java
#
bitSelectorDataTip = Dados
bitSelectorGroupAttr = Bits de sa\u00edda
bitSelectorOutputTip = Sa\u00edda: valor do grupo de bits selecionados a partir dos dados
bitSelectorSelectTip = Select: identificar qual grupo de dados da entrada ser\u00e1 selecionado
#
# plexers/Decoder.java
#
decoderComponent = Decodificador
decoderEnableTip = Enable: quando diferente de 0, a sa\u00edda selecionada ser\u00e1 1
decoderOutTip = Sa\u00edda %s
decoderSelectTip = Select: identificar qual sa\u00edda ser\u00e1 igual a 1
#
# plexers/Demultiplexer.java
#
demultiplexerComponent = Demultiplexador
demultiplexerEnableTip = Enable: quando diferente de 0, a sa\u00edda selecionada ser\u00e1 entrada
demultiplexerSelectTip = Select: identificar qual sa\u00edda receber\u00e1 a entrada
#
# plexers/Multiplexer.java
#
multiplexerComponent = Multiplexador
multiplexerEnableTip = Enable: quando diferente de 0, a sa\u00edda ser\u00e1 a entrada selecionada
multiplexerSelectTip = Select: identificar qual entrada se tornar\u00e1 sa\u00edda
#
# plexers/Plexers.java
#
bitSelectorComponent = Selector de bit
plexerDisabledAttr = Desabilitar sa\u00edda
plexerDisabledFloating = Flutuante
plexerDisabledZero = Zero
plexerEnableAttr = Incluir Enable?
plexerLibrary = Plexers
plexerSelectBitsAttr = Bits para sele\u00e7\u00e3o
plexerSelectBottomLeftOption = Abaixo/Esquerda
plexerSelectLocAttr = Selecionar posi\u00e7\u00e3o
plexerSelectTopRightOption = Acima/Direita
plexerThreeStateAttr = Tri-state?
#
# plexers/PriorityEncoder.java
#
priorityEncoderComponent = Codificador de prioridade
priorityEncoderEnableOutTip = Enable Output: 1 se habilitado e nenhuma entrada estiver em 1
priorityEncoderGroupSignalTip = Group Select: 1 se habilitado e alguma entrada estiver em 1
priorityEncoderInTip = Entrada %s
priorityEncoderOutTip = Sa\u00edda: endere\u00e7o do valor 1 mais significativo na entrada
#
# StdAttr.java
#
ioLabelColorAttr = Cor do r\u00f3tulo
stdClassicAppearance = Logisim Cl\u00e1ssico
stdDataWidthAttr = Bits de dados
stdEvolutionAppearance = Logisim-HolyCross
stdFacingAttr = Posi\u00e7\u00e3o
stdLabelAttr = R\u00f3tulo
stdLabelCenter = Centro
stdLabelFontAttr = Fonte do r\u00f3tulo
stdLabelLocAttr = Localiza\u00e7\u00e3o da etiqueta
stdLabelVisibility = Etiqueta Vis\u00edvel
stdLogisimEvolutionAppearance = Logisim-Evolu\u00e7\u00e3o
stdTriggerAttr = Gatilho
#
# tcl/Tcl.java
#
tclGeneric = TCL gen\u00e9rico
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = Arquivo com conte\u00fado TCL
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = Console TCL REDS
#
# tcl/TclGeneric.java
#
tclInterfaceDefinition = TCL interface para entidade VHDL
tclInterfaceDefinitionValue = (clicar para editar)
#
# ttl/AbstractTtlGate.java
#
demultiplexerOutTip = Sa\u00edda %s
GNDPin = Pino de terra %s
multiplexerInTip = Entrada %s
VCCPin = Pino VCC %s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = Blanking
DisplayDecoderComponent = Decodificador de Display
DisplayDecoderInTip = Entrada
DisplayDecoderOutTip = Sa\u00edda
ioMultiBit = multi bits
LampTestInTip = Entrada de teste de l\u00e2mpada
LT = LT
memEnableLabel = en
priorityEncoderEnableInTip = Enable Input: 0 ir\u00e1 desabilitar o componente
RBI = RBI
RippleBlankingInputInTip = Ripple blanking input
#
# ttl/TTL.java
#
ShowInternalStructure = Mostrar a estrutura interna
TTL7400 = 7400: port\u00e3o NAND quad 2 entradas
TTL7402 = 7402: quad 2 entradas NOR gate
TTL7404 = 7404: inversor hexagonal
TTL7408 = 7408: quad 2 entradas e port\u00e3o
TTL7410 = 7410: triplo 3 entradas porta NAND
TTL7411 = 7411: triplo 3 entradas e port\u00e3o
TTL74125 = 74125: buffer de barramento qu\u00e1druplo, sa\u00eddas de tr\u00eas estados, habilita\u00e7\u00e3o negativa
TTL7413 = 7413: dual 4-input NAND gate(schmitt-trigger)
TTL7414 = 7414: inversor hexadecimal (schmitt-trigger)
TTL74165 = 74165: Registo de desloca\u00e7\u00e3o paralela para s\u00e9rie de 8-bit
TTL74175 = 74175: quad D-flipflop, reset ass\u00edncrono
TTL7418 = 7418: dual 4-input NAND gate(schmitt-trigger)
TTL7419 = 7419: inversor hexadecimal (schmitt-trigger)
TTL7420 = 7420: porta NAND dupla de 4 entradas
TTL7421 = 7421: 4 entradas e porta dupla
TTL7424 = 7424: port\u00e3o NAND quad 2 entradas (disparador schmitt-trigger)
TTL74266 = 74266: quad 2 entradas XNOR gate
TTL7427 = 7427: triplo 3 entradas porta NOR
TTL74273 = 74273: D-Flipflop octal com transparente
TTL74283 = 74283: Adicionador bin\u00e1rio completo de 4 bits
TTL7430 = 7430: port\u00e3o NAND de 8 entradas simples
TTL7432 = 7432: quad 2 entradas OU porta
TTL7436 = 7436: quad 2 entradas NOR gate
TTL74377 = 74377: D-Flipflop octal com habilita\u00e7\u00e3o
TTL7442 = 7442: BCD para decodificador decimal
TTL7443 = 7443: Descodificador de excesso-3 para decimal
TTL7444 = 7444: Descodificador cinzento com decimal
TTL7447 = 7447: BCD para descodificador de 7 segmentos
TTL7451 = 7451: porta dupla AND-OR-INVERT
TTL7454 = 7454: Quatro portas largas AND-OR-INVERT
TTL7458 = 7458: dual AND-OR gate
TTL7464 = 7464: 4-2-3-3-2 E-OR-INVERT porta
TTL7474 = 7474: D-Flipflops duplos com ajuste predefinido e claro
TTL7485 = 7485: Comparador de magnitude de 4 bits
TTL7486 = 7486: quad 2 entradas XOR gate
VccGndPorts = Habilitar portas Vcc e Gnd
#
# wiring/BitExtender.java
#
extenderComponent = Extensor de bits
extenderInAttr = Largura em bits \u00e0 entrada
extenderInputLabel = entrada
extenderInputType = Entrada
extenderMainLabel = estendido
extenderOneLabel = 1
extenderOneType = Um
extenderOutAttr = Largura em bits \u00e0 sa\u00edda
extenderSignLabel = sinal
extenderSignType = Sinal
extenderTypeAttr = Tipo da extens\u00e3o
extenderZeroLabel = 0
extenderZeroType = Zero
#
# wiring/Clock.java
#
clockComponent = Clock
clockHighAttr = Dura\u00e7\u00e3o em n\u00edvel alto
clockLowAttr = Dura\u00e7\u00e3o em n\u00edvel baixo
#
# wiring/Constant.java
#
constantComponent = Constante
constantValueAttr = Valor
#
# wiring/DoNotConnect.java
#
noConnectionComponent = N\u00e3o conectar
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 pulso
clockDurationValue = %s pulsos
durationLargeMessage = Valor deve ser %s ou menor.
durationSmallMessage = Valor deve ser ao menos %s.
freqInvalidMessage = Valor n\u00e3o \u00e9 um inteiro v\u00e1lido
PORDurationOneValue = 1 Sec
PORDurationValue = %s Secs
#
# wiring/Ground.java
#
groundComponent = Terra
#
# wiring/Pin.java
#
PinCancel = Cancelar
pinComponent = Pino
PinEnterDecimal = Entrar decimal
pinFrozenQuestion = Pino vinculado ao estado do supercircuito. Criar um novo estado do circuito?
pinFrozenTitle = Pino associado ao supercircuito.
pinInputName = Entrada
pinInputToolTip = Acrescentar um pino de entrada
PinOkay = EST\u00c1 BEM.
pinOutputAttr = Sa\u00edda?
pinOutputName = Sa\u00edda
pinOutputToolTip = Acrescentar um pino de sa\u00edda
pinPullAttr = Comportamento para ajuste
pinPullDownOption = Ajustar para baixo
pinPullNoneOption = Sem altera\u00e7\u00f5es
pinPullUpOption = Ajustar para cima
pinThreeStateAttr = Tri-state?
#
# wiring/PowerOnReset.java
#
porHighAttr = POR-tempo
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Ponta de prova
#
# wiring/ProbeAttributes.java
#
probeNewPin = Formas de setas
stdAppearanceAttr = Apar\u00eancia
#
# wiring/PullResistor.java
#
pullComponent = Resistor para ajuste
pullErrorType = Erro
pullOneType = Um
pullTypeAttr = Dire\u00e7\u00e3o para ajuste
pullZeroType = Zero
#
# wiring/Transistor.java
#
transistorComponent = Transistor
transistorNDrain = dreno: uma fonte baixa puxar\u00e1 o dreno para baixo (apenas quando o port\u00e3o estiver alto)
transistorNGate = port\u00e3o: quando alto, permite que a corrente flua atrav\u00e9s do transistor
transistorNSource = fonte: uma fonte baixa puxar\u00e1 o dreno para baixo (apenas quando o port\u00e3o estiver alto)
transistorPDrain = dreno: uma fonte alta puxar\u00e1 o dreno para cima (apenas quando o port\u00e3o estiver baixo)
transistorPGate = port\u00e3o: quando baixo, permite que a corrente flua atrav\u00e9s do transistor
transistorPSource = fonte: uma fonte alta puxar\u00e1 o dreno para cima (apenas quando o port\u00e3o estiver baixo)
transistorTypeAttr = Tipo
transistorTypeN = Tipo-N
transistorTypeP = Tipo-P
#
# wiring/TransmissionGate.java
#
transmissionGateComponent = Porta de Transmiss\u00e3o
transmissionGateDrain = dreno: controlado por fonte, dependendo de p-gate e n-gate
transmissionGateNGate = n-gate: quando baixo, permite que a fonte baixa passe para o dreno
transmissionGatePGate = p-gate: quando alto, permite que a fonte alta passe para drenar
transmissionGateSource = fonte: controla o dreno, dependendo do p-gate e n-gate
#
# wiring/Tunnel.java
#
tunnelComponent = T\u00fanel
#
# wiring/Wiring.java
#
powerComponent = Fonte
wiringGateAttr = Posi\u00e7\u00e3o
wiringGateBottomRightOption = Embaixo/Direita
wiringGateTopLeftOption = Em cima/Esquerda
wiringLibrary = Conex\u00e3o


