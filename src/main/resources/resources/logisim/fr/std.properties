#
# Namechack
#
MatchedLabelNameError = L'\u00E9tiquette et le nom composant ne peuvent pas \u00EAtre les m\u00EAmes (ils ne sont pas sensibles \u00E0 la casse). Veuillez sp\u00E9cifier une \u00E9tiquette diff\u00E9rente du nom du composant.
KeywordNameError = Label est un mot cl\u00E9 r\u00E9serv\u00E9 et ne peut pas \u00EAtre utilis\u00E9. Veuillez sp\u00E9cifier une \u00E9tiquette diff\u00E9rente.
#
# std/Builtin.java
#
builtinLibrary = inclue
# instance/StdAttr.java
stdFacingAttr = Orientation
stdDataWidthAttr = Largeur donn\u00E9es
stdTriggerAttr = Trigger
stdTriggerRising = Flanc Montant
stdTriggerFalling = Flanc descendant
stdTriggerHigh = Niveau haut
stdTriggerLow = Niveau bas
stdLabelAttr = Label
stdLabelFontAttr = Police du Label
stdLabelVisibility = Label visible
# instance/InstanceTextField.java
changeLabelAction = Changer le Label
#
# std/base/Base.java
#
baseLibrary = Base
# std/base/BitExtender.java
extenderComponent = Extension de bit
extenderInAttr = Largeur bus entr\u00E9e
extenderOutAttr = Largeur bus sortie
extenderTypeAttr = Type d'Extension
extenderOneType = Un
extenderZeroType = Z\u00E9ro
extenderSignType = Signe
extenderInputType = Entr\u00E9e
extenderMainLabel = \u00E9tendre
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = sign\u00E9
extenderInputLabel = entr\u00E9e
# std/base/Clock
clockComponent = Horloge
clockHighAttr = Dur\u00E9e haute
clockLowAttr = Dur\u00E9e basse
clockDurationValue = %s Tics
clockDurationOneValue = 1 Tic
PORDurationValue = %s Secs
PORDurationOneValue = 1 Sec
porHighAttr = Temps reset
durationSmallMessage = La valeur doit \u00EAtre au moins %s.
durationLargeMessage = La valeur doit \u00EAtre %s ou moins.
freqInvalidMessage = La valeur n'est pas un entier valide
PowerOnResetComponent = POR
# std/base/Pin
pinComponent = Pin
pinInputName = Entr\u00E9e
pinOutputName = Sortie
pinThreeStateAttr = Trois \u00E9tats?
pinOutputAttr = Sortie?
pinPullAttr = Comportement Pull
pinPullNoneOption = Inchang\u00E9
pinPullUpOption = Pull Up
pinPullDownOption = Pull Down
pinLabelLocAttr = Position du label
pinInputToolTip = Ajouter un pin d'entr\u00E9e
pinOutputToolTip = Ajouter un pin de sortie
pinFrozenTitle = Pin attach\u00E9 au super-circuit.
pinFrozenQuestion = Le pin est li\u00E9 \u00E0 l'\u00E9tat du supercircuit. Cr\u00E9er un nouvel \u00E9tat pour le circuit?
# std/base/Probe
probeComponent = Sonde
# std/base/PullResistor
pullComponent = R\u00E9sistance de charge
pullTypeAttr = DIrection charge
pullZeroType = Z\u00E9ro
pullOneType = Un
pullErrorType = Erreur
# std/base/Text.java
textComponent = Label
textTextAttr = Texte
textFontAttr = Police
textHorzAlignAttr = Alignement horizontal
textHorzAlignLeftOpt = Gauche
textHorzAlignRightOpt = Droite
textHorzAlignCenterOpt = Centr\u00E9
textVertAlignAttr = Alignment vertical
textVertAlignTopOpt = Sommet
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Fond
textVertAlignCenterOpt = Centre
# std/base/Tunnel.java
tunnelComponent = Tunnel
#
# std/Wiring.java
#
wiringLibrary = C\u00E2blage
wiringGateAttr = Position de la Gate
wiringGateBottomRightOption = Bas/Droite
wiringGateTopLeftOption = Haut/Gauche
# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Type
transistorTypeP = P-Type
transistorTypeN = N-Type
# std/wiring/TransmissionGate.java
transmissionGateComponent = Porte de transmission
# std/wiring/Power.java
powerComponent = Alimentation
# std/wiring/Ground.java
groundComponent = Masse
#
# std/Gates.java
#
gatesLibrary = Portes logiques
gateSizeAttr = Dimension dessins
gateSizeNarrowOpt = Etroit
gateSizeNormalOpt = moyen
gateSizeWideOpt = large
gateNegateAttr = Inverseur %s
gateInputsAttr = Nombre d'entr\u00E9es
gateOutput01 = 0/1
gateOutput0Z = 0/flottant
gateOutputZ1 = flottant/1
gateOutputAttr = Valeur de sortie
xorBehaviorAttr = Comportement multi-entr\u00E9es
xorBehaviorOne = Quand une entr\u00E9e est Haut
xorBehaviorOdd = Quand un nombre impaire est Haut
# std/Constant.java
constantComponent = Constante
constantValueAttr = Valeur
# std/NotGate.java
notGateComponent = Porte NOT
# std/Buffer.java
bufferComponent = Buffer
# std/AndGate.java
andGateComponent = Porte AND
# std/NandGate.java
nandGateComponent = Porte NAND
# std/NorGate.java
norGateComponent = Porte NOR
# std/OrGate.java
orGateComponent = Porte OR
# std/XorGate.java
xorGateComponent = Porte XOR
# std/XnorGate.java
xnorGateComponent = Porte XNOR
# std/OddParityGate.java
oddParityComponent = Parit\u00E9 impaire
# std/EvenParityGate.java
evenParityComponent = Parit\u00E9 paire
# std/ControlledBuffer.java
controlledBufferComponent = Buffer controll\u00E9
controlledInverterComponent = Inverseur controll\u00E9
controlledControlOption = Position de la commande
controlledLeftHanded = A gauche
controlledRightHanded = A droite
#
# std/Memory.java
#
memoryLibrary = M\u00E9moire / S\u00E9quenciel
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopClockTip = Horloge: l'\u00E9tat impact sur le trigger
flipFlopQTip = Etat courrant du flip-flop
flipFlopNotQTip = Compl\u00E9ment \u00E0 l'\u00E9tat courrant du flip-flop
flipFlopResetTip = Clear: si 1, l'\u00E9tat du pin \u00E0 0 de mani\u00E8re asynchrone
flipFlopPresetTip = Preset: si 1, l'\u00E9tat du pin \u00E0 1 de mani\u00E8re asynchrone
flipFlopEnableTip = Enable: si 0, les trigger de l'horloge sont inop\u00E9rants
# std/Counter.java
counterComponent = Compteur
counterMaxAttr = Valeur max
counterGoalAttr = Action en cas de d\u00E9passement
counterGoalWrap = Entourer
counterGoalStay = Rester \u00E0 la valeur
counterGoalContinue = Continue le compte
counterGoalLoad = Charger la valeur suivante
counterQTip = Sortie: valeur courrant du compteur
counterClockTip = Horloge: la valeur peut modifier le trigger
counterDataTip = Data: valeur \u00E0 charger dans le compteur
counterLoadTip = Load: si 1, charge \u00E0 partir des donn\u00E9es entr\u00E9es (if Count
counterEnableTip = Count: si 1, le compteur s'incr\u00E9mente (ou d\u00E9cr\u00E9mente si Load
counterUpDownTip = 
counterResetTip = Clear: si 1, remet \u00E0 0 de mani\u00E8re asynchrone
counterCarryTip = Carry: est \u00E0 1 si la valeur atteinte le maximum (minimum si d\u00E9cr\u00E9mente)
counterEnableLabel = ct
counterLabel = ctr
# std/DFlipFlop.java
dFlipFlopComponent = D Flip-Flop
# std/TFlipFlop.java
tFlipFlopComponent = T Flip-Flop
# std/JKFlipFlop.java
jkFlipFlopComponent = J-K Flip-Flop
# std/SRFlipFlop.java
srFlipFlopComponent = S-R Flip-Flop
# std/Random.java
randomSeedAttr = Semence
randomComponent = G\u00E9n\u00E9rateur al\u00E9atoire
randomQTip = Sortie: nombre courrant dans la s\u00E9quence
randomClockTip = Clock: la valeur peut changer avec le trigger
randomNextTip = Enable: avance au suivant dans la s\u00E9quence avec le trigger d'horloge
randomResetTip = Clear: si 1, initialise \u00E0 la semence de mani\u00E8re asynchrone
# std/Register.java
registerComponent = Registre
registerQTip = Sortie: valeur courrant du registre
registerDTip = Data: valeur stock\u00E9e dans l'horloge du trigger
registerClkTip = Clock: la valeur change avec le trigger
registerClrTip = Clear: si 1, la valeur du pin mise \u00E0 0 de mani\u00E8re asynchrone
registerEnableTip = Enable: si 0, les trigger d'horloge sont inop\u00E9rants
registerLabel = reg
registerWidthLabel = (%sb)
registerShowInTab = Show in Registers Tab
# std/RamFactory.java
ramComponent = RAM
# std/RomFactory.java
romComponent = ROM
ramContentsAttr = Contenu Initial
romContentsAttr = Contenu
romContentsValue = (click pour \u00E9diter)
romChangeAction = Editer le contenu de la ROM
# std/Ram.java
ramAddrWidthAttr = Largeur d'adresse
ramDataWidthAttr = Largeur donn\u00E9es
ramDataAddrAttr = Byte Addressing
ramDataLabel = D
ramAddrLabel = A
ramWELabel = str
ramCSLabel = sel
ramOELabel = ld
ramClrLabel = clr
ramByteEnableTip0 = Byte enable for bits 7..0
ramByteEnableTip1 = Byte enable for bits 15..8
ramByteEnableTip2 = Byte enable for bits 23..16
ramByteEnableTip3 = Byte enable for bits 31..24
ramWithByteEnables = Use byte enables
ramNoByteEnables = Mot entier en lecture/\u00E9criture seulement
ramByteEnables = Contr\u00F4le lecture/\u00E9criture
ramGigabyteLabel = %sGB RAM
ramMegabyteLabel = %sMB RAM
ramKilobyteLabel = %sKB RAM
ramByteLabel = %sB RAM
romGigabyteLabel = %sGB ROM
romMegabyteLabel = %sMB ROM
romKilobyteLabel = %sKB ROM
romByteLabel = %sB ROM
memDataTip = Data: valeur charg\u00E9e depuis une adresse
memAddrTip = Address: emplacement acc\u00E9d\u00E9 en m\u00E9moire
memCSTip = Chip select: 0 d\u00E9sactive le composant
ramClkTip = Clock: la valeur en m\u00E9moire change sur flanc de 0 \u00E0 1
ramOETip = Load: si 1, charge la m\u00E9moire sur la sortie
ramWETip = Store: si 1, stock l'entr\u00E9e dans la m\u00E9moire
ramClrTip = Clear: when 1, remet le contenu \u00E0 0 de mani\u00E8re asynchrone
ramBusTip = Data: valeur charg\u00E9 ou stock\u00E9e \u00E0 l'adresse
ramInTip = Input: valeur \u00E0 charger \u00E0 l'adresse
ramBusAttr = Interface de donn\u00E9es
ramBusSynchCombined = Un chargement/stockage synchrone du port
ramBusAsynchCombined = Un chargement/stockage asynchrone du port
ramBusSeparate = S\u00E9pare le chargement et le stockage des ports
ramBidirDataBus = bidirectionnel
ramSeparateDataBus = monodirectionnel deux bus lire/\u00E9crire
ramDataAttr = Type de bus donn\u00E9es
ramAttrRdTick = Lire l'impl\u00E9mentation
ramAttrRdTickDefault = Lire sur le front de l'horloge s\u00E9lectionn\u00E9
ramAttrRdTickEarly = Attendre 1 sysclk avant de lire
ramEditMenuItem = Editer le contenu...
ramClearMenuItem = Effacer les contenus
ramLoadMenuItem = Charger l'image...
ramSaveMenuItem = Sauvegarder l'image...
ramConfirmClearTitle = Confirmer l'\u00E9ffacement
ramConfirmClearMsg = Etes vous s\u00FBr de vouloir remettre \u00E0 z\u00E9ro la sortie m\u00E9moire?
ramLoadDialogTitle = Charge une image RAM
ramLoadErrorTitle = Erreur de chargement
ramSaveDialogTitle = Sauvegarder une image RAM
ramSaveErrorTitle = Erreur de sauvegarde
# std/memory/ShiftRegister.java
shiftRegisterComponent = Registre \u00E0 d\u00E9calage
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Nombre d'\u00E9tages
shiftRegParallelAttr = Chargement parall\u00E8le
shiftRegShiftTip = Shift: d\u00E9calage d\u00E9sactiv\u00E9 quand 0
shiftRegClockTip = Clock: les valeurs peuvent changer avec le trigger
shiftRegClearTip = Clear: quand 1, remise \u00E0 z\u00E9ro compl\u00E8te et asynchrone
shiftRegInTip = Input: valeur \u00E0 d\u00E9caler dans le premier \u00E9tage
shiftRegOutTip = Output: est le contenu du dernier \u00E9tage
shiftRegLoadTip = Load: quand 1 (avec shift
#
# std/Plexers.java
#
plexerLibrary = De/Multiplexeurs,Encodeurs
plexerSelectBitsAttr = Select Bits
plexerThreeStateAttr = Trois \u00E9tats?
plexerDisabledAttr = D\u00E9sactiv\u00E9 les sorties
plexerDisabledFloating = Flottant
plexerDisabledZero = Zero
plexerEnableAttr = Inclure l'activation ?
plexerSelectLocAttr = Selectionner l'emplacement
plexerSelectTopRightOption = Haut/Droite
plexerSelectBottomLeftOption = Fond/Gauche
# std/Multiplexer.java
multiplexerComponent = Multiplexeur
multiplexerSelectTip = Select: identifie l'entr\u00E9e qui devient la sortie
multiplexerEnableTip = Enable: si non 0, la sortie est l'entr\u00E9e s\u00E9lectionn\u00E9e
multiplexerInTip = Entr\u00E9e %s
multiplexerOutTip = Sortie
# std/Demultiplexer.java
demultiplexerComponent = Demultiplexeur
demultiplexerSelectTip = Select: identifie quelle sortie re\u00E7oit l'entr\u00E9e
demultiplexerEnableTip = Enable: si non 0, la sortie s\u00E9lectionn\u00E9e et l'entr\u00E9e
demultiplexerInTip = Entr\u00E9e
demultiplexerOutTip = Sortie %s
# std/Decoder.java
decoderComponent = Decodeur
decoderSelectTip = Select: identifie quelle sortie est \u00E0 1
decoderEnableTip = Enable: si non 0, la sortie s\u00E9lectionn\u00E9e est \u00E0 1
decoderOutTip = Sortie %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = Encodeur prioritaire
priorityEncoderInTip = Entr\u00E9e %s
priorityEncoderOutTip = Sortie: adresse du 1 avec le plus haut indexe
priorityEncoderEnableInTip = Activer l'entr\u00E9e: 0 d\u00E9sactive le composant
priorityEncoderEnableOutTip = Activer la sortie: 1 si activ\u00E9 et aucune entr\u00E9e est \u00E0 1
priorityEncoderGroupSignalTip = Group Select: 1 si activ\u00E9 et n'importe quelle entr\u00E9e est \u00E0 1
# std/BitSelector.java
bitSelectorComponent = S\u00E9lecteur de Bit
bitSelectorGroupAttr = Bits en sortie
bitSelectorOutputTip = Sortie: valeur du groupe de bits s\u00E9lectionn\u00E9s dans data
bitSelectorDataTip = Data
bitSelectorSelectTip = Select: identifie quel groupe de donn\u00E9es est s\u00E9lectionn\u00E9
#
# arith/Arithmetic.java
#
arithmeticLibrary = Arithm\u00E9tique
# arith/Adder.java
adderComponent = Additionneur
adderInputTip = Entr\u00E9e: un des nombres \u00E0 additionner
adderOutputTip = Sortie: la somme des entr\u00E9e (plus la retenue en entr\u00E9e)
adderCarryInTip = Retenue en entr\u00E9e: si 1, 1 de plus est ajout\u00E9 \u00E0 la sortie
adderCarryOutTip = Retenue en sortie: 1 si la somme d\u00E9passe le nombre de bits disponibles
# arith/Subtractor.java
subtractorComponent = Soustracteur
subtractorMinuendTip = Diminu\u00E9: le nombre dont on soustrait
subtractorSubtrahendTip = Soustrait: le nombre \u00E0 soustraire du diminu\u00E9
subtractorOutputTip = Sortie: la diff\u00E9rence entre le diminu\u00E9 et le soustrait
subtractorBorrowInTip = Emprunt en entr\u00E9e: si 1 la sortie est dminu\u00E9e de 1
subtractorBorrowOutTip = Emprunt en sortie: 1 si la diff\u00E9rence est n\u00E9gative
# arith/Multiplier.java
multiplierComponent = Multiplicateur
multiplierInputTip = Entr\u00E9e: l'un des nombres \u00E0 multiplier
multiplierOutputTip = Output: le produit des entr\u00E9es plus la retenue en entr\u00E9e
multiplierCarryInTip = Retenue en entr\u00E9e: une valeur \u00E0 ajouter \u00E0 la sortie
multiplierCarryOutTip = Retenue en sortie: le bit de poids le plus fort du produit
# arith/Divider.java
dividerComponent = Diviseur
dividerUpperInput = num\u00E9rateur
dividerRemainderOutput = reste
dividerDividendLowerTip = num\u00E9rateur bas: la moiti\u00E9 basse du nombre \u00E0 diviser
dividerDividendUpperTip = num\u00E9rateur haut: la moiti\u00E9 haute du nombre \u00E0 diviser
dividerDivisorTip = Diviseur: d\u00E9nominateur par lequel diviser
dividerOutputTip = Sortie: le r\u00E9sultat de la division du num\u00E9rateur par le d\u00E9nominateur
dividerRemainderTip = Reste: (num\u00E9rateur - sortie * diviseur)
# arith/Negator.java
negatorComponent = Inverseur
negatorInputTip = Entr\u00E9e: le nombre \u00E0 inverser
negatorOutputTip = Sortie: le compl\u00E9men \u00E0 deux de l'inversion de l'entr\u00E9e
# arith/Comparator.java
comparatorComponent = Comparateur
comparatorType = Type num\u00E9rique
unsignedOption = Non sign\u00E9
twosComplementOption = compl\u00E9ment \u00E0 2
comparatorInputATip = A: membre de gauche de l'op\u00E9ration
comparatorInputBTip = B: membre de droite de l'op\u00E9ration
comparatorLessTip = Less: 1 si A est plus petit que B
comparatorEqualTip = Equal: 1 si A est \u00E9gal \u00E0 B
comparatorGreaterTip = Greater: 1 si A est plus grand que B
# arith/Shifter.java
shifterComponent = D\u00E9calage
shifterShiftAttr = Type de d\u00E9calage
shiftLogicalLeft = Logique \u00E0 gauche
shiftLogicalRight = Logique \u00E0 droite
shiftArithmeticRight = Arithm\u00E9tique \u00E0 droite
shiftRollLeft = Rotation \u00E0 gauche
shiftRollRight = Rotation \u00E0 droite
shifterDistanceTip = Distance: combien de d\u00E9calage sur l'entr\u00E9e
shifterInputTip = Entr\u00E9e: les bits \u00E0 d\u00E9caler
shifterOutputTip = Sortie: r\u00E9sultat du d\u00E9calage de l'entr\u00E9e
# arith/BitAdder.java
bitAdderComponent = Additionneur bit \u00E0 bit
bitAdderInputTip = Entr\u00E9e: les bits \u00E0 compter
bitAdderOutputManyTip = Sortie: combien de bits sont \u00E0 1
# arith/BitFinder.java
bitFinderComponent = Recherche de bits
bitFinderFindLabel = trouver
bitFinderHighLabel = haut
bitFinderLowLabel = bas
bitFinderHighOption = Ordre le plus haut %s
bitFinderLowOption = Ordre le plus bas %s
bitFinderTypeAttr = Type
bitFinderIndexHighTip = Index: index de l'entr\u00E9e avec l'ordre le plus haut %s
bitFinderIndexLowTip = Index: index de l'entr\u00E9e avec l'ordre le plus bas %s
bitFinderPresentTip = Pr\u00E9sence: 1 si l'entr\u00E9e contien un %s
bitFinderInputTip = Entr\u00E9e: les bits \u00E0 rechercher
#
# io
#
# io/Io.java
ioLibrary = Entr\u00E9e/Sortie
ioLabelCenter = Centre
ioBitWidthAttr = Largeur donn\u00E9es
ioColorAttr = Couleur
ioLabelLocAttr = Position du label
ioLabelColorAttr = Couleur du label
ioActiveAttr = Actif si haut?
# io/Button.java
buttonComponent = Bouton
# io/Joystick.java
joystickComponent = Joystick
# io/Keyboard.java
keyboardComponent = Clavier
keybDesc = Clavier (buffer cap. %s)
keybBufferLengthAttr = Longueur du Buffer
keybClearTip = Clear: 1 efface le buffer
keybClockTip = Horloge: trigger consomme le premier caract\u00E8re du buffer
keybEnableTip = Read activ\u00E9: 0 d\u00E9sactive l'horloge
keybAvailTip = Disponible: 1 quand le tampon contient des caract\u00E8res
keybOutputTip = Donn\u00E9es: Valeur ASCII du premier caract\u00E8re du tampon
# io/Led.java
ledComponent = LED
RGBledComponent = LED RVB
# io/DipSwitch.java
dipswitchComponent = Dip switch
nrOfSwitch = Nbr. commutateur
# io/SevenSegment.java
sevenSegmentComponent = Afficheur 7-Segment
# io/HexDigit.java
hexDigitComponent = Afficheur Hexad\u00E9cimal
# io/DotMatrix.java
dotMatrixComponent = Matrice de LED
ioMatrixInput = Format de l'entr\u00E9e
ioMatrixRows = Ligne de la matrice
ioMatrixCols = Colonne de la matrice
ioOnColor = On Color
ioOffColor = Off Color
ioBackgroundColor = Fond (background)
ioMatrixPersistenceAttr = Persistence lumineuse
ioMatrixShape = Forme d'un point
ioInputColumn = Colonnes
ioInputRow = Lignes
ioInputSelect = Selectionner ligne/colonne
ioShapeCircle = Circulaire
ioShapeSquare = Carr\u00E9
# io/Tty.java
ttyComponent = TTY
ttyDesc = TTY (%s lignes, %s colonnes)
ttyDescShort = TTY
ttyRowsAttr = Lignes
ttyColsAttr = Colonnes
ttyClearTip = Effacer: 1 efface l'\u00E9cran
ttyClockTip = Horloge: trigger ajoute le caract\u00E8re en entr\u00E9e
ttyEnableTip = Active l'\u00E9criture: 0 d\u00E9sactive l'horloge
ttyInputTip = Donn\u00E9es: valeur ASCII du prochain character \u00E0 \u00E9crire
# io/PortIO.java
pioComponent = Port I/O
pioNumber = Nombre de contacte
pioShowBus = Type de connexion ?
pioBuses = Un ou plusieurs bus
pioPins = Pin Simple
# io/ReptarLocalBus.java
repLBComponent = Reptar Local Bus
#
# hdl
#
# hdl/hdl.java
hdlLibrary = HDL-IP
# hdl/VhdlEntity.java
vhdlComponent = VHDL Entity
vhdlContentAttr = Contenu
vhdlContentValue = (click pour \u00E9diter)
# hdl/VhdlParser.jave
emptySourceException = Impossible d'analyser le contenu vide
duplicatedEntityException = D\u00E9claration d'entit\u00E9 dupliqu\u00E9e d\u00E9tect\u00E9e
CannotFindEntityException = The entity declaration cannot be found
CannotFindLibrariesException = La d\u00E9claration d'entit\u00E9 est introuvable
invalidVhdlFile = La structure de fichier VHDL n'est pas valided
missingBracketException = Parenth\u00E8se manquante dans la d\u00E9claration des ports
portDeclarationException = Syntaxe de port ill\u00E9gale
multiplePortsDeclarationException = Syntaxe ill\u00E9gale de ports multiples
vectorDeclarationException = Syntaxe de vecteur illicite
lineDeclarationException = Syntaxe de ligne ill\u00E9gale
invalidTypeException = Type de port invalide
keywordNotFoundException = Le mot cl\u00E9 '% s' est introuvable dans la description de l'entit\u00E9
# HdlContentEditor.java
hdlFrameTitle = Logisim-evolution: HDL Editor
openButton = Importer...
saveButton = Exporter...
validateButton = Valider le contenu
closeButton = Fermer la fen\u00EAtre
importMessage = Toute modification apport\u00E9e \u00E0 ce composant sera perdue. Importer quand m\u00EAme?
importTitle = Confirmer l'importation
importOption = Importer
cancelOption = Annuler
confirmCloseYes = Oui
confirmCloseNo = Non
confirmCloseBackup = Cr\u00E9er une sauvegarde
confirmCloseTitle = Confirmer ferme
confirmCloseMessage = Toute modification apport\u00E9e \u00E0 ce composant sera perdue. Fermer quand m\u00EAme?
# HdlContent
validationErrorButton = Continuer
validationParseError = Erreur d'analyse
#
# tcl
#
tclLibrary = TCL
tclConsoleReds = TCL REDS console
tclGeneric = TCL generic
tclConsoleContentFile = TCL content file
tclInterfaceDefinition = TCL interface VHDL entity
tclInterfaceDefinitionValue = (click pour \u00E9diter)
