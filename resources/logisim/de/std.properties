#
# std/Builtin.java
#
builtinLibrary= Eingebaut
# instance/StdAttr.java
stdFacingAttr= Ausrichtung
stdDataWidthAttr= Datenbits
stdTriggerAttr= Trigger
stdTriggerRising= Steigende Flanke
stdTriggerFalling= Fallende Flanke
stdTriggerHigh= H-Niveau
stdTriggerLow= L-Niveau
stdLabelAttr= Beschriftung
stdLabelFontAttr= Zeichensatz der Beschriftung
# instance/InstanceTextField.java
changeLabelAction= Beschriftung ändern
#
# std/base/Base.java
#
baseLibrary= Basis

# std/base/BitExtender.java
extenderComponent= Bit-Erweiterung
extenderInAttr= Bitbreite
extenderOutAttr= Bitbreite Aus
extenderTypeAttr= Art der Erweiterung
extenderOneType= Eins
extenderZeroType= Null
extenderSignType= Vorzeichen
extenderInputType= Eingang
extenderMainLabel= erweitern
extenderOneLabel= 1
extenderZeroLabel= 0
extenderSignLabel= Vorzeichen
extenderInputLabel= Eingang

# std/base/Clock
clockComponent= Takt
clockHighAttr= Dauer H-Signal
clockLowAttr= Dauer L-Signal
clockDurationValue= %s Takte
clockDurationOneValue= 1 Takt
durationSmallMessage= Wert muß mindestens %s sein.
durationLargeMessage= Wert darf höchstens %s sein.
freqInvalidMessage= Wert ist nicht ganzzahlig

# std/base/Pin
pinComponent= Pin
pinInputName= Eingang
pinOutputName= Ausgang
pinThreeStateAttr= Threestate?
pinOutputAttr= Ausgang?
pinPullAttr= Pull-Verhalten
pinPullNoneOption= Unverändert
pinPullUpOption= Pull-Up
pinPullDownOption= Pull-Down
pinLabelLocAttr= Position der Beschriftung
pinInputToolTip= Eingangspin hinzufügen
pinOutputToolTip= Ausgangspin hinzufügen
pinFrozenTitle= Der Pin ist in der höheren Ebene zugeordnet.
pinFrozenQuestion= Der Pin ist mit dem Zustand der höheren Ebene verknüpft. Einen neuen Schaltungszustand erstellen?

# std/base/Probe
probeComponent= Testpunkt

# std/base/PullResistor
pullComponent= Pull-Widerstand
pullTypeAttr= Pull-Richtung
pullZeroType= Null
pullOneType= Eins
pullErrorType= Fehler

# std/base/Text.java
textComponent= Beschriftung
textTextAttr= Text
textFontAttr= Zeichensatz
textHorzAlignAttr= Horizontale Ausrichtung
textHorzAlignLeftOpt= Links
textHorzAlignRightOpt= Rechts
textHorzAlignCenterOpt= Zentriert
textVertAlignAttr= Vertikale Ausrichtung
textVertAlignTopOpt= Oben
textVertAlignBaseOpt= Basis
textVertAlignBottomOpt= Unten
textVertAlignCenterOpt= Zentriert

# std/base/Tunnel.java
tunnelComponent= Tunnel

#
# std/Wiring.java
#
wiringLibrary = Verdrahtung
wiringGateAttr = Position der Eingänge
wiringGateBottomRightOption = Unten/Rechts
wiringGateTopLeftOption = Oben/Links

# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Type
transistorTypeP = P-Type
transistorTypeN = N-Type

# std/wiring/TransmissionGate.java
transmissionGateComponent = Übertragungsgatter

# std/wiring/Power.java
powerComponent = Versorgungsspannung

# std/wiring/Ground.java
groundComponent = Masse

#
# std/Gates.java
#
gatesLibrary= Gatter
gateSizeAttr= Gattergröße
gateSizeNarrowOpt= Schmal
gateSizeNormalOpt= Mittel
gateSizeWideOpt= Breit
gateNegateAttr= Negiere %s
gateInputsAttr= Anzahl der Eingänge
gateOutput01 = 0/1
gateOutput0Z = 0/hochohmig
gateOutputZ1 = hochohmig/1
gateOutputZ0 = hochohmig/0
gateOutput10 = 1/0
gateOutput1Z = 1/hochohmig
gateOutputAttr = Ausgabewert
xorBehaviorAttr= Verhalten bei mehreren Eingängen
xorBehaviorOne= Falls genau ein Eingang gesetzt ist
xorBehaviorOdd= Falls eine ungerade Anzahl gesetzt ist
# std/Constant.java
constantComponent= Konstante
constantValueAttr= Wert
# std/NotGate.java
notGateComponent= Inverter
# std/Buffer.java
bufferComponent= Puffer
# std/AndGate.java
andGateComponent= AND Gatter
# std/NandGate.java
nandGateComponent= NAND Gatter
# std/NorGate.java
norGateComponent= NOR Gatter
# std/OrGate.java
orGateComponent= OR Gatter
# std/XorGate.java
xorGateComponent= XOR Gatter
# std/XnorGate.java
xnorGateComponent= XNOR Gatter
# std/OddParityGate.java
oddParityComponent= Ungerade Parität
# std/EvenParityGate.java
evenParityComponent= Gerade Parität
# std/ControlledBuffer.java
controlledBufferComponent= Tristate-Puffer
controlledInverterComponent= Tristate-Inverter
controlledControlOption= Position der Steuerleitung
controlledLeftHanded= linke Seite
controlledRightHanded= rechte Seite
#
# std/Memory.java
#
memoryLibrary= Speicher
memEnableLabel= en
# AbstractFlipFlop.java
flipFlopClockTip= Takt: Zustandsaktualisierung bei Triggersignal
flipFlopQTip= Aktueller Flip-Flop-Zustand
flipFlopNotQTip= Aktuellen Flip-Flop-Zustand invertieren
flipFlopResetTip= Löschen: wenn 1, gehe asynchron zu Zustand 0
flipFlopPresetTip= Setzen: wenn 1, gehe asynchron zu Zustand 1
flipFlopEnableTip= Freigabe: wenn 0 sind Taktsignale unwirksam
# std/Counter.java
counterComponent= Zähler
counterMaxAttr= Höchstwert
counterGoalAttr= Bei Überlauf:
counterGoalWrap= Starte neu
counterGoalStay= Halte an
counterGoalContinue= Zähle weiter
counterGoalLoad= Lade den nächsten Wert
counterQTip= Ausgang: aktueller Wert des Zählers
counterClockTip= Takt: Wert kann bei Triggersignal aktualisiert werden
counterDataTip= Daten: in den Zähler zu ladender Wert
counterLoadTip= Laden: wenn 1, lade den Wert vom Daten-Eingang (falls Takt = 0) oder zähle abwärts
counterEnableTip= Takt: wenn 1, zähle aufwärts (oder abwärts falls Laden = 1)
counterResetTip= Löschen: wenn 1 wird der Zähler asynchron auf 0 gesetzt
counterCarryTip= Übertrag: ist 1, wenn der Zähler den Höchstwert erreicht (Minimalwert beim Abwärtszählen)
counterEnableLabel= ct
counterLabel= ctr
# std/DFlipFlop.java
dFlipFlopComponent= D Flip-Flop
# std/TFlipFlop.java
tFlipFlopComponent= T Flip-Flop
# std/JKFlipFlop.java
jkFlipFlopComponent= J-K Flip-Flop
# std/SRFlipFlop.java
srFlipFlopComponent= S-R Flip-Flop
# std/Random.java
randomSeedAttr= Startwert
randomComponent= Zufallsgenerator
randomQTip= Ausgang: aktuelle Zahl in der Zahlenfolge
randomClockTip= Takt: Wert kann bei Triggersignal aktualisiert werden
randomNextTip= Freigabe: wechsle zum nächsten Schritt der Sequenz bei Triggersignal
randomResetTip= Löschen: wenn 1 wird asynchron auf den ursprünglichen Startwert zurückgesetzt
# std/Register.java
registerComponent= Register
registerQTip= Ausgang: aktueller Wert des Registers
registerDTip= Daten: beim Triggersignal zu speichernder Wert
registerClkTip= Takt: Wert wird bei Triggersignal aktualisiert
registerClrTip= Löschen: wenn 1 wird der Wert asynchron auf 0 gesetzt
registerEnableTip= Freigabe: wenn 0 sind Taktsignale unwirksam
registerLabel= reg
registerWidthLabel= (%sb)
# std/RamFactory.java
ramComponent= RAM
# std/RomFactory.java
romComponent= ROM
romContentsAttr= Inhalt
romContentsValue= (Klicken zum Bearbeiten)
romChangeAction= ROM-Inhalt bearbeiten
# std/Ram.java
ramAddrWidthAttr= Bitbreite der Adresse
ramDataWidthAttr= Bitbreite der Daten
ramDataLabel= D
ramAddrLabel= A
ramWELabel= str
ramCSLabel= sel
ramOELabel= ld
ramClrLabel= clr
ramGigabyteLabel= %sGB RAM
ramMegabyteLabel= %sMB RAM
ramKilobyteLabel= %sKB RAM
ramByteLabel= %sB RAM
romGigabyteLabel= %sGB ROM
romMegabyteLabel= %sMB ROM
romKilobyteLabel= %sKB ROM
romByteLabel= %sB ROM
memDataTip= Daten: von der Adresse geladene Daten
memAddrTip= Adresse: Zugriffsposition im Speicher
memCSTip= Chip-Auswahl: 0 deaktiviert das Bauteil
ramClkTip= Takt: Speicherinhalt wird beim Übergang von 0 auf 1 aktualisiert
ramOETip= Laden: wenn 1 wird Speicherinhalt auf Ausgang übertragen
ramWETip= Speichern: wenn 1 wird Eingang in Speicher übertragen
ramClrTip= Löschen: wenn 1 wird Speicherinhalt asznchron auf 0 gesetzt
ramBusTip= Daten: geladener oder zu speichernder Wert
ramInTip= Eingang: an der Adresse zu speichernder Wert
ramBusAttr= Datenschnittstelle
ramBusSynchCombined= Ein synchroner Lade/Speicher-Port
ramBusAsynchCombined= Ein asynchroner Lade/Speicher-Port
ramBusSeparate= Separate Ports zum Laden und Speichern
ramEditMenuItem= Inhalt bearbeiten ...
ramClearMenuItem= Inhalt löschen
ramLoadMenuItem= Speicherabbild laden...
ramSaveMenuItem= Speicherabbild speichern...
ramConfirmClearTitle= Löschen bestätigen
ramConfirmClearMsg= Sind SIe sicher, daß der Speicher auf Null gesetzt werden soll?
ramLoadDialogTitle= Lade RAM-Abbild
ramLoadErrorTitle= Fehler beim Laden
ramSaveDialogTitle= Speichere RAM-Abbild
ramSaveErrorTitle= Fehler beim Speichern
# std/memory/ShiftRegister.java
shiftRegisterComponent= Schieberegister
shiftRegisterLabel1= shift reg
shiftRegisterLabel2= %sx%s
shiftRegLengthAttr= Anzahl der Stufen
shiftRegParallelAttr= Paralleles Laden
shiftRegShiftTip= Freigabe: wenn 0 ist das Schieben gesperrt
shiftRegClockTip= Takt: Werte können bei Triggersignal aktualisiert werden
shiftRegClearTip= Löschen: wenn 1 werden alle Werte asynchron auf 0 gesetzt
shiftRegInTip= Eingang: Wert, der in die erste Stufe geschoben werden soll
shiftRegOutTip= Ausgang: der Inhalt der letzten Stufe
shiftRegLoadTip= Laden: wenn 1 (mit Freigabe = 0) werden alle Stufen von den Eingängen geladen
#
# std/Plexers.java
#
plexerLibrary= Auswahlschaltungen
plexerSelectBitsAttr= Auswahlleitungen
plexerThreeStateAttr= Threestate?
plexerDisabledAttr = Disabled Output
plexerDisabledFloating = Offen
plexerDisabledZero = Null
plexerEnableAttr = Enable Eingang?
plexerSelectLocAttr = Position der Eingänge
plexerSelectTopRightOption = Oben/Rechts
plexerSelectBottomLeftOption = Unten/Lonks
# std/Multiplexer.java
multiplexerComponent= Multiplexer
multiplexerSelectTip= Auswahl: gibt an, welcher Eingang an den Ausgang durchgeschaltet wird
multiplexerEnableTip = Aktivierung: wenn nicht 0 wird ausgewählter Eingang auf Ausgang geschaltet
multiplexerInTip= Eingang %s
multiplexerOutTip= Ausgang
# std/Demultiplexer.java
demultiplexerComponent= Demultiplexer
demultiplexerSelectTip= Auswahl: gibt an, an welchen Ausgang der Eingang durchgeschaltet wird
demultiplexerEnableTip = Aktivierung: wenn nicht 0, wird Eingang auf ausgewählten Ausgang geschaltet
demultiplexerInTip= Eingang
demultiplexerOutTip= Ausgang %s
# std/Decoder.java
decoderComponent= Dekoder
decoderSelectTip= Auswahl: gibt an, welcher Ausgang auf 1 gesetzt wird
decoderEnableTip = Aktivierung: wenn nicht 0, wird 1 auf ausgewählten Ausgang geschaltet
decoderOutTip= Ausgang %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent= Prioritätsenkoder
priorityEncoderInTip= Eingang %s
priorityEncoderOutTip= Ausgang: Adresse des höchst-indizierten, auf 1 gesetzten Eingangs
priorityEncoderEnableInTip= Freigabeeingang: 0 sperrt das Bauteil
priorityEncoderEnableOutTip= Freigabeausgang: 1 wenn freigegeben und kein Eingang auf 1 gesetzt
priorityEncoderGroupSignalTip= Gruppenauswahl: 1 wenn einer der Eingänge auf 1 gesetzt
# std/BitSelector.java
bitSelectorComponent= Bit-Wähler
bitSelectorGroupAttr= Ausgangsbits
bitSelectorOutputTip= Ausgang: Wert der ausgewählten Gruppe von Bits vom Eingang
bitSelectorDataTip= Eingang
bitSelectorSelectTip= Auswahl: gibt an, welche Gruppe von Bits ausgewählt werden soll
#
# arith/Arithmetic.java
#
arithmeticLibrary= Arithmetik
# arith/Adder.java
adderComponent= Addierer
adderInputTip= Eingang: einer der Summanden
adderOutputTip= Ausgang: die Summe der Eingänge (plus Übertragseingang)
adderCarryInTip= Übertragseingang: wenn 1 wird eine weitere 1 zur Summe addiert
adderCarryOutTip= Übertragsausgang: ist 1, wenn die Summe die verfügbare Bitbreite übersteigt
# arith/Subtractor.java
subtractorComponent= Subtrahierer
subtractorMinuendTip= Minuend: die Zahl, von der abzuziehen ist
subtractorSubtrahendTip= Subtrahend: die Zahl, die abgezogen wird
subtractorOutputTip= Ausgang: die Differenz zwischen Minuend und Subtrahend
subtractorBorrowInTip= Leiheingang: wenn 1 wird eine weitere 1 vom Ergebnis abgezogen
subtractorBorrowOutTip= Leihausgang: ist 1, wenn die Differenz ngativ ist
# arith/Multiplier.java
multiplierComponent= Multiplizierer
multiplierInputTip= Eingang: eine der zu multiplizierenden Zahlen
multiplierOutputTip= Ausgang: das Produkt der Eingänge plus Übertragseingang
multiplierCarryInTip= Übertragseingang: zum Ergebnis zu addierender Wert
multiplierCarryOutTip= Übertragsausgang: die höherwertigen Bits des Produkts
# arith/Divider.java
dividerComponent= Teiler
dividerUpperInput= upper
dividerRemainderOutput= rem
dividerDividendLowerTip= Dividend (unten): die untere Hälfte der zu teilenden Zahl
dividerDividendUpperTip= Dividend (oben): die obere Hälfte der zu teilenden Zahl
dividerDivisorTip= Divisor: die Zahl, durch die zu teilen ist
dividerOutputTip= Ausgang: das Ergebnis der Division von Dividend durch Divisor
dividerRemainderTip= Rest: der Rest der Division (Dividend - Ausgang * Divisor)
# arith/Negator.java
negatorComponent= Negator
negatorInputTip= Eingang: die zu negierende Zahl
negatorOutputTip= Ausgang: das Zweierkomplement des Eingangs
# arith/Comparator.java
comparatorComponent= Komparator
comparatorType= Zahlentyp
unsignedOption= ohne Vorzeichen
twosComplementOption= Zweierkomplement
comparatorInputATip= A: die Zahl vor dem Vergleichsoperator
comparatorInputBTip= B: die Zahl nach dem Vergleichsoperator
comparatorLessTip= Kleiner: ist 1, wenn A kleiner als B ist
comparatorEqualTip= Gleich: ist 1, wenn A gleich B ist
comparatorGreaterTip= Größer: ist 1, wenn A größer als B ist
# arith/Shifter.java
shifterComponent= Bitschieber
shifterShiftAttr= Schiebertyp
shiftLogicalLeft= Logisch nach links
shiftLogicalRight= Logisch nach rechts
shiftArithmeticRight= Arithmetisch nach rechts
shiftRollLeft= Rotieren nach links
shiftRollRight= Rotieren nach rechts
shifterDistanceTip= Distanz: wie weit der Eingang zu schieben ist
shifterInputTip= Eingang: die zu schiebenden Bits
shifterOutputTip= Ausgang: Ergebnis der Schiebung des Eingangs
# arith/BitAdder.java
bitAdderComponent= Bit-Zähler
bitAdderInputTip= Eingang: die zu zählenden Bits
bitAdderOutputManyTip= Ausgang: die Anzahl der 1-Bits an den Eingängen
# arith/BitFinder.java
bitFinderComponent= Bit-Finder
bitFinderFindLabel= find
bitFinderHighLabel= high
bitFinderLowLabel= low
bitFinderHighOption= Oberste %s
bitFinderLowOption= Unterste %s
bitFinderTypeAttr= Type
bitFinderIndexHighTip= Index: Index der höchstwertigsten %s des Eingangs
bitFinderIndexLowTip= Index: Index der niederwertigsten %s des Eingangs
bitFinderPresentTip= Gefunden: ist 1, wenn der Eingang eine %s enthält
bitFinderInputTip= Eingang: die zu durchsuchenden Bits
#
# io
#
# io/Io.java
ioLibrary= Eingabe/Ausgabe
ioLabelCenter= Zentriert
ioBitWidthAttr= Bitbreite
ioColorAttr= Farbe
ioLabelLocAttr= Position der Beschriftung
ioLabelColorAttr= Farbe der Beschriftung
ioActiveAttr= Eingeschaltet bei H-Signal?
# io/Button.java
buttonComponent= Taster
# io/Joystick.java
joystickComponent= Joystick
# io/Keyboard.java
keyboardComponent= Tastatur
keybDesc= Tastatur (Pufferkap. %s)
keybBufferLengthAttr= Pufferlänge
keybClearTip= Löschen: wenn 1 wird der Puffer gelöscht
keybClockTip= Takt: Triggersignal entfernt das vorderste Zeichen des Puffers
keybEnableTip= Lesefreigabe: 0 sperrt das Taktsignal
keybAvailTip= Verfügbar: 1 wenn der Puffer Zeichen enthält
keybOutputTip= Daten: ASCII-Wert des vordersten Zeichens im Puffer
# io/Led.java
ledComponent= LED
# io/SevenSegment.java
sevenSegmentComponent= 7-Segmentanzeige
# io/HexDigit.java
hexDigitComponent= Hexadezimale Anzeige
# io/DotMatrix.java
dotMatrixComponent= LED-Matrix
ioMatrixInput= Eingabeformat
ioMatrixRows= Matrixzeilen
ioMatrixCols= Matrixspalten
ioOnColor= Farbe AN
ioOffColor= Farbe AUS
ioBackgroundColor= Hintergrund
ioMatrixPersistenceAttr= Nachleuchtdauer
ioMatrixShape= Punktform
ioInputColumn= Spalten
ioInputRow= Zeilen
ioInputSelect= Zeilen / Spalten auswählen
ioShapeCircle= Rund
ioShapeSquare= Quadratisch
# io/Tty.java
ttyComponent= Terminal
ttyDesc= Terminal (%s Zeilen, %s Spalten)
ttyDescShort= Terminal
ttyRowsAttr= Zeilen
ttyColsAttr= Spalten
ttyClearTip= Löschen: 1 löscht den Bildschirm
ttyClockTip= Takt: Triggersignal übernimmt das Zeichen vom Eingang
ttyEnableTip= Schreibfreigabe: 0 sperrt das Taktsignal
ttyInputTip= Daten: ASCII-Wert des nächsten zu schreibenden Zeichens
