#
# Namechack
#
MatchedLabelNameError = L'étiquette et le nom composant ne peuvent pas être les mêmes (ils ne sont pas sensibles à la casse). Veuillez spécifier une étiquette différente du nom du composant.
KeywordNameError = Label est un mot clé réservé et ne peut pas être utilisé. Veuillez spécifier une étiquette différente.
#
# std/Builtin.java
#
builtinLibrary = inclue
# instance/StdAttr.java
stdFacingAttr = Orientation
stdDataWidthAttr = Data Bits
stdTriggerAttr = Trigger
stdTriggerRising = Flanc Montant
stdTriggerFalling = Flanc descendant
stdTriggerHigh = Niveau haut
stdTriggerLow = Niveau bas
stdLabelAttr = Label
stdLabelFontAttr = Police du Label
# instance/InstanceTextField.java
changeLabelAction = Changer le Label
#
# std/base/Base.java
#
baseLibrary = Base

# std/base/BitExtender.java
extenderComponent = Extension de bit
extenderInAttr = Largeur de bit en entrée
extenderOutAttr = Largeur de bit en sortie
extenderTypeAttr = Type d'Extension
extenderOneType = Un
extenderZeroType = Zéro
extenderSignType = Signe
extenderInputType = Entrée
extenderMainLabel = étendre
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = signé
extenderInputLabel = entrée

# std/base/Clock
clockComponent = Horloge
clockHighAttr = Durée haute
clockLowAttr = Durée basse
clockDurationValue = %s Tics
clockDurationOneValue = 1 Tic
porHighAttr = Temps reset
durationSmallMessage = La valeur doit être au moins %s.
durationLargeMessage = La valeur doit être %s ou moins.
freqInvalidMessage = La valeur n'est pas un entier valide
PowerOnResetComponent = POR
# std/base/Pin
pinComponent = Pin
pinInputName = Entrée
pinOutputName = Sortie
pinThreeStateAttr = Trois états?
pinOutputAttr = Sortie?
pinPullAttr = Comportement Pull
pinPullNoneOption = Inchangé
pinPullUpOption = Pull Up
pinPullDownOption = Pull Down
pinLabelLocAttr = Position du label
pinInputToolTip = Ajouter un pin d'entrée
pinOutputToolTip = Ajouter un pin de sortie
pinFrozenTitle = Pin attaché au super-circuit.
pinFrozenQuestion = Le pin est lié à l'état du supercircuit. Créer un nouvel état pour le circuit?

# std/base/Probe
probeComponent = Sonde

# std/base/PullResistor
pullComponent = Résistance de charge
pullTypeAttr = DIrection charge
pullZeroType = Zéro
pullOneType = Un
pullErrorType = Erreur

# std/base/Text.java
textComponent = Label
textTextAttr = Texte
textFontAttr = Police
textHorzAlignAttr = Alignement horizontal
textHorzAlignLeftOpt = Gauche
textHorzAlignRightOpt = Droite
textHorzAlignCenterOpt = Centré
textVertAlignAttr = Alignment vertical
textVertAlignTopOpt = Sommet
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Fond
textVertAlignCenterOpt = Centre

# std/base/Tunnel.java
tunnelComponent = Tunnel

#
# std/Wiring.java
#
wiringLibrary = Câblage
wiringGateAttr = Position de la porte logique
wiringGateBottomRightOption = Bas/Droite
wiringGateTopLeftOption = Haut/Gauche

# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Type
transistorTypeP = P-Type
transistorTypeN = N-Type

# std/wiring/TransmissionGate.java
transmissionGateComponent = Porte de transmission

# std/wiring/Power.java
powerComponent = Alimentation

# std/wiring/Ground.java
groundComponent = Masse

#
# std/Gates.java
#
gatesLibrary = Portes logiques
gateSizeAttr = Taille de la porte logique
gateSizeNarrowOpt = étroit
gateSizeNormalOpt = moyen
gateSizeWideOpt = large
gateNegateAttr = Inverse %s
gateInputsAttr = Nombre d'entrées
gateOutput01 = 0/1
gateOutput0Z = 0/flottant
gateOutputZ1 = flottant/1
gateOutputAttr = Valeur de sortie
xorBehaviorAttr = Comportement multi-entrées
xorBehaviorOne = Quand une entrée est Haut
xorBehaviorOdd = Quand un nombre impaire est Haut
# std/Constant.java
constantComponent = Constante
constantValueAttr = Valeur
# std/NotGate.java
notGateComponent = Porte NOT
# std/Buffer.java
bufferComponent = Buffer
# std/AndGate.java
andGateComponent = Porte AND
# std/NandGate.java
nandGateComponent = Porte NAND
# std/NorGate.java
norGateComponent = Porte NOR
# std/OrGate.java
orGateComponent = Porte OR
# std/XorGate.java
xorGateComponent = Porte XOR
# std/XnorGate.java
xnorGateComponent = Porte XNOR
# std/OddParityGate.java
oddParityComponent = Parité impaire
# std/EvenParityGate.java
evenParityComponent = Parité paire
# std/ControlledBuffer.java
controlledBufferComponent = Buffer controllé
controlledInverterComponent = Inverseur controllé
controlledControlOption = Controle de la position de la ligne
controlledLeftHanded = A gauche
controlledRightHanded = A droite
#
# std/Memory.java
#
memoryLibrary = Mémoire / Séquenciel
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopClockTip = Horloge: l'état impact sur le trigger
flipFlopQTip = Etat courrant du flip-flop
flipFlopNotQTip = Complément à l'état courrant du flip-flop
flipFlopResetTip = Clear: si 1, l'état du pin à 0 de manière asynchrone
flipFlopPresetTip = Preset: si 1, l'état du pin à 1 de manière asynchrone
flipFlopEnableTip = Enable: si 0, les trigger de l'horloge sont inopérants
# std/Counter.java
counterComponent = Compteur
counterMaxAttr   = Valeur max
counterGoalAttr  = Action en cas de dépassement
counterGoalWrap  = Entourer
counterGoalStay  = Rester à la valeur
counterGoalContinue = Continue le compte
counterGoalLoad  = Charger la valeur suivante
counterQTip      = Sortie: valeur courrant du compteur
counterClockTip  = Horloge: la valeur peut modifier le trigger
counterDataTip   = Data: valeur à charger dans le compteur
counterLoadTip   = Load: si 1, charge à partir des données entrées (if Count = 0) ou décrémente
counterEnableTip = Count: si 1, le compteur s'incrémente (ou décrémente si Load = 1)
counterResetTip  = Clear: si 1, remet à 0 de manière asynchrone
counterCarryTip  = Carry: est à 1 si la valeur atteinte le maximum (minimum si décrémente)
counterEnableLabel = ct
counterLabel = ctr
# std/DFlipFlop.java
dFlipFlopComponent = D Flip-Flop
# std/TFlipFlop.java
tFlipFlopComponent = T Flip-Flop
# std/JKFlipFlop.java
jkFlipFlopComponent = J-K Flip-Flop
# std/SRFlipFlop.java
srFlipFlopComponent = S-R Flip-Flop
# std/Random.java
randomSeedAttr = Semence
randomComponent = Générateur aléatoire
randomQTip = Sortie: nombre courrant dans la séquence
randomClockTip = Clock: la valeur peut changer avec le trigger
randomNextTip = Enable: avance au suivant dans la séquence avec le trigger d'horloge
randomResetTip = Clear: si 1, initialise à la semence de manière asynchrone
# std/Register.java
registerComponent = Registre
registerQTip = Sortie: valeur courrant du registre
registerDTip = Data: valeur stockée dans l'horloge du trigger
registerClkTip = Clock: la valeur change avec le trigger 
registerClrTip = Clear: si 1, la valeur du pin mise à 0 de manière asynchrone
registerEnableTip = Enable: si 0, les trigger d'horloge sont inopérants
registerLabel = reg
registerWidthLabel = (%sb)
registerShowInTab = Show in Registers Tab
# std/RamFactory.java
ramComponent = RAM
# std/RomFactory.java
romComponent = ROM
ramContentsAttr = Contenu Initial
romContentsAttr = Contenu
romContentsValue = (click pour éditer)
romChangeAction = Editer le contenu de la ROM
# std/Ram.java
ramAddrWidthAttr = Largeur d'adresse
ramDataWidthAttr = Largeur de données
ramDataAddrAttr = Byte Addressing
ramDataLabel = D
ramAddrLabel = A
ramWELabel = str
ramCSLabel = sel
ramOELabel = ld
ramClrLabel = clr
ramByteEnableTip0 = Byte enable for bits 7..0
ramByteEnableTip1 = Byte enable for bits 15..8
ramByteEnableTip2 = Byte enable for bits 23..16
ramByteEnableTip3 = Byte enable for bits 31..24
ramWithByteEnables = Use byte enables
ramNoByteEnables = Mot entier en lecture/écriture seulement
ramByteEnables = Contrôle lecture/écriture
ramGigabyteLabel = %sGB RAM
ramMegabyteLabel = %sMB RAM
ramKilobyteLabel = %sKB RAM
ramByteLabel = %sB RAM
romGigabyteLabel = %sGB ROM
romMegabyteLabel = %sMB ROM
romKilobyteLabel = %sKB ROM
romByteLabel = %sB ROM
memDataTip = Data: valeur chargée depuis une adresse
memAddrTip = Address: emplacement accédé en mémoire
memCSTip = Chip select: 0 désactive le composant
ramClkTip = Clock: la valeur en mémoire change sur flanc de 0 à 1
ramOETip = Load: si 1, charge la mémoire sur la sortie
ramWETip = Store: si 1, stock l'entrée dans la mémoire
ramClrTip = Clear: when 1, remet le contenu à 0 de manière asynchrone
ramBusTip = Data: valeur chargé ou stockée à l'adresse
ramInTip = Input: valeur à charger à l'adresse
ramBusAttr = Interface de données
ramBusSynchCombined = Un chargement/stockage synchrone du port
ramBusAsynchCombined = Un chargement/stockage asynchrone du port
ramBusSeparate = Sépare le chargement et le stockage des ports
ramBidirDataBus = bidirectionnel
ramSeparateDataBus = monodirectionnel deux bus lire/écrire
ramDataAttr = Type de bus données
ramAttrRdTick = Lire l'implémentation
ramAttrRdTickDefault = Lire sur le front de l'horloge sélectionné
ramAttrRdTickEarly = Attendre 1 sysclk avant de lire
ramEditMenuItem = Editer le contenu...
ramClearMenuItem = Effacer les contenus
ramLoadMenuItem = Charger l'image...
ramSaveMenuItem = Sauvegarder l'image...
ramConfirmClearTitle = Confirmer l'éffacement
ramConfirmClearMsg = Etes vous sûr de vouloir remettre à zéro la sortie mémoire?
ramLoadDialogTitle = Charge une image RAM
ramLoadErrorTitle = Erreur de chargement
ramSaveDialogTitle = Sauvegarder une image RAM
ramSaveErrorTitle = Erreur de sauvegarde
# std/memory/ShiftRegister.java
shiftRegisterComponent = Registre à décalage
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Nombre d'étages
shiftRegParallelAttr = Chargement parallèle
shiftRegShiftTip = Shift: décalage désactivé quand 0
shiftRegClockTip = Clock: les valeurs peuvent changer avec le trigger
shiftRegClearTip = Clear: quand 1, remise à zéro complète et asynchrone
shiftRegInTip    = Input: valeur à décaler dans le premier étage
shiftRegOutTip   = Output: est le contenu du dernier étage
shiftRegLoadTip  = Load: quand 1 (avec shift = 0), tous les étages chargent les entrées
#
# std/Plexers.java
#
plexerLibrary = De/Multiplexeurs,Encodeurs
plexerSelectBitsAttr = Select Bits
plexerThreeStateAttr = Trois états?
plexerDisabledAttr = Désactivé les sorties
plexerDisabledFloating = Flottant
plexerDisabledZero = Zero
plexerEnableAttr = Inclure l'activation ?
plexerSelectLocAttr = Selectionner l'emplacement
plexerSelectTopRightOption = Haut/Droite
plexerSelectBottomLeftOption = Fond/Gauche
# std/Multiplexer.java
multiplexerComponent = Multiplexeur
multiplexerSelectTip = Select: identifie l'entrée qui devient la sortie
multiplexerEnableTip = Enable: si non 0, la sortie est l'entrée sélectionnée
multiplexerInTip = Entrée %s
multiplexerOutTip = Sortie
# std/Demultiplexer.java
demultiplexerComponent = Demultiplexeur
demultiplexerSelectTip = Select: identifie quelle sortie reçoit l'entrée
demultiplexerEnableTip = Enable: si non 0, la sortie sélectionnée et l'entrée
demultiplexerInTip = Entrée
demultiplexerOutTip = Sortie %s
# std/Decoder.java
decoderComponent = Decodeur
decoderSelectTip = Select: identifie quelle sortie est à 1
decoderEnableTip = Enable: si non 0, la sortie sélectionnée est à 1
decoderOutTip = Sortie %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = Encodeur prioritaire
priorityEncoderInTip = Entrée %s
priorityEncoderOutTip = Sortie: adresse du 1 avec le plus haut indexe
priorityEncoderEnableInTip = Activer l'entrée: 0 désactive le composant
priorityEncoderEnableOutTip = Activer la sortie: 1 si activé et aucune entrée est à 1
priorityEncoderGroupSignalTip = Group Select: 1 si activé et n'importe quelle entrée est à 1
# std/BitSelector.java
bitSelectorComponent = Sélecteur de Bit
bitSelectorGroupAttr = Bits en sortie
bitSelectorOutputTip = Sortie: valeur du groupe de bits sélectionnés dans data
bitSelectorDataTip = Data
bitSelectorSelectTip = Select: identifie quel groupe de données est sélectionné
#
# arith/Arithmetic.java
#
arithmeticLibrary = Arithmétique
# arith/Adder.java
adderComponent = Additionneur
adderInputTip = Entrée: un des nombres à additionner
adderOutputTip = Sortie: la somme des entrée (plus la retenue en entrée)
adderCarryInTip = Retenue en entrée: si 1, 1 de plus est ajouté à la sortie
adderCarryOutTip = Retenue en sortie: 1 si la somme dépasse le nombre de bits disponibles
# arith/Subtractor.java
subtractorComponent = Soustracteur
subtractorMinuendTip = Diminué: le nombre dont on soustrait
subtractorSubtrahendTip = Soustrait: le nombre à soustraire du diminué
subtractorOutputTip = Sortie: la différence entre le diminué et le soustrait
subtractorBorrowInTip = Emprunt en entrée: si 1 la sortie est dminuée de 1
subtractorBorrowOutTip = Emprunt en sortie: 1 si la différence est négative
# arith/Multiplier.java
multiplierComponent = Multiplicateur
multiplierInputTip = Entrée: l'un des nombres à multiplier
multiplierOutputTip = Output: le produit des entrées plus la retenue en entrée
multiplierCarryInTip = Retenue en entrée: une valeur à ajouter à la sortie
multiplierCarryOutTip = Retenue en sortie: le bit de poids le plus fort du produit
# arith/Divider.java
dividerComponent = Diviseur
dividerUpperInput = numérateur
dividerRemainderOutput = reste
dividerDividendLowerTip = numérateur bas: la moitié basse du nombre à diviser
dividerDividendUpperTip = numérateur haut: la moitié haute du nombre à diviser
dividerDivisorTip = Diviseur: dénominateur par lequel diviser
dividerOutputTip = Sortie: le résultat de la division du numérateur par le dénominateur
dividerRemainderTip = Reste: (numérateur - sortie * diviseur)
# arith/Negator.java
negatorComponent = Inverseur
negatorInputTip = Entrée: le nombre à inverser
negatorOutputTip = Sortie: le complémen à deux de l'inversion de l'entrée
# arith/Comparator.java
comparatorComponent = Comparateur
comparatorType = Type numérique
unsignedOption = Non signé
twosComplementOption = complément à 2
comparatorInputATip = A: membre de gauche de l'opération
comparatorInputBTip = B: membre de droite de l'opération
comparatorLessTip = Less: 1 si A est plus petit que B
comparatorEqualTip = Equal: 1 si A est égal à B
comparatorGreaterTip = Greater: 1 si A est plus grand que B
# arith/Shifter.java
shifterComponent = Décalage
shifterShiftAttr = Type de décalage
shiftLogicalLeft = Logique à gauche
shiftLogicalRight = Logique à droite
shiftArithmeticRight = Arithmétique à droite
shiftRollLeft = Rotation à gauche
shiftRollRight = Rotation à droite
shifterDistanceTip = Distance: combien de décalage sur l'entrée
shifterInputTip = Entrée: les bits à décaler
shifterOutputTip = Sortie: résultat du décalage de l'entrée
# arith/BitAdder.java
bitAdderComponent = Additionneur bit à bit
bitAdderInputTip = Entrée: les bits à compter
bitAdderOutputManyTip = Sortie: combien de bits sont à 1
# arith/BitFinder.java
bitFinderComponent = Recherche de bits
bitFinderFindLabel = trouver
bitFinderHighLabel = haut
bitFinderLowLabel = bas
bitFinderHighOption = Ordre le plus haut %s
bitFinderLowOption = Ordre le plus bas %s
bitFinderTypeAttr = Type
bitFinderIndexHighTip = Index: index de l'entrée avec l'ordre le plus haut %s
bitFinderIndexLowTip = Index: index de l'entrée avec l'ordre le plus bas %s
bitFinderPresentTip = Présence: 1 si l'entrée contien un %s
bitFinderInputTip = Entrée: les bits à rechercher
#
# io
#
# io/Io.java
ioLibrary = Entrée/Sortie
ioLabelCenter = Centre
ioBitWidthAttr = Largeur de bit
ioColorAttr = Couleur
ioLabelLocAttr = Position du label
ioLabelColorAttr = Couleur du label
ioActiveAttr = Actif si haut?
# io/Button.java
buttonComponent = Bouton
# io/Joystick.java
joystickComponent = Joystick
# io/Keyboard.java
keyboardComponent = Clavier
keybDesc = Clavier (buffer cap. %s)
keybBufferLengthAttr = Longueur du Buffer
keybClearTip = Clear: 1 efface le buffer
keybClockTip = Horloge: trigger consomme le premier caractère du buffer
keybEnableTip = Read activé: 0 désactive l'horloge
keybAvailTip = Disponible: 1 quand le tampon contient des caractères
keybOutputTip = Données: Valeur ASCII du premier caractère du tampon
# io/Led.java
ledComponent = LED
RGBledComponent = LED RVB
# io/DipSwitch.java
dipswitchComponent = Dip switch
nrOfSwitch = Nombre de commutateur
# io/SevenSegment.java
sevenSegmentComponent = Afficheur 7-Segment
# io/HexDigit.java
hexDigitComponent = Afficheur Hexadécimal
# io/DotMatrix.java
dotMatrixComponent = Matrice de LED
ioMatrixInput = Format de l'entrée
ioMatrixRows = Ligne de la matrice
ioMatrixCols = Colonne de la matrice
ioOnColor = On Color
ioOffColor = Off Color
ioBackgroundColor = Fond (background)
ioMatrixPersistenceAttr = Persistence lumineuse
ioMatrixShape = Forme d'un point
ioInputColumn = Colonnes
ioInputRow = Lignes
ioInputSelect = Selectionner ligne/colonne
ioShapeCircle = Circulaire
ioShapeSquare = Carré
# io/Tty.java
ttyComponent = TTY
ttyDesc = TTY (%s lignes, %s colonnes)
ttyDescShort = TTY
ttyRowsAttr = Lignes
ttyColsAttr = Colonnes
ttyClearTip = Effacer: 1 efface l'écran
ttyClockTip = Horloge: trigger ajoute le caractère en entrée
ttyEnableTip = Active l'écriture: 0 désactive l'horloge
ttyInputTip = Données: valeur ASCII du prochain character à écrire
# io/PortIO.java
pioComponent = Port I/O
pioNumber = Nombre de contacte
pioShowBus = Type de connexion ?
pioBuses = Un ou plusieurs bus
pioPins = Pin Simple
# io/ReptarLocalBus.java
repLBComponent = Reptar Local Bus
#
# hdl
#
# hdl/hdl.java
hdlLibrary = HDL-IP
# hdl/VhdlEntity.java
vhdlComponent = VHDL Entity
vhdlContentAttr = Contenu
vhdlContentValue = (click pour éditer)
# hdl/VhdlParser.jave
emptySourceException = Impossible d'analyser le contenu vide
duplicatedEntityException = Déclaration d'entité dupliquée détectée
CannotFindEntityException = The entity declaration cannot be found
CannotFindLibrariesException = La déclaration d'entité est introuvable
invalidVhdlFile = La structure de fichier VHDL n'est pas valided
missingBracketException = Parenthèse manquante dans la déclaration des ports
portDeclarationException = Syntaxe de port illégale
multiplePortsDeclarationException = Syntaxe illégale de ports multiples
vectorDeclarationException = Syntaxe de vecteur illicite
lineDeclarationException = Syntaxe de ligne illégale
invalidTypeException = Type de port invalide
keywordNotFoundException = Le mot clé '% s' est introuvable dans la description de l'entité
# HdlContentEditor.java
hdlFrameTitle = Logisim-evolution: HDL Editor
openButton = Importer...
saveButton = Exporter...
validateButton = Valider le contenu
closeButton = Fermer la fenêtre
importMessage = Toute modification apportée à ce composant sera perdue. Importer quand même?
importTitle = Confirmer l'importation
importOption = Importer
cancelOption = Annuler
confirmCloseYes = Oui
confirmCloseNo = Non
confirmCloseBackup = Créer une sauvegarde
confirmCloseTitle = Confirmer ferme
confirmCloseMessage = Toute modification apportée à ce composant sera perdue. Fermer quand même?
# HdlContent
validationErrorButton = Continuer
validationParseError = Erreur d'analyse
#
# tcl
#
tclLibrary = TCL
tclConsoleReds = TCL REDS console
tclGeneric = TCL generic
tclConsoleContentFile = TCL content file

tclInterfaceDefinition = TCL interface VHDL entity
tclInterfaceDefinitionValue = (click pour éditer)
