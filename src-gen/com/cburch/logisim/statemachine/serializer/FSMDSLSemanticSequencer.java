/*
 * generated by Xtext
 */
package com.cburch.logisim.statemachine.serializer;

import com.cburch.logisim.statemachine.fSMDSL.AndExpr;
import com.cburch.logisim.statemachine.fSMDSL.CmpExpr;
import com.cburch.logisim.statemachine.fSMDSL.Command;
import com.cburch.logisim.statemachine.fSMDSL.CommandList;
import com.cburch.logisim.statemachine.fSMDSL.CommandStmt;
import com.cburch.logisim.statemachine.fSMDSL.ConcatExpr;
import com.cburch.logisim.statemachine.fSMDSL.ConstRef;
import com.cburch.logisim.statemachine.fSMDSL.Constant;
import com.cburch.logisim.statemachine.fSMDSL.ConstantDef;
import com.cburch.logisim.statemachine.fSMDSL.ConstantDefList;
import com.cburch.logisim.statemachine.fSMDSL.DefaultPredicate;
import com.cburch.logisim.statemachine.fSMDSL.EQNAssignement;
import com.cburch.logisim.statemachine.fSMDSL.EQNSpec;
import com.cburch.logisim.statemachine.fSMDSL.FSM;
import com.cburch.logisim.statemachine.fSMDSL.FSMDSLPackage;
import com.cburch.logisim.statemachine.fSMDSL.FSMElement;
import com.cburch.logisim.statemachine.fSMDSL.InputPort;
import com.cburch.logisim.statemachine.fSMDSL.LayoutInfo;
import com.cburch.logisim.statemachine.fSMDSL.NotExpr;
import com.cburch.logisim.statemachine.fSMDSL.OrExpr;
import com.cburch.logisim.statemachine.fSMDSL.OutputPort;
import com.cburch.logisim.statemachine.fSMDSL.PortRef;
import com.cburch.logisim.statemachine.fSMDSL.PredicateStmt;
import com.cburch.logisim.statemachine.fSMDSL.Range;
import com.cburch.logisim.statemachine.fSMDSL.State;
import com.cburch.logisim.statemachine.fSMDSL.TemporayPort;
import com.cburch.logisim.statemachine.fSMDSL.Transition;
import com.cburch.logisim.statemachine.services.FSMDSLGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FSMDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FSMDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FSMDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FSMDSLPackage.AND_EXPR:
				if (rule == grammarAccess.getOrPlaRule()
						|| action == grammarAccess.getOrPlaAccess().getOrExprArgsAction_1_0()
						|| rule == grammarAccess.getAndPlaRule()
						|| action == grammarAccess.getAndPlaAccess().getAndExprArgsAction_1_0()
						|| rule == grammarAccess.getPrimaryPlaRule()) {
					sequence_AndPla(context, (AndExpr) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPredicateRule()
						|| rule == grammarAccess.getOrRule()
						|| action == grammarAccess.getOrAccess().getOrExprArgsAction_1_0()
						|| rule == grammarAccess.getAndRule()
						|| action == grammarAccess.getAndAccess().getAndExprArgsAction_1_0()
						|| rule == grammarAccess.getCmpRule()
						|| action == grammarAccess.getCmpAccess().getCmpExprArgsAction_1_0()
						|| rule == grammarAccess.getPrimaryRule()) {
					sequence_And(context, (AndExpr) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.CMP_EXPR:
				sequence_Cmp(context, (CmpExpr) semanticObject); 
				return; 
			case FSMDSLPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case FSMDSLPackage.COMMAND_LIST:
				if (rule == grammarAccess.getFSMElementRule()
						|| rule == grammarAccess.getCommandListRule()) {
					sequence_CommandList(context, (CommandList) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShortCommandListRule()) {
					sequence_ShortCommandList(context, (CommandList) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.COMMAND_STMT:
				sequence_CommandStmt(context, (CommandStmt) semanticObject); 
				return; 
			case FSMDSLPackage.CONCAT_EXPR:
				sequence_ConcatExpr(context, (ConcatExpr) semanticObject); 
				return; 
			case FSMDSLPackage.CONST_REF:
				sequence_ConstRef(context, (ConstRef) semanticObject); 
				return; 
			case FSMDSLPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case FSMDSLPackage.CONSTANT_DEF:
				sequence_ConstantDef(context, (ConstantDef) semanticObject); 
				return; 
			case FSMDSLPackage.CONSTANT_DEF_LIST:
				sequence_ConstantDefList(context, (ConstantDefList) semanticObject); 
				return; 
			case FSMDSLPackage.DEFAULT_PREDICATE:
				sequence_Default(context, (DefaultPredicate) semanticObject); 
				return; 
			case FSMDSLPackage.EQN_ASSIGNEMENT:
				sequence_EQNAssignement(context, (EQNAssignement) semanticObject); 
				return; 
			case FSMDSLPackage.EQN_SPEC:
				sequence_EQNSpec(context, (EQNSpec) semanticObject); 
				return; 
			case FSMDSLPackage.FSM:
				sequence_FSM(context, (FSM) semanticObject); 
				return; 
			case FSMDSLPackage.FSM_ELEMENT:
				sequence_DummyElement(context, (FSMElement) semanticObject); 
				return; 
			case FSMDSLPackage.INPUT_PORT:
				if (rule == grammarAccess.getFSMElementRule()
						|| rule == grammarAccess.getPortRule()
						|| rule == grammarAccess.getInputPortRule()) {
					sequence_InputPort(context, (InputPort) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShortInputPortRule()) {
					sequence_ShortInputPort(context, (InputPort) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.LAYOUT_INFO:
				sequence_LayoutInfo(context, (LayoutInfo) semanticObject); 
				return; 
			case FSMDSLPackage.NOT_EXPR:
				if (rule == grammarAccess.getOrPlaRule()
						|| action == grammarAccess.getOrPlaAccess().getOrExprArgsAction_1_0()
						|| rule == grammarAccess.getAndPlaRule()
						|| action == grammarAccess.getAndPlaAccess().getAndExprArgsAction_1_0()
						|| rule == grammarAccess.getPrimaryPlaRule()
						|| rule == grammarAccess.getNotPlaRule()) {
					sequence_NotPla(context, (NotExpr) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPredicateRule()
						|| rule == grammarAccess.getOrRule()
						|| action == grammarAccess.getOrAccess().getOrExprArgsAction_1_0()
						|| rule == grammarAccess.getAndRule()
						|| action == grammarAccess.getAndAccess().getAndExprArgsAction_1_0()
						|| rule == grammarAccess.getCmpRule()
						|| action == grammarAccess.getCmpAccess().getCmpExprArgsAction_1_0()
						|| rule == grammarAccess.getPrimaryRule()
						|| rule == grammarAccess.getNotRule()) {
					sequence_Not(context, (NotExpr) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.OR_EXPR:
				if (rule == grammarAccess.getOrPlaRule()
						|| action == grammarAccess.getOrPlaAccess().getOrExprArgsAction_1_0()
						|| rule == grammarAccess.getAndPlaRule()
						|| action == grammarAccess.getAndPlaAccess().getAndExprArgsAction_1_0()
						|| rule == grammarAccess.getPrimaryPlaRule()) {
					sequence_OrPla(context, (OrExpr) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPredicateRule()
						|| rule == grammarAccess.getOrRule()
						|| action == grammarAccess.getOrAccess().getOrExprArgsAction_1_0()
						|| rule == grammarAccess.getAndRule()
						|| action == grammarAccess.getAndAccess().getAndExprArgsAction_1_0()
						|| rule == grammarAccess.getCmpRule()
						|| action == grammarAccess.getCmpAccess().getCmpExprArgsAction_1_0()
						|| rule == grammarAccess.getPrimaryRule()) {
					sequence_Or(context, (OrExpr) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.OUTPUT_PORT:
				if (rule == grammarAccess.getFSMElementRule()
						|| rule == grammarAccess.getPortRule()
						|| rule == grammarAccess.getOutputPortRule()) {
					sequence_OutputPort(context, (OutputPort) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShortOutputPortRule()) {
					sequence_ShortOutputPort(context, (OutputPort) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.PORT_REF:
				if (rule == grammarAccess.getOrPlaRule()
						|| action == grammarAccess.getOrPlaAccess().getOrExprArgsAction_1_0()
						|| rule == grammarAccess.getAndPlaRule()
						|| action == grammarAccess.getAndPlaAccess().getAndExprArgsAction_1_0()
						|| rule == grammarAccess.getPrimaryPlaRule()
						|| rule == grammarAccess.getPortRefPlaRule()) {
					sequence_PortRefPla(context, (PortRef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPortRefRule()
						|| rule == grammarAccess.getPredicateRule()
						|| rule == grammarAccess.getOrRule()
						|| action == grammarAccess.getOrAccess().getOrExprArgsAction_1_0()
						|| rule == grammarAccess.getAndRule()
						|| action == grammarAccess.getAndAccess().getAndExprArgsAction_1_0()
						|| rule == grammarAccess.getCmpRule()
						|| action == grammarAccess.getCmpAccess().getCmpExprArgsAction_1_0()
						|| rule == grammarAccess.getPrimaryRule()) {
					sequence_PortRef(context, (PortRef) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.PREDICATE_STMT:
				sequence_PredicateStmt(context, (PredicateStmt) semanticObject); 
				return; 
			case FSMDSLPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case FSMDSLPackage.STATE:
				if (rule == grammarAccess.getFSMElementRule()) {
					sequence_LongState_ShortState(context, (State) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLongStateRule()) {
					sequence_LongState(context, (State) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShortStateRule()) {
					sequence_ShortState(context, (State) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.TEMPORAY_PORT:
				sequence_ShortTmpPort(context, (TemporayPort) semanticObject); 
				return; 
			case FSMDSLPackage.TRANSITION:
				if (rule == grammarAccess.getFSMElementRule()) {
					sequence_DotTransition_GotoTransition(context, (Transition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDotTransitionRule()) {
					sequence_DotTransition(context, (Transition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGotoTransitionRule()) {
					sequence_GotoTransition(context, (Transition) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     OrPla returns AndExpr
	 *     OrPla.OrExpr_1_0 returns AndExpr
	 *     AndPla returns AndExpr
	 *     AndPla.AndExpr_1_0 returns AndExpr
	 *     PrimaryPla returns AndExpr
	 *
	 * Constraint:
	 *     (args+=AndPla_AndExpr_1_0 args+=PrimaryPla)
	 */
	protected void sequence_AndPla(ISerializationContext context, AndExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns AndExpr
	 *     Or returns AndExpr
	 *     Or.OrExpr_1_0 returns AndExpr
	 *     And returns AndExpr
	 *     And.AndExpr_1_0 returns AndExpr
	 *     Cmp returns AndExpr
	 *     Cmp.CmpExpr_1_0 returns AndExpr
	 *     Primary returns AndExpr
	 *
	 * Constraint:
	 *     (args+=And_AndExpr_1_0 args+=Cmp)
	 */
	protected void sequence_And(ISerializationContext context, AndExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns CmpExpr
	 *     Or returns CmpExpr
	 *     Or.OrExpr_1_0 returns CmpExpr
	 *     And returns CmpExpr
	 *     And.AndExpr_1_0 returns CmpExpr
	 *     Cmp returns CmpExpr
	 *     Cmp.CmpExpr_1_0 returns CmpExpr
	 *     Primary returns CmpExpr
	 *
	 * Constraint:
	 *     (args+=Cmp_CmpExpr_1_0 (op='==' | op='/=') args+=Primary)
	 */
	protected void sequence_Cmp(ISerializationContext context, CmpExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FSMElement returns CommandList
	 *     CommandList returns CommandList
	 *
	 * Constraint:
	 *     (layout=LayoutInfo commands+=Command*)
	 */
	protected void sequence_CommandList(ISerializationContext context, CommandList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TOP returns CommandStmt
	 *     CommandStmt returns CommandStmt
	 *
	 * Constraint:
	 *     (
	 *         (cst+=ConstantDef cst+=ConstantDef*)? 
	 *         (in+=ShortInputPort in+=ShortInputPort*)? 
	 *         (out+=ShortOutputPort out+=ShortOutputPort*)? 
	 *         commands+=Command 
	 *         commands+=Command*
	 *     )
	 */
	protected void sequence_CommandStmt(ISerializationContext context, CommandStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (name=[OutputPort|ID] value=Or)
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.COMMAND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.COMMAND__NAME));
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.COMMAND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.COMMAND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandAccess().getNameOutputPortIDTerminalRuleCall_0_0_1(), semanticObject.eGet(FSMDSLPackage.Literals.COMMAND__NAME, false));
		feeder.accept(grammarAccess.getCommandAccess().getValueOrParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcatExpr returns ConcatExpr
	 *     Predicate returns ConcatExpr
	 *     Or returns ConcatExpr
	 *     Or.OrExpr_1_0 returns ConcatExpr
	 *     And returns ConcatExpr
	 *     And.AndExpr_1_0 returns ConcatExpr
	 *     Cmp returns ConcatExpr
	 *     Cmp.CmpExpr_1_0 returns ConcatExpr
	 *     Primary returns ConcatExpr
	 *
	 * Constraint:
	 *     (args+=Or args+=Or*)
	 */
	protected void sequence_ConcatExpr(ISerializationContext context, ConcatExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstRef returns ConstRef
	 *     Predicate returns ConstRef
	 *     Or returns ConstRef
	 *     Or.OrExpr_1_0 returns ConstRef
	 *     And returns ConstRef
	 *     And.AndExpr_1_0 returns ConstRef
	 *     Cmp returns ConstRef
	 *     Cmp.CmpExpr_1_0 returns ConstRef
	 *     Primary returns ConstRef
	 *
	 * Constraint:
	 *     const=[ConstantDef|ID]
	 */
	protected void sequence_ConstRef(ISerializationContext context, ConstRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.CONST_REF__CONST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.CONST_REF__CONST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstRefAccess().getConstConstantDefIDTerminalRuleCall_2_0_1(), semanticObject.eGet(FSMDSLPackage.Literals.CONST_REF__CONST, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TOP returns ConstantDefList
	 *     ConstantDefList returns ConstantDefList
	 *
	 * Constraint:
	 *     (constants+=ConstantDef constants+=ConstantDef*)
	 */
	protected void sequence_ConstantDefList(ISerializationContext context, ConstantDefList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstantDef returns ConstantDef
	 *
	 * Constraint:
	 *     (name=ID value=Constant)
	 */
	protected void sequence_ConstantDef(ISerializationContext context, ConstantDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.CONSTANT_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.CONSTANT_DEF__NAME));
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.CONSTANT_DEF__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.CONSTANT_DEF__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstantDefAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConstantDefAccess().getValueConstantParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns Constant
	 *     Or returns Constant
	 *     Or.OrExpr_1_0 returns Constant
	 *     And returns Constant
	 *     And.AndExpr_1_0 returns Constant
	 *     Cmp returns Constant
	 *     Cmp.CmpExpr_1_0 returns Constant
	 *     Primary returns Constant
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     (value=BIN | value=HEX)
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns DefaultPredicate
	 *     Default returns DefaultPredicate
	 *
	 * Constraint:
	 *     {DefaultPredicate}
	 */
	protected void sequence_Default(ISerializationContext context, DefaultPredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FSMElement returns Transition
	 *
	 * Constraint:
	 *     ((dst=[State|ID] predicate=Predicate? layout=LayoutInfo) | (src=[State|ID]? dst=[State|ID] predicate=Predicate? layout=LayoutInfo))
	 */
	protected void sequence_DotTransition_GotoTransition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DotTransition returns Transition
	 *
	 * Constraint:
	 *     (src=[State|ID]? dst=[State|ID] predicate=Predicate? layout=LayoutInfo)
	 */
	protected void sequence_DotTransition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DummyElement returns FSMElement
	 *
	 * Constraint:
	 *     layout=LayoutInfo
	 */
	protected void sequence_DummyElement(ISerializationContext context, FSMElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.FSM_ELEMENT__LAYOUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.FSM_ELEMENT__LAYOUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDummyElementAccess().getLayoutLayoutInfoParserRuleCall_1_0(), semanticObject.getLayout());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EQNAssignement returns EQNAssignement
	 *
	 * Constraint:
	 *     (lhs=ShortOutputPort rhs=OrPla)
	 */
	protected void sequence_EQNAssignement(ISerializationContext context, EQNAssignement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.EQN_ASSIGNEMENT__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.EQN_ASSIGNEMENT__LHS));
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.EQN_ASSIGNEMENT__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.EQN_ASSIGNEMENT__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEQNAssignementAccess().getLhsShortOutputPortParserRuleCall_0_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getEQNAssignementAccess().getRhsOrPlaParserRuleCall_2_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TOP returns EQNSpec
	 *     EQNSpec returns EQNSpec
	 *
	 * Constraint:
	 *     ((in+=ShortInputPort in+=ShortInputPort*)? (outNames+=ID outNames+=ID*)? eqns+=EQNAssignement+)
	 */
	protected void sequence_EQNSpec(ISerializationContext context, EQNSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TOP returns FSM
	 *     FSM returns FSM
	 *     FSMElement returns FSM
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         layout=LayoutInfo 
	 *         constants+=ConstantDef* 
	 *         (in+=InputPort | out+=OutputPort)+ 
	 *         width=INT 
	 *         start=[State|ID] 
	 *         (states+=LongState | states+=ShortState)*
	 *     )
	 */
	protected void sequence_FSM(ISerializationContext context, FSM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GotoTransition returns Transition
	 *
	 * Constraint:
	 *     (dst=[State|ID] predicate=Predicate? layout=LayoutInfo)
	 */
	protected void sequence_GotoTransition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FSMElement returns InputPort
	 *     Port returns InputPort
	 *     InputPort returns InputPort
	 *
	 * Constraint:
	 *     (name=ID width=INT? layout=LayoutInfo)
	 */
	protected void sequence_InputPort(ISerializationContext context, InputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayoutInfo returns LayoutInfo
	 *
	 * Constraint:
	 *     (x=INT y=INT (width=INT height=INT)?)?
	 */
	protected void sequence_LayoutInfo(ISerializationContext context, LayoutInfo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FSMElement returns State
	 *
	 * Constraint:
	 *     (
	 *         (name=ID code=BIN? layout=LayoutInfo commandList=CommandList? transition+=DotTransition*) | 
	 *         (name=ID code=BIN? layout=LayoutInfo commandList=ShortCommandList transition+=GotoTransition*)
	 *     )
	 */
	protected void sequence_LongState_ShortState(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LongState returns State
	 *
	 * Constraint:
	 *     (name=ID code=BIN? layout=LayoutInfo commandList=CommandList? transition+=DotTransition*)
	 */
	protected void sequence_LongState(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrPla returns NotExpr
	 *     OrPla.OrExpr_1_0 returns NotExpr
	 *     AndPla returns NotExpr
	 *     AndPla.AndExpr_1_0 returns NotExpr
	 *     PrimaryPla returns NotExpr
	 *     NotPla returns NotExpr
	 *
	 * Constraint:
	 *     args+=PrimaryPla
	 */
	protected void sequence_NotPla(ISerializationContext context, NotExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns NotExpr
	 *     Or returns NotExpr
	 *     Or.OrExpr_1_0 returns NotExpr
	 *     And returns NotExpr
	 *     And.AndExpr_1_0 returns NotExpr
	 *     Cmp returns NotExpr
	 *     Cmp.CmpExpr_1_0 returns NotExpr
	 *     Primary returns NotExpr
	 *     Not returns NotExpr
	 *
	 * Constraint:
	 *     args+=Primary
	 */
	protected void sequence_Not(ISerializationContext context, NotExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrPla returns OrExpr
	 *     OrPla.OrExpr_1_0 returns OrExpr
	 *     AndPla returns OrExpr
	 *     AndPla.AndExpr_1_0 returns OrExpr
	 *     PrimaryPla returns OrExpr
	 *
	 * Constraint:
	 *     (args+=OrPla_OrExpr_1_0 args+=And)
	 */
	protected void sequence_OrPla(ISerializationContext context, OrExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns OrExpr
	 *     Or returns OrExpr
	 *     Or.OrExpr_1_0 returns OrExpr
	 *     And returns OrExpr
	 *     And.AndExpr_1_0 returns OrExpr
	 *     Cmp returns OrExpr
	 *     Cmp.CmpExpr_1_0 returns OrExpr
	 *     Primary returns OrExpr
	 *
	 * Constraint:
	 *     (args+=Or_OrExpr_1_0 args+=And)
	 */
	protected void sequence_Or(ISerializationContext context, OrExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FSMElement returns OutputPort
	 *     Port returns OutputPort
	 *     OutputPort returns OutputPort
	 *
	 * Constraint:
	 *     (name=ID width=INT? layout=LayoutInfo)
	 */
	protected void sequence_OutputPort(ISerializationContext context, OutputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrPla returns PortRef
	 *     OrPla.OrExpr_1_0 returns PortRef
	 *     AndPla returns PortRef
	 *     AndPla.AndExpr_1_0 returns PortRef
	 *     PrimaryPla returns PortRef
	 *     PortRefPla returns PortRef
	 *
	 * Constraint:
	 *     port=[Port|ID]
	 */
	protected void sequence_PortRefPla(ISerializationContext context, PortRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.PORT_REF__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.PORT_REF__PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPortRefPlaAccess().getPortPortIDTerminalRuleCall_1_0_1(), semanticObject.eGet(FSMDSLPackage.Literals.PORT_REF__PORT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PortRef returns PortRef
	 *     Predicate returns PortRef
	 *     Or returns PortRef
	 *     Or.OrExpr_1_0 returns PortRef
	 *     And returns PortRef
	 *     And.AndExpr_1_0 returns PortRef
	 *     Cmp returns PortRef
	 *     Cmp.CmpExpr_1_0 returns PortRef
	 *     Primary returns PortRef
	 *
	 * Constraint:
	 *     (port=[Port|ID] range=Range?)
	 */
	protected void sequence_PortRef(ISerializationContext context, PortRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TOP returns PredicateStmt
	 *     PredicateStmt returns PredicateStmt
	 *
	 * Constraint:
	 *     ((cst+=ConstantDef cst+=ConstantDef*)? (in+=ShortInputPort in+=ShortInputPort*)? predicate=Predicate)
	 */
	protected void sequence_PredicateStmt(ISerializationContext context, PredicateStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Range returns Range
	 *
	 * Constraint:
	 *     (ub=INT? lb=INT)
	 */
	protected void sequence_Range(ISerializationContext context, Range semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShortCommandList returns CommandList
	 *
	 * Constraint:
	 *     (commands+=Command+ layout=LayoutInfo)?
	 */
	protected void sequence_ShortCommandList(ISerializationContext context, CommandList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShortInputPort returns InputPort
	 *
	 * Constraint:
	 *     (name=ID width=INT?)
	 */
	protected void sequence_ShortInputPort(ISerializationContext context, InputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShortOutputPort returns OutputPort
	 *
	 * Constraint:
	 *     (name=ID width=INT?)
	 */
	protected void sequence_ShortOutputPort(ISerializationContext context, OutputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShortState returns State
	 *
	 * Constraint:
	 *     (name=ID code=BIN? layout=LayoutInfo commandList=ShortCommandList transition+=GotoTransition*)
	 */
	protected void sequence_ShortState(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShortTmpPort returns TemporayPort
	 *
	 * Constraint:
	 *     (name=ID width=INT?)
	 */
	protected void sequence_ShortTmpPort(ISerializationContext context, TemporayPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
