/**
 * generated by Xtext
 */
package com.cburch.logisim.statemachine.fSMDSL.impl;

import com.cburch.logisim.statemachine.fSMDSL.EQNAssignement;
import com.cburch.logisim.statemachine.fSMDSL.EQNSpec;
import com.cburch.logisim.statemachine.fSMDSL.FSMDSLPackage;
import com.cburch.logisim.statemachine.fSMDSL.Port;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EQN Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.cburch.logisim.statemachine.fSMDSL.impl.EQNSpecImpl#getIn <em>In</em>}</li>
 *   <li>{@link com.cburch.logisim.statemachine.fSMDSL.impl.EQNSpecImpl#getOutNames <em>Out Names</em>}</li>
 *   <li>{@link com.cburch.logisim.statemachine.fSMDSL.impl.EQNSpecImpl#getEqns <em>Eqns</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EQNSpecImpl extends TOPImpl implements EQNSpec
{
  /**
   * The cached value of the '{@link #getIn() <em>In</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIn()
   * @generated
   * @ordered
   */
  protected EList<Port> in;

  /**
   * The cached value of the '{@link #getOutNames() <em>Out Names</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutNames()
   * @generated
   * @ordered
   */
  protected EList<String> outNames;

  /**
   * The cached value of the '{@link #getEqns() <em>Eqns</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEqns()
   * @generated
   * @ordered
   */
  protected EList<EQNAssignement> eqns;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EQNSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FSMDSLPackage.Literals.EQN_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Port> getIn()
  {
    if (in == null)
    {
      in = new EObjectContainmentEList<Port>(Port.class, this, FSMDSLPackage.EQN_SPEC__IN);
    }
    return in;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getOutNames()
  {
    if (outNames == null)
    {
      outNames = new EDataTypeEList<String>(String.class, this, FSMDSLPackage.EQN_SPEC__OUT_NAMES);
    }
    return outNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EQNAssignement> getEqns()
  {
    if (eqns == null)
    {
      eqns = new EObjectContainmentEList<EQNAssignement>(EQNAssignement.class, this, FSMDSLPackage.EQN_SPEC__EQNS);
    }
    return eqns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FSMDSLPackage.EQN_SPEC__IN:
        return ((InternalEList<?>)getIn()).basicRemove(otherEnd, msgs);
      case FSMDSLPackage.EQN_SPEC__EQNS:
        return ((InternalEList<?>)getEqns()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FSMDSLPackage.EQN_SPEC__IN:
        return getIn();
      case FSMDSLPackage.EQN_SPEC__OUT_NAMES:
        return getOutNames();
      case FSMDSLPackage.EQN_SPEC__EQNS:
        return getEqns();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FSMDSLPackage.EQN_SPEC__IN:
        getIn().clear();
        getIn().addAll((Collection<? extends Port>)newValue);
        return;
      case FSMDSLPackage.EQN_SPEC__OUT_NAMES:
        getOutNames().clear();
        getOutNames().addAll((Collection<? extends String>)newValue);
        return;
      case FSMDSLPackage.EQN_SPEC__EQNS:
        getEqns().clear();
        getEqns().addAll((Collection<? extends EQNAssignement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FSMDSLPackage.EQN_SPEC__IN:
        getIn().clear();
        return;
      case FSMDSLPackage.EQN_SPEC__OUT_NAMES:
        getOutNames().clear();
        return;
      case FSMDSLPackage.EQN_SPEC__EQNS:
        getEqns().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FSMDSLPackage.EQN_SPEC__IN:
        return in != null && !in.isEmpty();
      case FSMDSLPackage.EQN_SPEC__OUT_NAMES:
        return outNames != null && !outNames.isEmpty();
      case FSMDSLPackage.EQN_SPEC__EQNS:
        return eqns != null && !eqns.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (outNames: ");
    result.append(outNames);
    result.append(')');
    return result.toString();
  }

} //EQNSpecImpl
